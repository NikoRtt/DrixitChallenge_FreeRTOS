
DrixitChallenge_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff4  08006ff4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006ff4  08006ff4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ff4  08006ff4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  20000074  08007070  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000121c  08007070  0002121c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f74  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358d  00000000  00000000  00037011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  0003a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  0003bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9bc  00000000  00000000  0003d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f95  00000000  00000000  00057c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098401  00000000  00000000  00070ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108fa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006214  00000000  00000000  00108ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006db8 	.word	0x08006db8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006db8 	.word	0x08006db8

08000150 <lis3mdl_Init>:

/*==================[global variables]=======================================*/

/*==================[Initialization functions definition]====================*/

uint8_t lis3mdl_Init ( LIS3MDL_Data_t* dev, I2C_HandleTypeDef *i2cHandle ){
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	6039      	str	r1, [r7, #0]

	// Set the struct parameters first

	dev->i2cHandle = i2cHandle;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	683a      	ldr	r2, [r7, #0]
 800015e:	601a      	str	r2, [r3, #0]
	dev->mag_x = 0.0f;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	f04f 0200 	mov.w	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
	dev->mag_y = 0.0f;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	f04f 0200 	mov.w	r2, #0
 800016e:	60da      	str	r2, [r3, #12]
	dev->mag_z = 0.0f;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	f04f 0200 	mov.w	r2, #0
 8000176:	611a      	str	r2, [r3, #16]
	dev->temp = 0.0f;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f04f 0200 	mov.w	r2, #0
 800017e:	615a      	str	r2, [r3, #20]

	// Variable to accumulate errors to determine how many transaction errors we have.

	uint8_t accumulatedErrors = 0;
 8000180:	2300      	movs	r3, #0
 8000182:	73fb      	strb	r3, [r7, #15]
	uint8_t regValue;
	HAL_StatusTypeDef status;

	// Checking the device ID

	status = lis3mdl_ReadRegister(dev, LIS3MDL_REG_WHO_AM_I, &regValue);
 8000184:	f107 030d 	add.w	r3, r7, #13
 8000188:	461a      	mov	r2, r3
 800018a:	210f      	movs	r1, #15
 800018c:	6878      	ldr	r0, [r7, #4]
 800018e:	f000 f86d 	bl	800026c <lis3mdl_ReadRegister>
 8000192:	4603      	mov	r3, r0
 8000194:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000196:	7bbb      	ldrb	r3, [r7, #14]
 8000198:	2b00      	cmp	r3, #0
 800019a:	bf14      	ite	ne
 800019c:	2301      	movne	r3, #1
 800019e:	2300      	moveq	r3, #0
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	461a      	mov	r2, r3
 80001a4:	7bfb      	ldrb	r3, [r7, #15]
 80001a6:	4413      	add	r3, r2
 80001a8:	73fb      	strb	r3, [r7, #15]

    if (regValue != LIS3MDL_DEVICE_ID) {
 80001aa:	7b7b      	ldrb	r3, [r7, #13]
 80001ac:	2b3d      	cmp	r3, #61	; 0x3d
 80001ae:	d001      	beq.n	80001b4 <lis3mdl_Init+0x64>

    	return FAIL;
 80001b0:	23ff      	movs	r3, #255	; 0xff
 80001b2:	e057      	b.n	8000264 <lis3mdl_Init+0x114>
		3. Write 0Ch in CTRL_REG4. Sets UHP mode on the Z-axis.
		4. Write 00h in CTRL_REG3. Sets continuous-measurement mode. */

    // FS = +/-12G

    regValue = dev->scale << 5;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	7e1b      	ldrb	r3, [r3, #24]
 80001b8:	015b      	lsls	r3, r3, #5
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_2, &regValue);
 80001be:	f107 030d 	add.w	r3, r7, #13
 80001c2:	461a      	mov	r2, r3
 80001c4:	2121      	movs	r1, #33	; 0x21
 80001c6:	6878      	ldr	r0, [r7, #4]
 80001c8:	f000 f86b 	bl	80002a2 <lis3mdl_WriteRegister>
 80001cc:	4603      	mov	r3, r0
 80001ce:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 80001d0:	7bbb      	ldrb	r3, [r7, #14]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	bf14      	ite	ne
 80001d6:	2301      	movne	r3, #1
 80001d8:	2300      	moveq	r3, #0
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	461a      	mov	r2, r3
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	4413      	add	r3, r2
 80001e2:	73fb      	strb	r3, [r7, #15]

    // Ultra-High performance in X and Y axes, ODR at 80Hz and temperature enable.

    regValue = LIS3MDL_REG_CTL_1_TEMP_EN | (LIS3MDL_PERFORMANCE_ULTRA_HIGH << 5) | (LIS3MDL_DATA_RATE_80_HZ << 2);
 80001e4:	23fc      	movs	r3, #252	; 0xfc
 80001e6:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_1, &regValue);
 80001e8:	f107 030d 	add.w	r3, r7, #13
 80001ec:	461a      	mov	r2, r3
 80001ee:	2120      	movs	r1, #32
 80001f0:	6878      	ldr	r0, [r7, #4]
 80001f2:	f000 f856 	bl	80002a2 <lis3mdl_WriteRegister>
 80001f6:	4603      	mov	r3, r0
 80001f8:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 80001fa:	7bbb      	ldrb	r3, [r7, #14]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	bf14      	ite	ne
 8000200:	2301      	movne	r3, #1
 8000202:	2300      	moveq	r3, #0
 8000204:	b2db      	uxtb	r3, r3
 8000206:	461a      	mov	r2, r3
 8000208:	7bfb      	ldrb	r3, [r7, #15]
 800020a:	4413      	add	r3, r2
 800020c:	73fb      	strb	r3, [r7, #15]

    // Ultra-High performance in Z axe.

    regValue = 0x00 | (LIS3MDL_PERFORMANCE_ULTRA_HIGH << 2);
 800020e:	230c      	movs	r3, #12
 8000210:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_4, &regValue);
 8000212:	f107 030d 	add.w	r3, r7, #13
 8000216:	461a      	mov	r2, r3
 8000218:	2123      	movs	r1, #35	; 0x23
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f841 	bl	80002a2 <lis3mdl_WriteRegister>
 8000220:	4603      	mov	r3, r0
 8000222:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000224:	7bbb      	ldrb	r3, [r7, #14]
 8000226:	2b00      	cmp	r3, #0
 8000228:	bf14      	ite	ne
 800022a:	2301      	movne	r3, #1
 800022c:	2300      	moveq	r3, #0
 800022e:	b2db      	uxtb	r3, r3
 8000230:	461a      	mov	r2, r3
 8000232:	7bfb      	ldrb	r3, [r7, #15]
 8000234:	4413      	add	r3, r2
 8000236:	73fb      	strb	r3, [r7, #15]

    // Sets continuous-measurement mode.

    regValue = 0x00 | LIS3MDL_MODE_CONTINUOUS_MEASUREMENT;
 8000238:	2300      	movs	r3, #0
 800023a:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_3, &regValue);
 800023c:	f107 030d 	add.w	r3, r7, #13
 8000240:	461a      	mov	r2, r3
 8000242:	2122      	movs	r1, #34	; 0x22
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f000 f82c 	bl	80002a2 <lis3mdl_WriteRegister>
 800024a:	4603      	mov	r3, r0
 800024c:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 800024e:	7bbb      	ldrb	r3, [r7, #14]
 8000250:	2b00      	cmp	r3, #0
 8000252:	bf14      	ite	ne
 8000254:	2301      	movne	r3, #1
 8000256:	2300      	moveq	r3, #0
 8000258:	b2db      	uxtb	r3, r3
 800025a:	461a      	mov	r2, r3
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	4413      	add	r3, r2
 8000260:	73fb      	strb	r3, [r7, #15]

    return accumulatedErrors;
 8000262:	7bfb      	ldrb	r3, [r7, #15]
}
 8000264:	4618      	mov	r0, r3
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <lis3mdl_ReadRegister>:
	return status;
}

/*==================[low level functions definition]=========================*/

HAL_StatusTypeDef lis3mdl_ReadRegister( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value ){
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af04      	add	r7, sp, #16
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	460b      	mov	r3, r1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, 1, HAL_MAX_DELAY);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	6818      	ldr	r0, [r3, #0]
 800027e:	7afb      	ldrb	r3, [r7, #11]
 8000280:	b29a      	uxth	r2, r3
 8000282:	f04f 33ff 	mov.w	r3, #4294967295
 8000286:	9302      	str	r3, [sp, #8]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2301      	movs	r3, #1
 8000292:	213c      	movs	r1, #60	; 0x3c
 8000294:	f001 fdd4 	bl	8001e40 <HAL_I2C_Mem_Read>
 8000298:	4603      	mov	r3, r0
}
 800029a:	4618      	mov	r0, r3
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <lis3mdl_WriteRegister>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_WriteRegister( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value ){
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b088      	sub	sp, #32
 80002a6:	af04      	add	r7, sp, #16
 80002a8:	60f8      	str	r0, [r7, #12]
 80002aa:	460b      	mov	r3, r1
 80002ac:	607a      	str	r2, [r7, #4]
 80002ae:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, 1, HAL_MAX_DELAY);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	7afb      	ldrb	r3, [r7, #11]
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	f04f 33ff 	mov.w	r3, #4294967295
 80002bc:	9302      	str	r3, [sp, #8]
 80002be:	2301      	movs	r3, #1
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2301      	movs	r3, #1
 80002c8:	213c      	movs	r1, #60	; 0x3c
 80002ca:	f001 fcbf 	bl	8001c4c <HAL_I2C_Mem_Write>
 80002ce:	4603      	mov	r3, r0

}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <StoreUSARTData>:

/*************************************************************/
//-Store in a buffer all the receive data (circular buffer)
/*************************************************************/

bool_t StoreUSARTData(uint8_t* data, uint16_t size){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	807b      	strh	r3, [r7, #2]

	bool_t retVal = FALSE;
 80002e4:	2300      	movs	r3, #0
 80002e6:	73fb      	strb	r3, [r7, #15]

	uint8_t auxSize = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	73bb      	strb	r3, [r7, #14]

	if((Escritura_BufferUsart1 + size) >= UART_MAX_RECEIVE_DATA){
 80002ec:	4b2b      	ldr	r3, [pc, #172]	; (800039c <StoreUSARTData+0xc4>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	461a      	mov	r2, r3
 80002f2:	887b      	ldrh	r3, [r7, #2]
 80002f4:	4413      	add	r3, r2
 80002f6:	2b18      	cmp	r3, #24
 80002f8:	dd29      	ble.n	800034e <StoreUSARTData+0x76>

		auxSize = (Escritura_BufferUsart1 + size) - UART_MAX_RECEIVE_DATA;
 80002fa:	887b      	ldrh	r3, [r7, #2]
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <StoreUSARTData+0xc4>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4413      	add	r3, r2
 8000304:	b2db      	uxtb	r3, r3
 8000306:	3b19      	subs	r3, #25
 8000308:	73bb      	strb	r3, [r7, #14]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, (size - auxSize));
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <StoreUSARTData+0xc4>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	461a      	mov	r2, r3
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <StoreUSARTData+0xc8>)
 8000312:	18d0      	adds	r0, r2, r3
 8000314:	887a      	ldrh	r2, [r7, #2]
 8000316:	7bbb      	ldrb	r3, [r7, #14]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	461a      	mov	r2, r3
 800031c:	6879      	ldr	r1, [r7, #4]
 800031e:	f006 fc6d 	bl	8006bfc <memcpy>

		Escritura_BufferUsart1 = 0;
 8000322:	4b1e      	ldr	r3, [pc, #120]	; (800039c <StoreUSARTData+0xc4>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), (data + (size - auxSize)), auxSize);
 8000328:	4b1c      	ldr	r3, [pc, #112]	; (800039c <StoreUSARTData+0xc4>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	461a      	mov	r2, r3
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <StoreUSARTData+0xc8>)
 8000330:	18d0      	adds	r0, r2, r3
 8000332:	887a      	ldrh	r2, [r7, #2]
 8000334:	7bbb      	ldrb	r3, [r7, #14]
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	461a      	mov	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4413      	add	r3, r2
 800033e:	7bba      	ldrb	r2, [r7, #14]
 8000340:	4619      	mov	r1, r3
 8000342:	f006 fc5b 	bl	8006bfc <memcpy>

		Escritura_BufferUsart1 = auxSize;
 8000346:	4a15      	ldr	r2, [pc, #84]	; (800039c <StoreUSARTData+0xc4>)
 8000348:	7bbb      	ldrb	r3, [r7, #14]
 800034a:	7013      	strb	r3, [r2, #0]
 800034c:	e011      	b.n	8000372 <StoreUSARTData+0x9a>
	}

	else {

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, size);
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <StoreUSARTData+0xc4>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	461a      	mov	r2, r3
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <StoreUSARTData+0xc8>)
 8000356:	4413      	add	r3, r2
 8000358:	887a      	ldrh	r2, [r7, #2]
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	4618      	mov	r0, r3
 800035e:	f006 fc4d 	bl	8006bfc <memcpy>

		Escritura_BufferUsart1 = Escritura_BufferUsart1 + size;
 8000362:	887b      	ldrh	r3, [r7, #2]
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <StoreUSARTData+0xc4>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	4413      	add	r3, r2
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <StoreUSARTData+0xc4>)
 8000370:	701a      	strb	r2, [r3, #0]
	}

	if(BufferUsart1[Escritura_BufferUsart1 - 1] == '\r' || BufferUsart1[Escritura_BufferUsart1 - 1] == '\n'){
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <StoreUSARTData+0xc4>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	3b01      	subs	r3, #1
 8000378:	4a09      	ldr	r2, [pc, #36]	; (80003a0 <StoreUSARTData+0xc8>)
 800037a:	5cd3      	ldrb	r3, [r2, r3]
 800037c:	2b0d      	cmp	r3, #13
 800037e:	d006      	beq.n	800038e <StoreUSARTData+0xb6>
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <StoreUSARTData+0xc4>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	3b01      	subs	r3, #1
 8000386:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <StoreUSARTData+0xc8>)
 8000388:	5cd3      	ldrb	r3, [r2, r3]
 800038a:	2b0a      	cmp	r3, #10
 800038c:	d101      	bne.n	8000392 <StoreUSARTData+0xba>

		retVal = TRUE;
 800038e:	2301      	movs	r3, #1
 8000390:	73fb      	strb	r3, [r7, #15]
	}

	return retVal;
 8000392:	7bfb      	ldrb	r3, [r7, #15]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200000a9 	.word	0x200000a9
 80003a0:	20000090 	.word	0x20000090

080003a4 <DecodeReceivedData>:

/*************************************************************/
//-Decode the data received from uart
/*************************************************************/

bool_t DecodeReceivedData( uint16_t* NumberReceived ){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]

	bool_t retVal = FALSE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t j = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	char DatosRecibidos[UART_MAX_RECEIVE_DATA];

	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 80003b8:	e03f      	b.n	800043a <DecodeReceivedData+0x96>

		// I remove the characters that are not information
		// If it is any of these characters, nothing is done.
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 80003ba:	4b31      	ldr	r3, [pc, #196]	; (8000480 <DecodeReceivedData+0xdc>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	461a      	mov	r2, r3
 80003c0:	4b30      	ldr	r3, [pc, #192]	; (8000484 <DecodeReceivedData+0xe0>)
 80003c2:	5c9b      	ldrb	r3, [r3, r2]
 80003c4:	2b0d      	cmp	r3, #13
 80003c6:	d02b      	beq.n	8000420 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 80003c8:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <DecodeReceivedData+0xdc>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	461a      	mov	r2, r3
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <DecodeReceivedData+0xe0>)
 80003d0:	5c9b      	ldrb	r3, [r3, r2]
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 80003d2:	2b0a      	cmp	r3, #10
 80003d4:	d024      	beq.n	8000420 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 80003d6:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <DecodeReceivedData+0xdc>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	461a      	mov	r2, r3
 80003dc:	4b29      	ldr	r3, [pc, #164]	; (8000484 <DecodeReceivedData+0xe0>)
 80003de:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d01d      	beq.n	8000420 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 80003e4:	4b26      	ldr	r3, [pc, #152]	; (8000480 <DecodeReceivedData+0xdc>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b26      	ldr	r3, [pc, #152]	; (8000484 <DecodeReceivedData+0xe0>)
 80003ec:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 80003ee:	2b20      	cmp	r3, #32
 80003f0:	d016      	beq.n	8000420 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == 0xff){}
 80003f2:	4b23      	ldr	r3, [pc, #140]	; (8000480 <DecodeReceivedData+0xdc>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	461a      	mov	r2, r3
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <DecodeReceivedData+0xe0>)
 80003fa:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 80003fc:	2bff      	cmp	r3, #255	; 0xff
 80003fe:	d00f      	beq.n	8000420 <DecodeReceivedData+0x7c>

		else {

			*(DatosRecibidos + j) = BufferUsart1[Lectura_BufferUsart1];
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <DecodeReceivedData+0xdc>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4619      	mov	r1, r3
 8000406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800040a:	f107 020c 	add.w	r2, r7, #12
 800040e:	4413      	add	r3, r2
 8000410:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <DecodeReceivedData+0xe0>)
 8000412:	5c52      	ldrb	r2, [r2, r1]
 8000414:	701a      	strb	r2, [r3, #0]

			j++;
 8000416:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800041a:	3301      	adds	r3, #1
 800041c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		Lectura_BufferUsart1++;
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <DecodeReceivedData+0xdc>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	b2da      	uxtb	r2, r3
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <DecodeReceivedData+0xdc>)
 800042a:	701a      	strb	r2, [r3, #0]

		if(Lectura_BufferUsart1 >= UART_MAX_RECEIVE_DATA){
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <DecodeReceivedData+0xdc>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b18      	cmp	r3, #24
 8000432:	d902      	bls.n	800043a <DecodeReceivedData+0x96>

			Lectura_BufferUsart1 = 0;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <DecodeReceivedData+0xdc>)
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <DecodeReceivedData+0xdc>)
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <DecodeReceivedData+0xe4>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	429a      	cmp	r2, r3
 8000444:	d1b9      	bne.n	80003ba <DecodeReceivedData+0x16>
		}
	}

	*(DatosRecibidos + j) = '\0';
 8000446:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800044a:	f107 020c 	add.w	r2, r7, #12
 800044e:	4413      	add	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]

	*NumberReceived = atoi(DatosRecibidos);
 8000454:	f107 030c 	add.w	r3, r7, #12
 8000458:	4618      	mov	r0, r3
 800045a:	f006 fb87 	bl	8006b6c <atoi>
 800045e:	4603      	mov	r3, r0
 8000460:	b29a      	uxth	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	801a      	strh	r2, [r3, #0]

	if(*NumberReceived != 0){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d002      	beq.n	8000474 <DecodeReceivedData+0xd0>

		retVal = TRUE;
 800046e:	2301      	movs	r3, #1
 8000470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return retVal; //si no recibi nada valido, vuelve por FALSE
 8000474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000478:	4618      	mov	r0, r3
 800047a:	3728      	adds	r7, #40	; 0x28
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200000aa 	.word	0x200000aa
 8000484:	20000090 	.word	0x20000090
 8000488:	200000a9 	.word	0x200000a9

0800048c <PrintString>:

/*************************************************************/
//-Prints string
/*************************************************************/

void PrintString( UART_HandleTypeDef printer, char* string, uint16_t size ){
 800048c:	b084      	sub	sp, #16
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0
 8000492:	f107 0c08 	add.w	ip, r7, #8
 8000496:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_UART_Transmit( &printer, (uint8_t*)string, size, HAL_MAX_DELAY );
 800049a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
 80004a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80004a4:	f107 0008 	add.w	r0, r7, #8
 80004a8:	f003 f9f1 	bl	800388e <HAL_UART_Transmit>
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004b4:	b004      	add	sp, #16
 80004b6:	4770      	bx	lr

080004b8 <PrintIntFormat>:

/*************************************************************/
//-Prints integer
/*************************************************************/

void PrintIntFormat( UART_HandleTypeDef printer, int16_t number ){
 80004b8:	b084      	sub	sp, #16
 80004ba:	b5b0      	push	{r4, r5, r7, lr}
 80004bc:	b094      	sub	sp, #80	; 0x50
 80004be:	af10      	add	r7, sp, #64	; 0x40
 80004c0:	f107 0420 	add.w	r4, r7, #32
 80004c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char DataNumber[10];

	memset (DataNumber,'\0', 10);
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	220a      	movs	r2, #10
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f006 fba2 	bl	8006c18 <memset>

	itoa(number, DataNumber, 10);
 80004d4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80004d8:	1d39      	adds	r1, r7, #4
 80004da:	220a      	movs	r2, #10
 80004dc:	4618      	mov	r0, r3
 80004de:	f006 fb8b 	bl	8006bf8 <itoa>

	PrintString( printer, DataNumber, sizeof(DataNumber) );
 80004e2:	230a      	movs	r3, #10
 80004e4:	930e      	str	r3, [sp, #56]	; 0x38
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	930d      	str	r3, [sp, #52]	; 0x34
 80004ea:	466d      	mov	r5, sp
 80004ec:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80004f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004fc:	6823      	ldr	r3, [r4, #0]
 80004fe:	602b      	str	r3, [r5, #0]
 8000500:	f107 0320 	add.w	r3, r7, #32
 8000504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000506:	f7ff ffc1 	bl	800048c <PrintString>
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000514:	b004      	add	sp, #16
 8000516:	4770      	bx	lr

08000518 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x28>)
 8000528:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <vApplicationGetIdleTaskMemory+0x2c>)
 800052e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	200000ac 	.word	0x200000ac
 8000544:	20000100 	.word	0x20000100

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b0a2      	sub	sp, #136	; 0x88
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fccb 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f88b 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f98b 	bl	8000870 <MX_GPIO_Init>
  MX_DMA_Init();
 800055a:	f000 f96b 	bl	8000834 <MX_DMA_Init>
  MX_I2C1_Init();
 800055e:	f000 f8cb 	bl	80006f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000562:	f000 f8f7 	bl	8000754 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000566:	f000 f92b 	bl	80007c0 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemaphoreUART */
  osSemaphoreDef(binarySemaphoreUART);
 800056a:	2300      	movs	r3, #0
 800056c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000570:	2300      	movs	r3, #0
 8000572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  binarySemaphoreUARTHandle = osSemaphoreCreate(osSemaphore(binarySemaphoreUART), 1);
 8000576:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800057a:	2101      	movs	r1, #1
 800057c:	4618      	mov	r0, r3
 800057e:	f004 f816 	bl	80045ae <osSemaphoreCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a2e      	ldr	r2, [pc, #184]	; (8000640 <main+0xf8>)
 8000586:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of usartReceptionQueue */
  osMessageQDef(usartReceptionQueue, 16, uint8_t);
 8000588:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <main+0xfc>)
 800058a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800058e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usartReceptionQueueHandle = osMessageCreate(osMessageQ(usartReceptionQueue), NULL);
 8000594:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 f8be 	bl	800471c <osMessageCreate>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a29      	ldr	r2, [pc, #164]	; (8000648 <main+0x100>)
 80005a4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of measurementTask */
  osThreadDef(measurementTask, measurementFunction, osPriorityNormal, 0, 128);
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <main+0x104>)
 80005a8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  measurementTaskHandle = osThreadCreate(osThread(measurementTask), NULL);
 80005ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 ff94 	bl	80044ee <osThreadCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <main+0x108>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of recordingTask */
  osThreadDef(recordingTask, recordingFunction, osPriorityNormal, 0, 128);
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <main+0x10c>)
 80005ce:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  recordingTaskHandle = osThreadCreate(osThread(recordingTask), NULL);
 80005e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 ff81 	bl	80044ee <osThreadCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <main+0x110>)
 80005f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of receptionTask */
  osThreadDef(receptionTask, receptionFunction, osPriorityNormal, 0, 128);
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <main+0x114>)
 80005f4:	f107 041c 	add.w	r4, r7, #28
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receptionTaskHandle = osThreadCreate(osThread(receptionTask), NULL);
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f003 ff6e 	bl	80044ee <osThreadCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <main+0x118>)
 8000616:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendingTask */
  osThreadDef(sendingTask, sendingFunction, osPriorityNormal, 0, 128);
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <main+0x11c>)
 800061a:	463c      	mov	r4, r7
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000626:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendingTaskHandle = osThreadCreate(osThread(sendingTask), NULL);
 800062a:	463b      	mov	r3, r7
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 ff5d 	bl	80044ee <osThreadCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <main+0x120>)
 8000638:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063a:	f003 ff51 	bl	80044e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0xf6>
 8000640:	20000448 	.word	0x20000448
 8000644:	08006e0c 	.word	0x08006e0c
 8000648:	20000444 	.word	0x20000444
 800064c:	08006e1c 	.word	0x08006e1c
 8000650:	20000434 	.word	0x20000434
 8000654:	08006e38 	.word	0x08006e38
 8000658:	20000438 	.word	0x20000438
 800065c:	08006e54 	.word	0x08006e54
 8000660:	2000043c 	.word	0x2000043c
 8000664:	08006e70 	.word	0x08006e70
 8000668:	20000440 	.word	0x20000440

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b090      	sub	sp, #64	; 0x40
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	2228      	movs	r2, #40	; 0x28
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f006 facc 	bl	8006c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 f985 	bl	80029c4 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006c0:	f000 f9f4 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fbf2 	bl	8002ec8 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006ea:	f000 f9df 	bl	8000aac <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3740      	adds	r7, #64	; 0x40
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f001 f945 	bl	80019c4 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f9b4 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000300 	.word	0x20000300
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_SPI1_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MX_SPI1_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000788:	2208      	movs	r2, #8
 800078a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a6:	f002 fd57 	bl	8003258 <HAL_SPI_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 f97c 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000354 	.word	0x20000354
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_USART1_UART_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_USART1_UART_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_USART1_UART_Init+0x64>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_USART1_UART_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_USART1_UART_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART1_UART_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_USART1_UART_Init+0x64>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART1_UART_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART1_UART_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_USART1_UART_Init+0x64>)
 80007f8:	f002 fffc 	bl	80037f4 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f953 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 8000806:	2219      	movs	r2, #25
 8000808:	4908      	ldr	r1, [pc, #32]	; (800082c <MX_USART1_UART_Init+0x6c>)
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_USART1_UART_Init+0x64>)
 800080c:	f003 f8d1 	bl	80039b2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_USART1_UART_Init+0x70>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART1_UART_Init+0x70>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f022 0204 	bic.w	r2, r2, #4
 800081e:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200003ac 	.word	0x200003ac
 8000828:	40013800 	.word	0x40013800
 800082c:	2000044c 	.word	0x2000044c
 8000830:	200003f0 	.word	0x200003f0

08000834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_DMA_Init+0x38>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <MX_DMA_Init+0x38>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_DMA_Init+0x38>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2105      	movs	r1, #5
 8000856:	200f      	movs	r0, #15
 8000858:	f000 fc2d 	bl	80010b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800085c:	200f      	movs	r0, #15
 800085e:	f000 fc46 	bl	80010ee <HAL_NVIC_EnableIRQ>

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_GPIO_Init+0xd0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a2d      	ldr	r2, [pc, #180]	; (8000940 <MX_GPIO_Init+0xd0>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_GPIO_Init+0xd0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0310 	and.w	r3, r3, #16
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_GPIO_Init+0xd0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a27      	ldr	r2, [pc, #156]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008a2:	f043 0320 	orr.w	r3, r3, #32
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a21      	ldr	r2, [pc, #132]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ea:	4816      	ldr	r0, [pc, #88]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008ec:	f001 f830 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2302      	movs	r3, #2
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_GPIO_Init+0xd4>)
 800090a:	f000 fe9d 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_GPIO_Init+0xd8>)
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <MX_GPIO_Init+0xdc>)
 8000924:	f000 fe90 	bl	8001648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2105      	movs	r1, #5
 800092c:	2028      	movs	r0, #40	; 0x28
 800092e:	f000 fbc2 	bl	80010b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000932:	2028      	movs	r0, #40	; 0x28
 8000934:	f000 fbdb 	bl	80010ee <HAL_NVIC_EnableIRQ>

}
 8000938:	bf00      	nop
 800093a:	3720      	adds	r7, #32
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	40011000 	.word	0x40011000
 8000948:	10210000 	.word	0x10210000
 800094c:	40010c00 	.word	0x40010c00

08000950 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_UARTEx_RxEventCallback+0x54>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d119      	bne.n	800099a <HAL_UARTEx_RxEventCallback+0x4a>
    	if(StoreUSARTData(Rx_data, size)){
 8000966:	887b      	ldrh	r3, [r7, #2]
 8000968:	4619      	mov	r1, r3
 800096a:	480f      	ldr	r0, [pc, #60]	; (80009a8 <HAL_UARTEx_RxEventCallback+0x58>)
 800096c:	f7ff fcb4 	bl	80002d8 <StoreUSARTData>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d004      	beq.n	8000980 <HAL_UARTEx_RxEventCallback+0x30>
        	osSemaphoreRelease(binarySemaphoreUARTHandle);
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_UARTEx_RxEventCallback+0x5c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f003 fe98 	bl	80046b0 <osSemaphoreRelease>
    	}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 8000980:	2219      	movs	r2, #25
 8000982:	4909      	ldr	r1, [pc, #36]	; (80009a8 <HAL_UARTEx_RxEventCallback+0x58>)
 8000984:	480a      	ldr	r0, [pc, #40]	; (80009b0 <HAL_UARTEx_RxEventCallback+0x60>)
 8000986:	f003 f814 	bl	80039b2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_UARTEx_RxEventCallback+0x64>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 0204 	bic.w	r2, r2, #4
 8000998:	601a      	str	r2, [r3, #0]
    }
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40013800 	.word	0x40013800
 80009a8:	2000044c 	.word	0x2000044c
 80009ac:	20000448 	.word	0x20000448
 80009b0:	200003ac 	.word	0x200003ac
 80009b4:	200003f0 	.word	0x200003f0

080009b8 <measurementFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_measurementFunction */
void measurementFunction(void const * argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	LIS3MDL_data.scale = LIS3MDL_SCALE_12_GAUSS;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <measurementFunction+0x20>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	761a      	strb	r2, [r3, #24]

	lis3mdl_Init(&LIS3MDL_data, &hi2c1);
 80009c6:	4905      	ldr	r1, [pc, #20]	; (80009dc <measurementFunction+0x24>)
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <measurementFunction+0x20>)
 80009ca:	f7ff fbc1 	bl	8000150 <lis3mdl_Init>
  /* Infinite loop */
	while(1){
		osDelay(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f003 fdd9 	bl	8004586 <osDelay>
 80009d4:	e7fb      	b.n	80009ce <measurementFunction+0x16>
 80009d6:	bf00      	nop
 80009d8:	20000468 	.word	0x20000468
 80009dc:	20000300 	.word	0x20000300

080009e0 <recordingFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordingFunction */
void recordingFunction(void const * argument)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN recordingFunction */
  /* Infinite loop */
	while(1){
		osDelay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f003 fdcc 	bl	8004586 <osDelay>
 80009ee:	e7fb      	b.n	80009e8 <recordingFunction+0x8>

080009f0 <receptionFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receptionFunction */
void receptionFunction(void const * argument)
{
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	b095      	sub	sp, #84	; 0x54
 80009f4:	af10      	add	r7, sp, #64	; 0x40
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN receptionFunction */
  /* Infinite loop */
	while(1){
		osSemaphoreWait(binarySemaphoreUARTHandle, osWaitForever);
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <receptionFunction+0x7c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fe07 	bl	8004614 <osSemaphoreWait>
		uint16_t measureAsk = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	81fb      	strh	r3, [r7, #14]
		if(DecodeReceivedData(&measureAsk)){
 8000a0a:	f107 030e 	add.w	r3, r7, #14
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fcc8 	bl	80003a4 <DecodeReceivedData>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0ee      	beq.n	80009f8 <receptionFunction+0x8>
			PrintString(huart1, "Hola mundo\r\n", sizeof("Hola mundo\r\n"));
 8000a1a:	4e15      	ldr	r6, [pc, #84]	; (8000a70 <receptionFunction+0x80>)
 8000a1c:	230d      	movs	r3, #13
 8000a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <receptionFunction+0x84>)
 8000a22:	930d      	str	r3, [sp, #52]	; 0x34
 8000a24:	466d      	mov	r5, sp
 8000a26:	f106 0410 	add.w	r4, r6, #16
 8000a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	602b      	str	r3, [r5, #0]
 8000a3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a3e:	f7ff fd25 	bl	800048c <PrintString>
			PrintIntFormat(huart1, measureAsk);
 8000a42:	89fb      	ldrh	r3, [r7, #14]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4e0a      	ldr	r6, [pc, #40]	; (8000a70 <receptionFunction+0x80>)
 8000a48:	930d      	str	r3, [sp, #52]	; 0x34
 8000a4a:	466d      	mov	r5, sp
 8000a4c:	f106 0410 	add.w	r4, r6, #16
 8000a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	602b      	str	r3, [r5, #0]
 8000a60:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a64:	f7ff fd28 	bl	80004b8 <PrintIntFormat>
	while(1){
 8000a68:	e7c6      	b.n	80009f8 <receptionFunction+0x8>
 8000a6a:	bf00      	nop
 8000a6c:	20000448 	.word	0x20000448
 8000a70:	200003ac 	.word	0x200003ac
 8000a74:	08006e8c 	.word	0x08006e8c

08000a78 <sendingFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendingFunction */
void sendingFunction(void const * argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendingFunction */
  /* Infinite loop */
	while(1){
		osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f003 fd80 	bl	8004586 <osDelay>
 8000a86:	e7fb      	b.n	8000a80 <sendingFunction+0x8>

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 fa3b 	bl	8000f14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40012c00 	.word	0x40012c00

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_MspInit+0x68>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_MspInit+0x68>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_MspInit+0x68>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_MspInit+0x68>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <HAL_MspInit+0x68>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x68>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	210f      	movs	r1, #15
 8000af2:	f06f 0001 	mvn.w	r0, #1
 8000af6:	f000 fade 	bl	80010b6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_MspInit+0x6c>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_MspInit+0x6c>)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010000 	.word	0x40010000

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x70>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d123      	bne.n	8000b90 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b60:	23c0      	movs	r3, #192	; 0xc0
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <HAL_I2C_MspInit+0x78>)
 8000b74:	f000 fd68 	bl	8001648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	61d3      	str	r3, [r2, #28]
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d12f      	bne.n	8000c24 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000bf4:	23b0      	movs	r3, #176	; 0xb0
 8000bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_SPI_MspInit+0x90>)
 8000c08:	f000 fd1e 	bl	8001648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c0c:	2340      	movs	r3, #64	; 0x40
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_SPI_MspInit+0x90>)
 8000c20:	f000 fd12 	bl	8001648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <HAL_UART_MspInit+0xe8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d15f      	bne.n	8000d18 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a31      	ldr	r2, [pc, #196]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a2b      	ldr	r2, [pc, #172]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <HAL_UART_MspInit+0xf0>)
 8000c9e:	f000 fcd3 	bl	8001648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481c      	ldr	r0, [pc, #112]	; (8000d28 <HAL_UART_MspInit+0xf0>)
 8000cb8:	f000 fcc6 	bl	8001648 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <HAL_UART_MspInit+0xf8>)
 8000cc0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000cee:	f000 fa0d 	bl	800110c <HAL_DMA_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000cf8:	f7ff fed8 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2105      	movs	r1, #5
 8000d0c:	2025      	movs	r0, #37	; 0x25
 8000d0e:	f000 f9d2 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d12:	2025      	movs	r0, #37	; 0x25
 8000d14:	f000 f9eb 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40013800 	.word	0x40013800
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	200003f0 	.word	0x200003f0
 8000d30:	40020058 	.word	0x40020058

08000d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	; 0x30
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d4a:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <HAL_InitTick+0xd0>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <HAL_InitTick+0xd0>)
 8000d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d54:	6193      	str	r3, [r2, #24]
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <HAL_InitTick+0xd0>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d62:	f107 020c 	add.w	r2, r7, #12
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fa25 	bl	80031bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d72:	f002 fa0f 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 8000d76:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7a:	4a23      	ldr	r2, [pc, #140]	; (8000e08 <HAL_InitTick+0xd4>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	0c9b      	lsrs	r3, r3, #18
 8000d82:	3b01      	subs	r3, #1
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_InitTick+0xd8>)
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <HAL_InitTick+0xdc>)
 8000d8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <HAL_InitTick+0xd8>)
 8000d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d92:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d94:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_InitTick+0xd8>)
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_InitTick+0xd8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_InitTick+0xd8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_InitTick+0xd8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000dac:	4817      	ldr	r0, [pc, #92]	; (8000e0c <HAL_InitTick+0xd8>)
 8000dae:	f002 fad7 	bl	8003360 <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000db8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d11b      	bne.n	8000df8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000dc0:	4812      	ldr	r0, [pc, #72]	; (8000e0c <HAL_InitTick+0xd8>)
 8000dc2:	f002 fb25 	bl	8003410 <HAL_TIM_Base_Start_IT>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d111      	bne.n	8000df8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dd4:	2019      	movs	r0, #25
 8000dd6:	f000 f98a 	bl	80010ee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d808      	bhi.n	8000df2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2019      	movs	r0, #25
 8000de6:	f000 f966 	bl	80010b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_InitTick+0xe0>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e002      	b.n	8000df8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3730      	adds	r7, #48	; 0x30
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000
 8000e08:	431bde83 	.word	0x431bde83
 8000e0c:	20000484 	.word	0x20000484
 8000e10:	40012c00 	.word	0x40012c00
 8000e14:	20000004 	.word	0x20000004

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
	...

08000e44 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DMA1_Channel5_IRQHandler+0x10>)
 8000e4a:	f000 fac9 	bl	80013e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200003f0 	.word	0x200003f0

08000e58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <TIM1_UP_IRQHandler+0x10>)
 8000e5e:	f002 fb29 	bl	80034b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000484 	.word	0x20000484

08000e6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <USART1_IRQHandler+0x10>)
 8000e72:	f002 fded 	bl	8003a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200003ac 	.word	0x200003ac

08000e80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000e84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e88:	f000 fd7a 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9e:	490d      	ldr	r1, [pc, #52]	; (8000ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb4:	4c0a      	ldr	r4, [pc, #40]	; (8000ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ec2:	f7ff ffe5 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f005 fe5b 	bl	8006b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eca:	f7ff fb3d 	bl	8000548 <main>
  bx lr
 8000ece:	4770      	bx	lr
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ed8:	08006ffc 	.word	0x08006ffc
  ldr r2, =_sbss
 8000edc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ee0:	2000121c 	.word	0x2000121c

08000ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC1_2_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x28>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x28>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f8d1 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff ff18 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fdd8 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40022000 	.word	0x40022000

08000f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x1c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x20>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <HAL_IncTick+0x20>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200004cc 	.word	0x200004cc

08000f38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <HAL_GetTick+0x10>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	200004cc 	.word	0x200004cc

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4906      	ldr	r1, [pc, #24]	; (8000fe4 <__NVIC_EnableIRQ+0x34>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff4f 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff64 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ffb2 	bl	800103c <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff81 	bl	8000fe8 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff57 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e043      	b.n	80011aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_DMA_Init+0xa8>)
 800112a:	4413      	add	r3, r2
 800112c:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <HAL_DMA_Init+0xac>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <HAL_DMA_Init+0xb0>)
 800113e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001156:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800115a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	bffdfff8 	.word	0xbffdfff8
 80011b8:	cccccccd 	.word	0xcccccccd
 80011bc:	40020000 	.word	0x40020000

080011c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_DMA_Start_IT+0x20>
 80011dc:	2302      	movs	r3, #2
 80011de:	e04a      	b.n	8001276 <HAL_DMA_Start_IT+0xb6>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d13a      	bne.n	8001268 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2202      	movs	r2, #2
 80011f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f9e8 	bl	80015ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 020e 	orr.w	r2, r2, #14
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e00f      	b.n	8001256 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0204 	bic.w	r2, r2, #4
 8001244:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 020a 	orr.w	r2, r2, #10
 8001254:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0201 	orr.w	r2, r2, #1
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e005      	b.n	8001274 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001270:	2302      	movs	r3, #2
 8001272:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001274:	7dfb      	ldrb	r3, [r7, #23]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800127e:	b480      	push	{r7}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001290:	2b02      	cmp	r3, #2
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2204      	movs	r2, #4
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e020      	b.n	80012e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 020e 	bic.w	r2, r2, #14
 80012b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001306:	2b02      	cmp	r3, #2
 8001308:	d005      	beq.n	8001316 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2204      	movs	r2, #4
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e051      	b.n	80013ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 020e 	bic.w	r2, r2, #14
 8001324:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <HAL_DMA_Abort_IT+0xd0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d029      	beq.n	8001394 <HAL_DMA_Abort_IT+0xa0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <HAL_DMA_Abort_IT+0xd4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d022      	beq.n	8001390 <HAL_DMA_Abort_IT+0x9c>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <HAL_DMA_Abort_IT+0xd8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d01a      	beq.n	800138a <HAL_DMA_Abort_IT+0x96>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_DMA_Abort_IT+0xdc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d012      	beq.n	8001384 <HAL_DMA_Abort_IT+0x90>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_DMA_Abort_IT+0xe0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d00a      	beq.n	800137e <HAL_DMA_Abort_IT+0x8a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <HAL_DMA_Abort_IT+0xe4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d102      	bne.n	8001378 <HAL_DMA_Abort_IT+0x84>
 8001372:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001376:	e00e      	b.n	8001396 <HAL_DMA_Abort_IT+0xa2>
 8001378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800137c:	e00b      	b.n	8001396 <HAL_DMA_Abort_IT+0xa2>
 800137e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001382:	e008      	b.n	8001396 <HAL_DMA_Abort_IT+0xa2>
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	e005      	b.n	8001396 <HAL_DMA_Abort_IT+0xa2>
 800138a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138e:	e002      	b.n	8001396 <HAL_DMA_Abort_IT+0xa2>
 8001390:	2310      	movs	r3, #16
 8001392:	e000      	b.n	8001396 <HAL_DMA_Abort_IT+0xa2>
 8001394:	2301      	movs	r3, #1
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <HAL_DMA_Abort_IT+0xe8>)
 8001398:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
    } 
  }
  return status;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40020008 	.word	0x40020008
 80013c8:	4002001c 	.word	0x4002001c
 80013cc:	40020030 	.word	0x40020030
 80013d0:	40020044 	.word	0x40020044
 80013d4:	40020058 	.word	0x40020058
 80013d8:	4002006c 	.word	0x4002006c
 80013dc:	40020000 	.word	0x40020000

080013e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2204      	movs	r2, #4
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d04f      	beq.n	80014a8 <HAL_DMA_IRQHandler+0xc8>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d04a      	beq.n	80014a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	2b00      	cmp	r3, #0
 800141e:	d107      	bne.n	8001430 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a66      	ldr	r2, [pc, #408]	; (80015d0 <HAL_DMA_IRQHandler+0x1f0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d029      	beq.n	800148e <HAL_DMA_IRQHandler+0xae>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a65      	ldr	r2, [pc, #404]	; (80015d4 <HAL_DMA_IRQHandler+0x1f4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d022      	beq.n	800148a <HAL_DMA_IRQHandler+0xaa>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a63      	ldr	r2, [pc, #396]	; (80015d8 <HAL_DMA_IRQHandler+0x1f8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d01a      	beq.n	8001484 <HAL_DMA_IRQHandler+0xa4>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a62      	ldr	r2, [pc, #392]	; (80015dc <HAL_DMA_IRQHandler+0x1fc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d012      	beq.n	800147e <HAL_DMA_IRQHandler+0x9e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a60      	ldr	r2, [pc, #384]	; (80015e0 <HAL_DMA_IRQHandler+0x200>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00a      	beq.n	8001478 <HAL_DMA_IRQHandler+0x98>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a5f      	ldr	r2, [pc, #380]	; (80015e4 <HAL_DMA_IRQHandler+0x204>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d102      	bne.n	8001472 <HAL_DMA_IRQHandler+0x92>
 800146c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001470:	e00e      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 8001472:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001476:	e00b      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 8001478:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800147c:	e008      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 800147e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001482:	e005      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 8001484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001488:	e002      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	e000      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 800148e:	2304      	movs	r3, #4
 8001490:	4a55      	ldr	r2, [pc, #340]	; (80015e8 <HAL_DMA_IRQHandler+0x208>)
 8001492:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8094 	beq.w	80015c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014a6:	e08e      	b.n	80015c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	2202      	movs	r2, #2
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d056      	beq.n	8001566 <HAL_DMA_IRQHandler+0x186>
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d051      	beq.n	8001566 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10b      	bne.n	80014e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020a 	bic.w	r2, r2, #10
 80014de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a38      	ldr	r2, [pc, #224]	; (80015d0 <HAL_DMA_IRQHandler+0x1f0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d029      	beq.n	8001546 <HAL_DMA_IRQHandler+0x166>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a37      	ldr	r2, [pc, #220]	; (80015d4 <HAL_DMA_IRQHandler+0x1f4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d022      	beq.n	8001542 <HAL_DMA_IRQHandler+0x162>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a35      	ldr	r2, [pc, #212]	; (80015d8 <HAL_DMA_IRQHandler+0x1f8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d01a      	beq.n	800153c <HAL_DMA_IRQHandler+0x15c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a34      	ldr	r2, [pc, #208]	; (80015dc <HAL_DMA_IRQHandler+0x1fc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d012      	beq.n	8001536 <HAL_DMA_IRQHandler+0x156>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_DMA_IRQHandler+0x200>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00a      	beq.n	8001530 <HAL_DMA_IRQHandler+0x150>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a31      	ldr	r2, [pc, #196]	; (80015e4 <HAL_DMA_IRQHandler+0x204>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d102      	bne.n	800152a <HAL_DMA_IRQHandler+0x14a>
 8001524:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001528:	e00e      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 800152a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800152e:	e00b      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 8001530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001534:	e008      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 8001536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153a:	e005      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 800153c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001540:	e002      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 8001542:	2320      	movs	r3, #32
 8001544:	e000      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 8001546:	2302      	movs	r3, #2
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_DMA_IRQHandler+0x208>)
 800154a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	d034      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001564:	e02f      	b.n	80015c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	2208      	movs	r2, #8
 800156c:	409a      	lsls	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d028      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x1e8>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d023      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 020e 	bic.w	r2, r2, #14
 800158e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f202 	lsl.w	r2, r1, r2
 800159e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4798      	blx	r3
    }
  }
  return;
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
}
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40020008 	.word	0x40020008
 80015d4:	4002001c 	.word	0x4002001c
 80015d8:	40020030 	.word	0x40020030
 80015dc:	40020044 	.word	0x40020044
 80015e0:	40020058 	.word	0x40020058
 80015e4:	4002006c 	.word	0x4002006c
 80015e8:	40020000 	.word	0x40020000

080015ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d108      	bne.n	800162c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800162a:	e007      	b.n	800163c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b08b      	sub	sp, #44	; 0x2c
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	e169      	b.n	8001930 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800165c:	2201      	movs	r2, #1
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	429a      	cmp	r2, r3
 8001676:	f040 8158 	bne.w	800192a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a9a      	ldr	r2, [pc, #616]	; (80018e8 <HAL_GPIO_Init+0x2a0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d05e      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 8001684:	4a98      	ldr	r2, [pc, #608]	; (80018e8 <HAL_GPIO_Init+0x2a0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d875      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 800168a:	4a98      	ldr	r2, [pc, #608]	; (80018ec <HAL_GPIO_Init+0x2a4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d058      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 8001690:	4a96      	ldr	r2, [pc, #600]	; (80018ec <HAL_GPIO_Init+0x2a4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d86f      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 8001696:	4a96      	ldr	r2, [pc, #600]	; (80018f0 <HAL_GPIO_Init+0x2a8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d052      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 800169c:	4a94      	ldr	r2, [pc, #592]	; (80018f0 <HAL_GPIO_Init+0x2a8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d869      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016a2:	4a94      	ldr	r2, [pc, #592]	; (80018f4 <HAL_GPIO_Init+0x2ac>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d04c      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 80016a8:	4a92      	ldr	r2, [pc, #584]	; (80018f4 <HAL_GPIO_Init+0x2ac>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d863      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016ae:	4a92      	ldr	r2, [pc, #584]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d046      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 80016b4:	4a90      	ldr	r2, [pc, #576]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d85d      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016ba:	2b12      	cmp	r3, #18
 80016bc:	d82a      	bhi.n	8001714 <HAL_GPIO_Init+0xcc>
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d859      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <HAL_GPIO_Init+0x80>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	08001743 	.word	0x08001743
 80016cc:	0800171d 	.word	0x0800171d
 80016d0:	0800172f 	.word	0x0800172f
 80016d4:	08001771 	.word	0x08001771
 80016d8:	08001777 	.word	0x08001777
 80016dc:	08001777 	.word	0x08001777
 80016e0:	08001777 	.word	0x08001777
 80016e4:	08001777 	.word	0x08001777
 80016e8:	08001777 	.word	0x08001777
 80016ec:	08001777 	.word	0x08001777
 80016f0:	08001777 	.word	0x08001777
 80016f4:	08001777 	.word	0x08001777
 80016f8:	08001777 	.word	0x08001777
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001777 	.word	0x08001777
 8001704:	08001777 	.word	0x08001777
 8001708:	08001777 	.word	0x08001777
 800170c:	08001725 	.word	0x08001725
 8001710:	08001739 	.word	0x08001739
 8001714:	4a79      	ldr	r2, [pc, #484]	; (80018fc <HAL_GPIO_Init+0x2b4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800171a:	e02c      	b.n	8001776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	623b      	str	r3, [r7, #32]
          break;
 8001722:	e029      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	3304      	adds	r3, #4
 800172a:	623b      	str	r3, [r7, #32]
          break;
 800172c:	e024      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	3308      	adds	r3, #8
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e01f      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	330c      	adds	r3, #12
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	e01a      	b.n	8001778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800174a:	2304      	movs	r3, #4
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e013      	b.n	8001778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001758:	2308      	movs	r3, #8
 800175a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	611a      	str	r2, [r3, #16]
          break;
 8001762:	e009      	b.n	8001778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	615a      	str	r2, [r3, #20]
          break;
 800176e:	e003      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x130>
          break;
 8001776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d801      	bhi.n	8001782 <HAL_GPIO_Init+0x13a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	e001      	b.n	8001786 <HAL_GPIO_Init+0x13e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3304      	adds	r3, #4
 8001786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2bff      	cmp	r3, #255	; 0xff
 800178c:	d802      	bhi.n	8001794 <HAL_GPIO_Init+0x14c>
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x152>
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	3b08      	subs	r3, #8
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	210f      	movs	r1, #15
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	6a39      	ldr	r1, [r7, #32]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80b1 	beq.w	800192a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017c8:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <HAL_GPIO_Init+0x2b8>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a4c      	ldr	r2, [pc, #304]	; (8001900 <HAL_GPIO_Init+0x2b8>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <HAL_GPIO_Init+0x2b8>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e0:	4a48      	ldr	r2, [pc, #288]	; (8001904 <HAL_GPIO_Init+0x2bc>)
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a40      	ldr	r2, [pc, #256]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d013      	beq.n	8001834 <HAL_GPIO_Init+0x1ec>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3f      	ldr	r2, [pc, #252]	; (800190c <HAL_GPIO_Init+0x2c4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00d      	beq.n	8001830 <HAL_GPIO_Init+0x1e8>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3e      	ldr	r2, [pc, #248]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d007      	beq.n	800182c <HAL_GPIO_Init+0x1e4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a3d      	ldr	r2, [pc, #244]	; (8001914 <HAL_GPIO_Init+0x2cc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_GPIO_Init+0x1e0>
 8001824:	2303      	movs	r3, #3
 8001826:	e006      	b.n	8001836 <HAL_GPIO_Init+0x1ee>
 8001828:	2304      	movs	r3, #4
 800182a:	e004      	b.n	8001836 <HAL_GPIO_Init+0x1ee>
 800182c:	2302      	movs	r3, #2
 800182e:	e002      	b.n	8001836 <HAL_GPIO_Init+0x1ee>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <HAL_GPIO_Init+0x1ee>
 8001834:	2300      	movs	r3, #0
 8001836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001838:	f002 0203 	and.w	r2, r2, #3
 800183c:	0092      	lsls	r2, r2, #2
 800183e:	4093      	lsls	r3, r2
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001846:	492f      	ldr	r1, [pc, #188]	; (8001904 <HAL_GPIO_Init+0x2bc>)
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	492c      	ldr	r1, [pc, #176]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	4928      	ldr	r1, [pc, #160]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 8001878:	4013      	ands	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4922      	ldr	r1, [pc, #136]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	491e      	ldr	r1, [pc, #120]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4918      	ldr	r1, [pc, #96]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4914      	ldr	r1, [pc, #80]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d021      	beq.n	800191c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60cb      	str	r3, [r1, #12]
 80018e4:	e021      	b.n	800192a <HAL_GPIO_Init+0x2e2>
 80018e6:	bf00      	nop
 80018e8:	10320000 	.word	0x10320000
 80018ec:	10310000 	.word	0x10310000
 80018f0:	10220000 	.word	0x10220000
 80018f4:	10210000 	.word	0x10210000
 80018f8:	10120000 	.word	0x10120000
 80018fc:	10110000 	.word	0x10110000
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000
 8001908:	40010800 	.word	0x40010800
 800190c:	40010c00 	.word	0x40010c00
 8001910:	40011000 	.word	0x40011000
 8001914:	40011400 	.word	0x40011400
 8001918:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_GPIO_Init+0x304>)
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	43db      	mvns	r3, r3
 8001924:	4909      	ldr	r1, [pc, #36]	; (800194c <HAL_GPIO_Init+0x304>)
 8001926:	4013      	ands	r3, r2
 8001928:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	3301      	adds	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	f47f ae8e 	bne.w	800165c <HAL_GPIO_Init+0x14>
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	372c      	adds	r7, #44	; 0x2c
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	611a      	str	r2, [r3, #16]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f806 	bl	80019b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e12b      	b.n	8001c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff f89c 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a28:	f001 fba0 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a81      	ldr	r2, [pc, #516]	; (8001c38 <HAL_I2C_Init+0x274>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d807      	bhi.n	8001a48 <HAL_I2C_Init+0x84>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a80      	ldr	r2, [pc, #512]	; (8001c3c <HAL_I2C_Init+0x278>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e006      	b.n	8001a56 <HAL_I2C_Init+0x92>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a7d      	ldr	r2, [pc, #500]	; (8001c40 <HAL_I2C_Init+0x27c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf94      	ite	ls
 8001a50:	2301      	movls	r3, #1
 8001a52:	2300      	movhi	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0e7      	b.n	8001c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a78      	ldr	r2, [pc, #480]	; (8001c44 <HAL_I2C_Init+0x280>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0c9b      	lsrs	r3, r3, #18
 8001a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a6a      	ldr	r2, [pc, #424]	; (8001c38 <HAL_I2C_Init+0x274>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d802      	bhi.n	8001a98 <HAL_I2C_Init+0xd4>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3301      	adds	r3, #1
 8001a96:	e009      	b.n	8001aac <HAL_I2C_Init+0xe8>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	4a69      	ldr	r2, [pc, #420]	; (8001c48 <HAL_I2C_Init+0x284>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	3301      	adds	r3, #1
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001abe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	495c      	ldr	r1, [pc, #368]	; (8001c38 <HAL_I2C_Init+0x274>)
 8001ac8:	428b      	cmp	r3, r1
 8001aca:	d819      	bhi.n	8001b00 <HAL_I2C_Init+0x13c>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1e59      	subs	r1, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ada:	1c59      	adds	r1, r3, #1
 8001adc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_I2C_Init+0x138>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e59      	subs	r1, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af4:	3301      	adds	r3, #1
 8001af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afa:	e051      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e04f      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d111      	bne.n	8001b2c <HAL_I2C_Init+0x168>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1e58      	subs	r0, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	440b      	add	r3, r1
 8001b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e012      	b.n	8001b52 <HAL_I2C_Init+0x18e>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1e58      	subs	r0, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	0099      	lsls	r1, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Init+0x196>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e022      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10e      	bne.n	8001b80 <HAL_I2C_Init+0x1bc>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e58      	subs	r0, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	440b      	add	r3, r1
 8001b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7e:	e00f      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1e58      	subs	r0, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	0099      	lsls	r1, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	6809      	ldr	r1, [r1, #0]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6911      	ldr	r1, [r2, #16]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68d2      	ldr	r2, [r2, #12]
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	000186a0 	.word	0x000186a0
 8001c3c:	001e847f 	.word	0x001e847f
 8001c40:	003d08ff 	.word	0x003d08ff
 8001c44:	431bde83 	.word	0x431bde83
 8001c48:	10624dd3 	.word	0x10624dd3

08001c4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	4608      	mov	r0, r1
 8001c56:	4611      	mov	r1, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	817b      	strh	r3, [r7, #10]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	813b      	strh	r3, [r7, #8]
 8001c62:	4613      	mov	r3, r2
 8001c64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c66:	f7ff f967 	bl	8000f38 <HAL_GetTick>
 8001c6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	f040 80d9 	bne.w	8001e2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2319      	movs	r3, #25
 8001c80:	2201      	movs	r2, #1
 8001c82:	496d      	ldr	r1, [pc, #436]	; (8001e38 <HAL_I2C_Mem_Write+0x1ec>)
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fcc1 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c90:	2302      	movs	r3, #2
 8001c92:	e0cc      	b.n	8001e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_I2C_Mem_Write+0x56>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e0c5      	b.n	8001e2e <HAL_I2C_Mem_Write+0x1e2>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d007      	beq.n	8001cc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2221      	movs	r2, #33	; 0x21
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2240      	movs	r2, #64	; 0x40
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a3a      	ldr	r2, [r7, #32]
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4a4d      	ldr	r2, [pc, #308]	; (8001e3c <HAL_I2C_Mem_Write+0x1f0>)
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d0a:	88f8      	ldrh	r0, [r7, #6]
 8001d0c:	893a      	ldrh	r2, [r7, #8]
 8001d0e:	8979      	ldrh	r1, [r7, #10]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	4603      	mov	r3, r0
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 faf8 	bl	8002310 <I2C_RequestMemoryWrite>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d052      	beq.n	8001dcc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e081      	b.n	8001e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fd42 	bl	80027b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00d      	beq.n	8001d56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d107      	bne.n	8001d52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e06b      	b.n	8001e2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	781a      	ldrb	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d11b      	bne.n	8001dcc <HAL_I2C_Mem_Write+0x180>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d017      	beq.n	8001dcc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1aa      	bne.n	8001d2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fd2e 	bl	800283a <I2C_WaitOnBTFFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00d      	beq.n	8001e00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d107      	bne.n	8001dfc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e016      	b.n	8001e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	00100002 	.word	0x00100002
 8001e3c:	ffff0000 	.word	0xffff0000

08001e40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	817b      	strh	r3, [r7, #10]
 8001e52:	460b      	mov	r3, r1
 8001e54:	813b      	strh	r3, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e5e:	f7ff f86b 	bl	8000f38 <HAL_GetTick>
 8001e62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	f040 8244 	bne.w	80022fa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2319      	movs	r3, #25
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4982      	ldr	r1, [pc, #520]	; (8002084 <HAL_I2C_Mem_Read+0x244>)
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fbc5 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e237      	b.n	80022fc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_Mem_Read+0x5a>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e230      	b.n	80022fc <HAL_I2C_Mem_Read+0x4bc>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d007      	beq.n	8001ec0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2222      	movs	r2, #34	; 0x22
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a62      	ldr	r2, [pc, #392]	; (8002088 <HAL_I2C_Mem_Read+0x248>)
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f02:	88f8      	ldrh	r0, [r7, #6]
 8001f04:	893a      	ldrh	r2, [r7, #8]
 8001f06:	8979      	ldrh	r1, [r7, #10]
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4603      	mov	r3, r0
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fa92 	bl	800243c <I2C_RequestMemoryRead>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1ec      	b.n	80022fc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d113      	bne.n	8001f52 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e1c0      	b.n	80022d4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d11e      	bne.n	8001f98 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6a:	b672      	cpsid	i
}
 8001f6c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f94:	b662      	cpsie	i
}
 8001f96:	e035      	b.n	8002004 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d11e      	bne.n	8001fde <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fda:	b662      	cpsie	i
}
 8001fdc:	e012      	b.n	8002004 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002004:	e166      	b.n	80022d4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	2b03      	cmp	r3, #3
 800200c:	f200 811f 	bhi.w	800224e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	2b01      	cmp	r3, #1
 8002016:	d123      	bne.n	8002060 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fc4d 	bl	80028bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e167      	b.n	80022fc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800205e:	e139      	b.n	80022d4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	2b02      	cmp	r3, #2
 8002066:	d152      	bne.n	800210e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206e:	2200      	movs	r2, #0
 8002070:	4906      	ldr	r1, [pc, #24]	; (800208c <HAL_I2C_Mem_Read+0x24c>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 faca 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e13c      	b.n	80022fc <HAL_I2C_Mem_Read+0x4bc>
 8002082:	bf00      	nop
 8002084:	00100002 	.word	0x00100002
 8002088:	ffff0000 	.word	0xffff0000
 800208c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002090:	b672      	cpsid	i
}
 8002092:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020d6:	b662      	cpsie	i
}
 80020d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800210c:	e0e2      	b.n	80022d4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002114:	2200      	movs	r2, #0
 8002116:	497b      	ldr	r1, [pc, #492]	; (8002304 <HAL_I2C_Mem_Read+0x4c4>)
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fa77 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0e9      	b.n	80022fc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800216e:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_I2C_Mem_Read+0x4c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	4a65      	ldr	r2, [pc, #404]	; (800230c <HAL_I2C_Mem_Read+0x4cc>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a1a      	lsrs	r2, r3, #8
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00da      	lsls	r2, r3, #3
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	3b01      	subs	r3, #1
 800218c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d118      	bne.n	80021c6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f043 0220 	orr.w	r2, r3, #32
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80021b6:	b662      	cpsie	i
}
 80021b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e09a      	b.n	80022fc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d1d9      	bne.n	8002188 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002216:	b662      	cpsie	i
}
 8002218:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800224c:	e042      	b.n	80022d4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fb32 	bl	80028bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e04c      	b.n	80022fc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d118      	bne.n	80022d4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f47f ae94 	bne.w	8002006 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3728      	adds	r7, #40	; 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	00010004 	.word	0x00010004
 8002308:	20000000 	.word	0x20000000
 800230c:	14f8b589 	.word	0x14f8b589

08002310 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	817b      	strh	r3, [r7, #10]
 8002322:	460b      	mov	r3, r1
 8002324:	813b      	strh	r3, [r7, #8]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002338:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	2200      	movs	r2, #0
 8002342:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f960 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00d      	beq.n	800236e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002360:	d103      	bne.n	800236a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e05f      	b.n	800242e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800236e:	897b      	ldrh	r3, [r7, #10]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800237c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	6a3a      	ldr	r2, [r7, #32]
 8002382:	492d      	ldr	r1, [pc, #180]	; (8002438 <I2C_RequestMemoryWrite+0x128>)
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f998 	bl	80026ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e04c      	b.n	800242e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ac:	6a39      	ldr	r1, [r7, #32]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fa02 	bl	80027b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00d      	beq.n	80023d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d107      	bne.n	80023d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e02b      	b.n	800242e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023dc:	893b      	ldrh	r3, [r7, #8]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	611a      	str	r2, [r3, #16]
 80023e6:	e021      	b.n	800242c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023e8:	893b      	ldrh	r3, [r7, #8]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f8:	6a39      	ldr	r1, [r7, #32]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f9dc 	bl	80027b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00d      	beq.n	8002422 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	2b04      	cmp	r3, #4
 800240c:	d107      	bne.n	800241e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e005      	b.n	800242e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002422:	893b      	ldrh	r3, [r7, #8]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	00010002 	.word	0x00010002

0800243c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002464:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002474:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	2200      	movs	r2, #0
 800247e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f8c2 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00d      	beq.n	80024aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249c:	d103      	bne.n	80024a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0aa      	b.n	8002600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024aa:	897b      	ldrh	r3, [r7, #10]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	6a3a      	ldr	r2, [r7, #32]
 80024be:	4952      	ldr	r1, [pc, #328]	; (8002608 <I2C_RequestMemoryRead+0x1cc>)
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f8fa 	bl	80026ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e097      	b.n	8002600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	6a39      	ldr	r1, [r7, #32]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f964 	bl	80027b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d107      	bne.n	800250e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e076      	b.n	8002600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002518:	893b      	ldrh	r3, [r7, #8]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	611a      	str	r2, [r3, #16]
 8002522:	e021      	b.n	8002568 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002524:	893b      	ldrh	r3, [r7, #8]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	b29b      	uxth	r3, r3
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002534:	6a39      	ldr	r1, [r7, #32]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f93e 	bl	80027b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b04      	cmp	r3, #4
 8002548:	d107      	bne.n	800255a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002558:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e050      	b.n	8002600 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800255e:	893b      	ldrh	r3, [r7, #8]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256a:	6a39      	ldr	r1, [r7, #32]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f923 	bl	80027b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e035      	b.n	8002600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f82b 	bl	800260c <I2C_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ca:	d103      	bne.n	80025d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e013      	b.n	8002600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025d8:	897b      	ldrh	r3, [r7, #10]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	6a3a      	ldr	r2, [r7, #32]
 80025ec:	4906      	ldr	r1, [pc, #24]	; (8002608 <I2C_RequestMemoryRead+0x1cc>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f863 	bl	80026ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	00010002 	.word	0x00010002

0800260c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800261c:	e025      	b.n	800266a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d021      	beq.n	800266a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002626:	f7fe fc87 	bl	8000f38 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d302      	bcc.n	800263c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f043 0220 	orr.w	r2, r3, #32
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e023      	b.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10d      	bne.n	8002690 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4013      	ands	r3, r2
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf0c      	ite	eq
 8002686:	2301      	moveq	r3, #1
 8002688:	2300      	movne	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	e00c      	b.n	80026aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d0b6      	beq.n	800261e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026c8:	e051      	b.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d8:	d123      	bne.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f043 0204 	orr.w	r2, r3, #4
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e046      	b.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d021      	beq.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7fe fc05 	bl	8000f38 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d116      	bne.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f043 0220 	orr.w	r2, r3, #32
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e020      	b.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10c      	bne.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4013      	ands	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	e00b      	b.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	43da      	mvns	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d18d      	bne.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027c4:	e02d      	b.n	8002822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f8ce 	bl	8002968 <I2C_IsAcknowledgeFailed>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e02d      	b.n	8002832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d021      	beq.n	8002822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027de:	f7fe fbab 	bl	8000f38 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d302      	bcc.n	80027f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d116      	bne.n	8002822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f043 0220 	orr.w	r2, r3, #32
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e007      	b.n	8002832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b80      	cmp	r3, #128	; 0x80
 800282e:	d1ca      	bne.n	80027c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002846:	e02d      	b.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f88d 	bl	8002968 <I2C_IsAcknowledgeFailed>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e02d      	b.n	80028b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d021      	beq.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002860:	f7fe fb6a 	bl	8000f38 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d116      	bne.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e007      	b.n	80028b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d1ca      	bne.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028c8:	e042      	b.n	8002950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d119      	bne.n	800290c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0210 	mvn.w	r2, #16
 80028e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e029      	b.n	8002960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290c:	f7fe fb14 	bl	8000f38 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	429a      	cmp	r2, r3
 800291a:	d302      	bcc.n	8002922 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d116      	bne.n	8002950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f043 0220 	orr.w	r2, r3, #32
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e007      	b.n	8002960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d1b5      	bne.n	80028ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297e:	d11b      	bne.n	80029b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002988:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f043 0204 	orr.w	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e272      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8087 	beq.w	8002af2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e4:	4b92      	ldr	r3, [pc, #584]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d00c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029f0:	4b8f      	ldr	r3, [pc, #572]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d112      	bne.n	8002a22 <HAL_RCC_OscConfig+0x5e>
 80029fc:	4b8c      	ldr	r3, [pc, #560]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d10b      	bne.n	8002a22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0a:	4b89      	ldr	r3, [pc, #548]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d06c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x12c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d168      	bne.n	8002af0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e24c      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x76>
 8002a2c:	4b80      	ldr	r3, [pc, #512]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a7f      	ldr	r2, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	e02e      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x98>
 8002a42:	4b7b      	ldr	r3, [pc, #492]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a7a      	ldr	r2, [pc, #488]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b78      	ldr	r3, [pc, #480]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a77      	ldr	r2, [pc, #476]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01d      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0xbc>
 8002a66:	4b72      	ldr	r3, [pc, #456]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a71      	ldr	r2, [pc, #452]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b6f      	ldr	r3, [pc, #444]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a80:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6a      	ldr	r2, [pc, #424]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a67      	ldr	r2, [pc, #412]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fa4a 	bl	8000f38 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fa46 	bl	8000f38 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e200      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe4>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fa36 	bl	8000f38 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fa32 	bl	8000f38 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1ec      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x10c>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d063      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afe:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b0a:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d11c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x18c>
 8002b16:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x176>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1c0      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4939      	ldr	r1, [pc, #228]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	e03a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b58:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe f9eb 	bl	8000f38 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b66:	f7fe f9e7 	bl	8000f38 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1a1      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4927      	ldr	r1, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
 8002b98:	e015      	b.n	8002bc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f9ca 	bl	8000f38 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba8:	f7fe f9c6 	bl	8000f38 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e180      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d03a      	beq.n	8002c48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d019      	beq.n	8002c0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be0:	f7fe f9aa 	bl	8000f38 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be8:	f7fe f9a6 	bl	8000f38 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e160      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f000 fb08 	bl	800321c <RCC_Delay>
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe f990 	bl	8000f38 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1a:	e00f      	b.n	8002c3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7fe f98c 	bl	8000f38 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d908      	bls.n	8002c3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e146      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	42420000 	.word	0x42420000
 8002c38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e9      	bne.n	8002c1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80a6 	beq.w	8002da2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5a:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4a87      	ldr	r2, [pc, #540]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c70:	61d3      	str	r3, [r2, #28]
 8002c72:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	4b82      	ldr	r3, [pc, #520]	; (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d118      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8e:	4b7f      	ldr	r3, [pc, #508]	; (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a7e      	ldr	r2, [pc, #504]	; (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe f94d 	bl	8000f38 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca2:	f7fe f949 	bl	8000f38 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b64      	cmp	r3, #100	; 0x64
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e103      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	4b75      	ldr	r3, [pc, #468]	; (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x312>
 8002cc8:	4b6f      	ldr	r3, [pc, #444]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a6e      	ldr	r2, [pc, #440]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6213      	str	r3, [r2, #32]
 8002cd4:	e02d      	b.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x334>
 8002cde:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4a69      	ldr	r2, [pc, #420]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6213      	str	r3, [r2, #32]
 8002cea:	4b67      	ldr	r3, [pc, #412]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a66      	ldr	r2, [pc, #408]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f023 0304 	bic.w	r3, r3, #4
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	e01c      	b.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d10c      	bne.n	8002d1a <HAL_RCC_OscConfig+0x356>
 8002d00:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4a60      	ldr	r2, [pc, #384]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	6213      	str	r3, [r2, #32]
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a5d      	ldr	r2, [pc, #372]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e00b      	b.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4a5a      	ldr	r2, [pc, #360]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6213      	str	r3, [r2, #32]
 8002d26:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a57      	ldr	r2, [pc, #348]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d015      	beq.n	8002d66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe f8fd 	bl	8000f38 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7fe f8f9 	bl	8000f38 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e0b1      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ee      	beq.n	8002d42 <HAL_RCC_OscConfig+0x37e>
 8002d64:	e014      	b.n	8002d90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7fe f8e7 	bl	8000f38 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7fe f8e3 	bl	8000f38 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e09b      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d84:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ee      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d96:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8087 	beq.w	8002eba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d061      	beq.n	8002e7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d146      	bne.n	8002e4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc0:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe f8b7 	bl	8000f38 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe f8b3 	bl	8000f38 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e06d      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d108      	bne.n	8002e08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002df6:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4921      	ldr	r1, [pc, #132]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a19      	ldr	r1, [r3, #32]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	491b      	ldr	r1, [pc, #108]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe f887 	bl	8000f38 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe f883 	bl	8000f38 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e03d      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x46a>
 8002e4c:	e035      	b.n	8002eba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe f870 	bl	8000f38 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe f86c 	bl	8000f38 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e026      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x498>
 8002e7a:	e01e      	b.n	8002eba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e019      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_OscConfig+0x500>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0d0      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b67      	ldr	r3, [pc, #412]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	4965      	ldr	r1, [pc, #404]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d040      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d115      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e073      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06b      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa6:	4b39      	ldr	r3, [pc, #228]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4936      	ldr	r1, [pc, #216]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7fd ffbe 	bl	8000f38 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc0:	f7fd ffba 	bl	8000f38 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e053      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 020c 	and.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1eb      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d210      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 0207 	bic.w	r2, r3, #7
 8002ffe:	4922      	ldr	r1, [pc, #136]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003056:	f000 f821 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1cc>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1d0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fe5c 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40022000 	.word	0x40022000
 800308c:	40021000 	.word	0x40021000
 8003090:	08006eb4 	.word	0x08006eb4
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	b490      	push	{r4, r7}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030a2:	4b29      	ldr	r3, [pc, #164]	; (8003148 <HAL_RCC_GetSysClockFreq+0xac>)
 80030a4:	1d3c      	adds	r4, r7, #4
 80030a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030ac:	f240 2301 	movw	r3, #513	; 0x201
 80030b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x40>
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x46>
 80030da:	e02b      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030de:	623b      	str	r3, [r7, #32]
      break;
 80030e0:	e02b      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	0c9b      	lsrs	r3, r3, #18
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3328      	adds	r3, #40	; 0x28
 80030ec:	443b      	add	r3, r7
 80030ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d012      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0c5b      	lsrs	r3, r3, #17
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	3328      	adds	r3, #40	; 0x28
 800310a:	443b      	add	r3, r7
 800310c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003110:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003116:	fb03 f202 	mul.w	r2, r3, r2
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	e004      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	623b      	str	r3, [r7, #32]
      break;
 8003132:	e002      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003136:	623b      	str	r3, [r7, #32]
      break;
 8003138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313a:	6a3b      	ldr	r3, [r7, #32]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3728      	adds	r7, #40	; 0x28
 8003140:	46bd      	mov	sp, r7
 8003142:	bc90      	pop	{r4, r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	08006e9c 	.word	0x08006e9c
 800314c:	40021000 	.word	0x40021000
 8003150:	007a1200 	.word	0x007a1200
 8003154:	003d0900 	.word	0x003d0900

08003158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800315c:	4b02      	ldr	r3, [pc, #8]	; (8003168 <HAL_RCC_GetHCLKFreq+0x10>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	20000000 	.word	0x20000000

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003170:	f7ff fff2 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4903      	ldr	r1, [pc, #12]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	08006ec4 	.word	0x08006ec4

08003194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003198:	f7ff ffde 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	0adb      	lsrs	r3, r3, #11
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4903      	ldr	r1, [pc, #12]	; (80031b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08006ec4 	.word	0x08006ec4

080031bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	220f      	movs	r2, #15
 80031ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_RCC_GetClockConfig+0x58>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0203 	and.w	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_RCC_GetClockConfig+0x58>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_GetClockConfig+0x58>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <HAL_RCC_GetClockConfig+0x58>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	08db      	lsrs	r3, r3, #3
 80031f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCC_GetClockConfig+0x5c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0207 	and.w	r2, r3, #7
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	40021000 	.word	0x40021000
 8003218:	40022000 	.word	0x40022000

0800321c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <RCC_Delay+0x34>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <RCC_Delay+0x38>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0a5b      	lsrs	r3, r3, #9
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003238:	bf00      	nop
  }
  while (Delay --);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1e5a      	subs	r2, r3, #1
 800323e:	60fa      	str	r2, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f9      	bne.n	8003238 <RCC_Delay+0x1c>
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	20000000 	.word	0x20000000
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e076      	b.n	8003358 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800327a:	d009      	beq.n	8003290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
 8003282:	e005      	b.n	8003290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd fc7a 	bl	8000ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	ea42 0103 	orr.w	r1, r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	0c1a      	lsrs	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f002 0204 	and.w	r2, r2, #4
 8003336:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003346:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e041      	b.n	80033f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f839 	bl	80033fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f000 f9b4 	bl	800370c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d001      	beq.n	8003428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e03a      	b.n	800349e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00e      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x58>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	d009      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x58>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <HAL_TIM_Base_Start_IT+0x9c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x58>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d111      	bne.n	800348c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b06      	cmp	r3, #6
 8003478:	d010      	beq.n	800349c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348a:	e007      	b.n	800349c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800

080034b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0202 	mvn.w	r2, #2
 80034e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8ed 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8e0 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8ef 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b04      	cmp	r3, #4
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0204 	mvn.w	r2, #4
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8c3 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8b6 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f8c5 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b08      	cmp	r3, #8
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b08      	cmp	r3, #8
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0208 	mvn.w	r2, #8
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2204      	movs	r2, #4
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f899 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f88c 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f89b 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0210 	mvn.w	r2, #16
 80035dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2208      	movs	r2, #8
 80035e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f86f 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f862 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f871 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d10e      	bne.n	8003638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d107      	bne.n	8003638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0201 	mvn.w	r2, #1
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fd fa28 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b80      	cmp	r3, #128	; 0x80
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d107      	bne.n	8003664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8bf 	bl	80037e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d107      	bne.n	8003690 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f835 	bl	80036fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b20      	cmp	r3, #32
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0220 	mvn.w	r2, #32
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f88a 	bl	80037d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a29      	ldr	r2, [pc, #164]	; (80037c4 <TIM_Base_SetConfig+0xb8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00b      	beq.n	800373c <TIM_Base_SetConfig+0x30>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d007      	beq.n	800373c <TIM_Base_SetConfig+0x30>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <TIM_Base_SetConfig+0xbc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_Base_SetConfig+0x30>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a25      	ldr	r2, [pc, #148]	; (80037cc <TIM_Base_SetConfig+0xc0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d108      	bne.n	800374e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <TIM_Base_SetConfig+0xb8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00b      	beq.n	800376e <TIM_Base_SetConfig+0x62>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375c:	d007      	beq.n	800376e <TIM_Base_SetConfig+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a19      	ldr	r2, [pc, #100]	; (80037c8 <TIM_Base_SetConfig+0xbc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_Base_SetConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a18      	ldr	r2, [pc, #96]	; (80037cc <TIM_Base_SetConfig+0xc0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d108      	bne.n	8003780 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <TIM_Base_SetConfig+0xb8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d103      	bne.n	80037b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	615a      	str	r2, [r3, #20]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800

080037d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e03f      	b.n	8003886 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fa0c 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fd9b 	bl	8004374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b08a      	sub	sp, #40	; 0x28
 8003892:	af02      	add	r7, sp, #8
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d17c      	bne.n	80039a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_Transmit+0x2c>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e075      	b.n	80039aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Transmit+0x3e>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e06e      	b.n	80039aa <HAL_UART_Transmit+0x11c>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2221      	movs	r2, #33	; 0x21
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e2:	f7fd fb29 	bl	8000f38 <HAL_GetTick>
 80038e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fc:	d108      	bne.n	8003910 <HAL_UART_Transmit+0x82>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d104      	bne.n	8003910 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	e003      	b.n	8003918 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003920:	e02a      	b.n	8003978 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fb0d 	bl	8003f4c <UART_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e036      	b.n	80039aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003950:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	3302      	adds	r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	e007      	b.n	800396a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1cf      	bne.n	8003922 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	2140      	movs	r1, #64	; 0x40
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fadd 	bl	8003f4c <UART_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e006      	b.n	80039aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	4613      	mov	r3, r2
 80039be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d13c      	bne.n	8003a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e035      	b.n	8003a48 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e02e      	b.n	8003a48 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 faee 	bl	8003fe0 <UART_Start_Receive_DMA>
 8003a04:	4603      	mov	r3, r0
 8003a06:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d119      	bne.n	8003a42 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d113      	bne.n	8003a3e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0210 	orr.w	r2, r2, #16
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	e001      	b.n	8003a42 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	e000      	b.n	8003a48 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10d      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x52>
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fbc0 	bl	8004220 <UART_Receive_IT>
      return;
 8003aa0:	e17b      	b.n	8003d9a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80b1 	beq.w	8003c0c <HAL_UART_IRQHandler+0x1bc>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x70>
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80a6 	beq.w	8003c0c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x90>
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_UART_IRQHandler+0xb0>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f043 0202 	orr.w	r2, r3, #2
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_UART_IRQHandler+0xd0>
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0204 	orr.w	r2, r3, #4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00f      	beq.n	8003b4a <HAL_UART_IRQHandler+0xfa>
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <HAL_UART_IRQHandler+0xee>
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0208 	orr.w	r2, r3, #8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 811e 	beq.w	8003d90 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_UART_IRQHandler+0x11e>
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb59 	bl	8004220 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <HAL_UART_IRQHandler+0x146>
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d031      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa9b 	bl	80040d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d023      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d013      	beq.n	8003bea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	4a76      	ldr	r2, [pc, #472]	; (8003da0 <HAL_UART_IRQHandler+0x350>)
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fb90 	bl	80012f4 <HAL_DMA_Abort_IT>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003be4:	4610      	mov	r0, r2
 8003be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	e00e      	b.n	8003c08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8f5 	bl	8003dda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	e00a      	b.n	8003c08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8f1 	bl	8003dda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	e006      	b.n	8003c08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8ed 	bl	8003dda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c06:	e0c3      	b.n	8003d90 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	bf00      	nop
    return;
 8003c0a:	e0c1      	b.n	8003d90 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	f040 80a1 	bne.w	8003d58 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 809b 	beq.w	8003d58 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8095 	beq.w	8003d58 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d04e      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c5c:	8a3b      	ldrh	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8098 	beq.w	8003d94 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c68:	8a3a      	ldrh	r2, [r7, #16]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	f080 8092 	bcs.w	8003d94 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8a3a      	ldrh	r2, [r7, #16]
 8003c74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d02b      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c8e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0210 	bic.w	r2, r2, #16
 8003ccc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fad3 	bl	800127e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fc fe31 	bl	8000950 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003cee:	e051      	b.n	8003d94 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d047      	beq.n	8003d98 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d08:	8a7b      	ldrh	r3, [r7, #18]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d044      	beq.n	8003d98 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0210 	bic.w	r2, r2, #16
 8003d4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d4c:	8a7b      	ldrh	r3, [r7, #18]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fc fdfd 	bl	8000950 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d56:	e01f      	b.n	8003d98 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_UART_IRQHandler+0x324>
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f9f0 	bl	8004152 <UART_Transmit_IT>
    return;
 8003d72:	e012      	b.n	8003d9a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <HAL_UART_IRQHandler+0x34a>
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fa31 	bl	80041f0 <UART_EndTransmit_IT>
    return;
 8003d8e:	e004      	b.n	8003d9a <HAL_UART_IRQHandler+0x34a>
    return;
 8003d90:	bf00      	nop
 8003d92:	e002      	b.n	8003d9a <HAL_UART_IRQHandler+0x34a>
      return;
 8003d94:	bf00      	nop
 8003d96:	e000      	b.n	8003d9a <HAL_UART_IRQHandler+0x34a>
      return;
 8003d98:	bf00      	nop
  }
}
 8003d9a:	3728      	adds	r7, #40	; 0x28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	0800412b 	.word	0x0800412b

08003da4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d12a      	bne.n	8003e5e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e1c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d107      	bne.n	8003e5e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0210 	bic.w	r2, r2, #16
 8003e5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d106      	bne.n	8003e74 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7fc fd6f 	bl	8000950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e72:	e002      	b.n	8003e7a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff ff9e 	bl	8003db6 <HAL_UART_RxCpltCallback>
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d108      	bne.n	8003eaa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7fc fd54 	bl	8000950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ea8:	e002      	b.n	8003eb0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ff8c 	bl	8003dc8 <HAL_UART_RxHalfCpltCallback>
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b21      	cmp	r3, #33	; 0x21
 8003eea:	d108      	bne.n	8003efe <UART_DMAError+0x46>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ef8:	68b8      	ldr	r0, [r7, #8]
 8003efa:	f000 f8d5 	bl	80040a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf14      	ite	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	2300      	moveq	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b22      	cmp	r3, #34	; 0x22
 8003f1e:	d108      	bne.n	8003f32 <UART_DMAError+0x7a>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f2c:	68b8      	ldr	r0, [r7, #8]
 8003f2e:	f000 f8d0 	bl	80040d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f043 0210 	orr.w	r2, r3, #16
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f3e:	68b8      	ldr	r0, [r7, #8]
 8003f40:	f7ff ff4b 	bl	8003dda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5c:	e02c      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d028      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f6c:	f7fc ffe4 	bl	8000f38 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d21d      	bcs.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e00f      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d0c3      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	4613      	mov	r3, r2
 8003fec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2222      	movs	r2, #34	; 0x22
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	4a23      	ldr	r2, [pc, #140]	; (800409c <UART_Start_Receive_DMA+0xbc>)
 800400e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <UART_Start_Receive_DMA+0xc0>)
 8004016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	4a21      	ldr	r2, [pc, #132]	; (80040a4 <UART_Start_Receive_DMA+0xc4>)
 800401e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	2200      	movs	r2, #0
 8004026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004028:	f107 0308 	add.w	r3, r7, #8
 800402c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	f7fd f8be 	bl	80011c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004070:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004090:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	08003ded 	.word	0x08003ded
 80040a0:	08003e83 	.word	0x08003e83
 80040a4:	08003eb9 	.word	0x08003eb9

080040a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80040be:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0210 	bic.w	r2, r2, #16
 8004110:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff fe48 	bl	8003dda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b21      	cmp	r3, #33	; 0x21
 8004164:	d13e      	bne.n	80041e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	d114      	bne.n	800419a <UART_Transmit_IT+0x48>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d110      	bne.n	800419a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800418c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	1c9a      	adds	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	621a      	str	r2, [r3, #32]
 8004198:	e008      	b.n	80041ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	1c59      	adds	r1, r3, #1
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6211      	str	r1, [r2, #32]
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4619      	mov	r1, r3
 80041ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10f      	bne.n	80041e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e000      	b.n	80041e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004206:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fdc7 	bl	8003da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b22      	cmp	r3, #34	; 0x22
 8004232:	f040 8099 	bne.w	8004368 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423e:	d117      	bne.n	8004270 <UART_Receive_IT+0x50>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d113      	bne.n	8004270 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425e:	b29a      	uxth	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	1c9a      	adds	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
 800426e:	e026      	b.n	80042be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004282:	d007      	beq.n	8004294 <UART_Receive_IT+0x74>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <UART_Receive_IT+0x82>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e008      	b.n	80042b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4619      	mov	r1, r3
 80042cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d148      	bne.n	8004364 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0220 	bic.w	r2, r2, #32
 80042e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	2b01      	cmp	r3, #1
 8004310:	d123      	bne.n	800435a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0210 	bic.w	r2, r2, #16
 8004326:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b10      	cmp	r3, #16
 8004334:	d10a      	bne.n	800434c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc fafc 	bl	8000950 <HAL_UARTEx_RxEventCallback>
 8004358:	e002      	b.n	8004360 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fd2b 	bl	8003db6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	e002      	b.n	800436a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043ae:	f023 030c 	bic.w	r3, r3, #12
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <UART_SetConfig+0x114>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d103      	bne.n	80043e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fe feda 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	e002      	b.n	80043ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7fe fec2 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 80043e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009a      	lsls	r2, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	4a22      	ldr	r2, [pc, #136]	; (800448c <UART_SetConfig+0x118>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	0119      	lsls	r1, r3, #4
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009a      	lsls	r2, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <UART_SetConfig+0x118>)
 8004422:	fba3 0302 	umull	r0, r3, r3, r2
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2064      	movs	r0, #100	; 0x64
 800442a:	fb00 f303 	mul.w	r3, r0, r3
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	3332      	adds	r3, #50	; 0x32
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <UART_SetConfig+0x118>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004440:	4419      	add	r1, r3
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009a      	lsls	r2, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	fbb2 f2f3 	udiv	r2, r2, r3
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <UART_SetConfig+0x118>)
 800445a:	fba3 0302 	umull	r0, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2064      	movs	r0, #100	; 0x64
 8004462:	fb00 f303 	mul.w	r3, r0, r3
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	3332      	adds	r3, #50	; 0x32
 800446c:	4a07      	ldr	r2, [pc, #28]	; (800448c <UART_SetConfig+0x118>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	f003 020f 	and.w	r2, r3, #15
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	440a      	add	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40013800 	.word	0x40013800
 800448c:	51eb851f 	.word	0x51eb851f

08004490 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800449e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044a2:	2b84      	cmp	r3, #132	; 0x84
 80044a4:	d005      	beq.n	80044b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	3303      	adds	r3, #3
 80044b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr

080044be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c4:	f3ef 8305 	mrs	r3, IPSR
 80044c8:	607b      	str	r3, [r7, #4]
  return(result);
 80044ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf14      	ite	ne
 80044d0:	2301      	movne	r3, #1
 80044d2:	2300      	moveq	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044e4:	f001 f92c 	bl	8005740 <vTaskStartScheduler>
  
  return osOK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	bd80      	pop	{r7, pc}

080044ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f0:	b089      	sub	sp, #36	; 0x24
 80044f2:	af04      	add	r7, sp, #16
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <osThreadCreate+0x54>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01c      	beq.n	8004542 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685c      	ldr	r4, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681d      	ldr	r5, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691e      	ldr	r6, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ffb8 	bl	8004490 <makeFreeRtosPriority>
 8004520:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800452a:	9202      	str	r2, [sp, #8]
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	9100      	str	r1, [sp, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	4632      	mov	r2, r6
 8004534:	4629      	mov	r1, r5
 8004536:	4620      	mov	r0, r4
 8004538:	f000 ff43 	bl	80053c2 <xTaskCreateStatic>
 800453c:	4603      	mov	r3, r0
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e01c      	b.n	800457c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685c      	ldr	r4, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800454e:	b29e      	uxth	r6, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff9a 	bl	8004490 <makeFreeRtosPriority>
 800455c:	4602      	mov	r2, r0
 800455e:	f107 030c 	add.w	r3, r7, #12
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	9200      	str	r2, [sp, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	4632      	mov	r2, r6
 800456a:	4629      	mov	r1, r5
 800456c:	4620      	mov	r0, r4
 800456e:	f000 ff84 	bl	800547a <xTaskCreate>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800457c:	68fb      	ldr	r3, [r7, #12]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004586 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <osDelay+0x16>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	e000      	b.n	800459e <osDelay+0x18>
 800459c:	2301      	movs	r3, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 f89a 	bl	80056d8 <vTaskDelay>
  
  return osOK;
 80045a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af02      	add	r7, sp, #8
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00f      	beq.n	80045e0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10a      	bne.n	80045dc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2203      	movs	r2, #3
 80045cc:	9200      	str	r2, [sp, #0]
 80045ce:	2200      	movs	r2, #0
 80045d0:	2100      	movs	r1, #0
 80045d2:	2001      	movs	r0, #1
 80045d4:	f000 f9e2 	bl	800499c <xQueueGenericCreateStatic>
 80045d8:	4603      	mov	r3, r0
 80045da:	e016      	b.n	800460a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	e014      	b.n	800460a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d110      	bne.n	8004608 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80045e6:	2203      	movs	r2, #3
 80045e8:	2100      	movs	r1, #0
 80045ea:	2001      	movs	r0, #1
 80045ec:	f000 fa4d 	bl	8004a8a <xQueueGenericCreate>
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <osSemaphoreCreate+0x56>
 80045f8:	2300      	movs	r3, #0
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 faa0 	bl	8004b44 <xQueueGenericSend>
      return sema;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	e000      	b.n	800460a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004608:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	e03a      	b.n	80046a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d103      	bne.n	8004640 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e009      	b.n	8004654 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <osSemaphoreWait+0x40>
      ticks = 1;
 8004650:	2301      	movs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004654:	f7ff ff33 	bl	80044be <inHandlerMode>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d017      	beq.n	800468e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800465e:	f107 0308 	add.w	r3, r7, #8
 8004662:	461a      	mov	r2, r3
 8004664:	2100      	movs	r1, #0
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fd04 	bl	8005074 <xQueueReceiveFromISR>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d001      	beq.n	8004676 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004672:	23ff      	movs	r3, #255	; 0xff
 8004674:	e015      	b.n	80046a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d011      	beq.n	80046a0 <osSemaphoreWait+0x8c>
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <osSemaphoreWait+0x98>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	e008      	b.n	80046a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fbe3 	bl	8004e5c <xQueueSemaphoreTake>
 8004696:	4603      	mov	r3, r0
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800469c:	23ff      	movs	r3, #255	; 0xff
 800469e:	e000      	b.n	80046a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80046c0:	f7ff fefd 	bl	80044be <inHandlerMode>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80046ca:	f107 0308 	add.w	r3, r7, #8
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fb35 	bl	8004d40 <xQueueGiveFromISR>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d001      	beq.n	80046e0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80046dc:	23ff      	movs	r3, #255	; 0xff
 80046de:	e017      	b.n	8004710 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d013      	beq.n	800470e <osSemaphoreRelease+0x5e>
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <osSemaphoreRelease+0x68>)
 80046e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	e00a      	b.n	800470e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80046f8:	2300      	movs	r3, #0
 80046fa:	2200      	movs	r2, #0
 80046fc:	2100      	movs	r1, #0
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fa20 	bl	8004b44 <xQueueGenericSend>
 8004704:	4603      	mov	r3, r0
 8004706:	2b01      	cmp	r3, #1
 8004708:	d001      	beq.n	800470e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800470a:	23ff      	movs	r3, #255	; 0xff
 800470c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800470e:	68fb      	ldr	r3, [r7, #12]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b085      	sub	sp, #20
 8004720:	af02      	add	r7, sp, #8
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d011      	beq.n	8004752 <osMessageCreate+0x36>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2400      	movs	r4, #0
 8004748:	9400      	str	r4, [sp, #0]
 800474a:	f000 f927 	bl	800499c <xQueueGenericCreateStatic>
 800474e:	4603      	mov	r3, r0
 8004750:	e008      	b.n	8004764 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	4619      	mov	r1, r3
 800475e:	f000 f994 	bl	8004a8a <xQueueGenericCreate>
 8004762:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bd90      	pop	{r4, r7, pc}

0800476c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f103 0208 	add.w	r2, r3, #8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f103 0208 	add.w	r2, r3, #8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f103 0208 	add.w	r2, r3, #8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	601a      	str	r2, [r3, #0]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d103      	bne.n	8004828 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e00c      	b.n	8004842 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3308      	adds	r3, #8
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e002      	b.n	8004836 <vListInsert+0x2e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	d2f6      	bcs.n	8004830 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	601a      	str	r2, [r3, #0]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6892      	ldr	r2, [r2, #8]
 800488e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6852      	ldr	r2, [r2, #4]
 8004898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d103      	bne.n	80048ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
	...

080048cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048f6:	f001 fe61 	bl	80065bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	441a      	add	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	3b01      	subs	r3, #1
 8004928:	68f9      	ldr	r1, [r7, #12]
 800492a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	441a      	add	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	22ff      	movs	r2, #255	; 0xff
 800493a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	22ff      	movs	r2, #255	; 0xff
 8004942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d114      	bne.n	8004976 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3310      	adds	r3, #16
 8004958:	4618      	mov	r0, r3
 800495a:	f001 f937 	bl	8005bcc <xTaskRemoveFromEventList>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d012      	beq.n	800498a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <xQueueGenericReset+0xcc>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	e009      	b.n	800498a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3310      	adds	r3, #16
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fef6 	bl	800476c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3324      	adds	r3, #36	; 0x24
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fef1 	bl	800476c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800498a:	f001 fe47 	bl	800661c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800498e:	2301      	movs	r3, #1
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08e      	sub	sp, #56	; 0x38
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <xQueueGenericCreateStatic+0x52>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <xQueueGenericCreateStatic+0x56>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <xQueueGenericCreateStatic+0x58>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	623b      	str	r3, [r7, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <xQueueGenericCreateStatic+0x7e>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <xQueueGenericCreateStatic+0x82>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueGenericCreateStatic+0x84>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	61fb      	str	r3, [r7, #28]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a3a:	2348      	movs	r3, #72	; 0x48
 8004a3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b48      	cmp	r3, #72	; 0x48
 8004a42:	d00a      	beq.n	8004a5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	61bb      	str	r3, [r7, #24]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f843 	bl	8004b06 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3730      	adds	r7, #48	; 0x30
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b08a      	sub	sp, #40	; 0x28
 8004a8e:	af02      	add	r7, sp, #8
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	4613      	mov	r3, r2
 8004a96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10a      	bne.n	8004ab4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	613b      	str	r3, [r7, #16]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e004      	b.n	8004aca <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3348      	adds	r3, #72	; 0x48
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fe74 	bl	80067bc <pvPortMalloc>
 8004ad4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00f      	beq.n	8004afc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	3348      	adds	r3, #72	; 0x48
 8004ae0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aea:	79fa      	ldrb	r2, [r7, #7]
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f805 	bl	8004b06 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004afc:	69bb      	ldr	r3, [r7, #24]
	}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	e002      	b.n	8004b28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b34:	2101      	movs	r1, #1
 8004b36:	69b8      	ldr	r0, [r7, #24]
 8004b38:	f7ff fec8 	bl	80048cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08e      	sub	sp, #56	; 0x38
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b52:	2300      	movs	r3, #0
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xQueueGenericSend+0x32>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <xQueueGenericSend+0x40>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <xQueueGenericSend+0x44>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <xQueueGenericSend+0x46>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <xQueueGenericSend+0x60>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d103      	bne.n	8004bb2 <xQueueGenericSend+0x6e>
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <xQueueGenericSend+0x72>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <xQueueGenericSend+0x74>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	623b      	str	r3, [r7, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bd2:	f001 f9bb 	bl	8005f4c <xTaskGetSchedulerState>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <xQueueGenericSend+0x9e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <xQueueGenericSend+0xa2>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <xQueueGenericSend+0xa4>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xQueueGenericSend+0xbe>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	61fb      	str	r3, [r7, #28]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c02:	f001 fcdb 	bl	80065bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <xQueueGenericSend+0xd4>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d129      	bne.n	8004c6c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c1e:	f000 fac0 	bl	80051a2 <prvCopyDataToQueue>
 8004c22:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d010      	beq.n	8004c4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	3324      	adds	r3, #36	; 0x24
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 ffcb 	bl	8005bcc <xTaskRemoveFromEventList>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c3c:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <xQueueGenericSend+0x1f8>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	e00a      	b.n	8004c64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c54:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <xQueueGenericSend+0x1f8>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c64:	f001 fcda 	bl	800661c <vPortExitCritical>
				return pdPASS;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e063      	b.n	8004d34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c72:	f001 fcd3 	bl	800661c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e05c      	b.n	8004d34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c80:	f107 0314 	add.w	r3, r7, #20
 8004c84:	4618      	mov	r0, r3
 8004c86:	f001 f803 	bl	8005c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c8e:	f001 fcc5 	bl	800661c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c92:	f000 fdb5 	bl	8005800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c96:	f001 fc91 	bl	80065bc <vPortEnterCritical>
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca0:	b25b      	sxtb	r3, r3
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca6:	d103      	bne.n	8004cb0 <xQueueGenericSend+0x16c>
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d103      	bne.n	8004cc6 <xQueueGenericSend+0x182>
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc6:	f001 fca9 	bl	800661c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cca:	1d3a      	adds	r2, r7, #4
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fff2 	bl	8005cbc <xTaskCheckForTimeOut>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d124      	bne.n	8004d28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ce0:	f000 fb57 	bl	8005392 <prvIsQueueFull>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d018      	beq.n	8004d1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	3310      	adds	r3, #16
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 ff46 	bl	8005b84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cfa:	f000 fae2 	bl	80052c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cfe:	f000 fd8d 	bl	800581c <xTaskResumeAll>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f47f af7c 	bne.w	8004c02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <xQueueGenericSend+0x1f8>)
 8004d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	e772      	b.n	8004c02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d1e:	f000 fad0 	bl	80052c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d22:	f000 fd7b 	bl	800581c <xTaskResumeAll>
 8004d26:	e76c      	b.n	8004c02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2a:	f000 faca 	bl	80052c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d2e:	f000 fd75 	bl	800581c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d32:	2300      	movs	r3, #0
		}
	}
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3738      	adds	r7, #56	; 0x38
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08e      	sub	sp, #56	; 0x38
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	623b      	str	r3, [r7, #32]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	61fb      	str	r3, [r7, #28]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <xQueueGiveFromISR+0x58>
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <xQueueGiveFromISR+0x5c>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <xQueueGiveFromISR+0x5e>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	61bb      	str	r3, [r7, #24]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004db8:	f001 fcc2 	bl	8006740 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dbc:	f3ef 8211 	mrs	r2, BASEPRI
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	617a      	str	r2, [r7, #20]
 8004dd2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dd4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d22b      	bcs.n	8004e40 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004dfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d112      	bne.n	8004e2a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d016      	beq.n	8004e3a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	3324      	adds	r3, #36	; 0x24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fedb 	bl	8005bcc <xTaskRemoveFromEventList>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00e      	beq.n	8004e3a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e007      	b.n	8004e3a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e2e:	3301      	adds	r3, #1
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	b25a      	sxtb	r2, r3
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3e:	e001      	b.n	8004e44 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3738      	adds	r7, #56	; 0x38
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08e      	sub	sp, #56	; 0x38
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	623b      	str	r3, [r7, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	61fb      	str	r3, [r7, #28]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eac:	f001 f84e 	bl	8005f4c <xTaskGetSchedulerState>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <xQueueSemaphoreTake+0x60>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <xQueueSemaphoreTake+0x64>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <xQueueSemaphoreTake+0x66>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	61bb      	str	r3, [r7, #24]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004edc:	f001 fb6e 	bl	80065bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d024      	beq.n	8004f36 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	1e5a      	subs	r2, r3, #1
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004efc:	f001 f9f0 	bl	80062e0 <pvTaskIncrementMutexHeldCount>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00f      	beq.n	8004f2e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	3310      	adds	r3, #16
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fe5a 	bl	8005bcc <xTaskRemoveFromEventList>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f1e:	4b54      	ldr	r3, [pc, #336]	; (8005070 <xQueueSemaphoreTake+0x214>)
 8004f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f2e:	f001 fb75 	bl	800661c <vPortExitCritical>
				return pdPASS;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e097      	b.n	8005066 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d111      	bne.n	8004f60 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	617b      	str	r3, [r7, #20]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f58:	f001 fb60 	bl	800661c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e082      	b.n	8005066 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f66:	f107 030c 	add.w	r3, r7, #12
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fe90 	bl	8005c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f74:	f001 fb52 	bl	800661c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f78:	f000 fc42 	bl	8005800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f7c:	f001 fb1e 	bl	80065bc <vPortEnterCritical>
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f86:	b25b      	sxtb	r3, r3
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d103      	bne.n	8004f96 <xQueueSemaphoreTake+0x13a>
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f9c:	b25b      	sxtb	r3, r3
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d103      	bne.n	8004fac <xQueueSemaphoreTake+0x150>
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fac:	f001 fb36 	bl	800661c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fb0:	463a      	mov	r2, r7
 8004fb2:	f107 030c 	add.w	r3, r7, #12
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fe7f 	bl	8005cbc <xTaskCheckForTimeOut>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d132      	bne.n	800502a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fc6:	f000 f9ce 	bl	8005366 <prvIsQueueEmpty>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d026      	beq.n	800501e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004fd8:	f001 faf0 	bl	80065bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 ffd1 	bl	8005f88 <xTaskPriorityInherit>
 8004fe6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004fe8:	f001 fb18 	bl	800661c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	3324      	adds	r3, #36	; 0x24
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fdc5 	bl	8005b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ffc:	f000 f961 	bl	80052c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005000:	f000 fc0c 	bl	800581c <xTaskResumeAll>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	f47f af68 	bne.w	8004edc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800500c:	4b18      	ldr	r3, [pc, #96]	; (8005070 <xQueueSemaphoreTake+0x214>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	e75e      	b.n	8004edc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800501e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005020:	f000 f94f 	bl	80052c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005024:	f000 fbfa 	bl	800581c <xTaskResumeAll>
 8005028:	e758      	b.n	8004edc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800502a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800502c:	f000 f949 	bl	80052c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005030:	f000 fbf4 	bl	800581c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005036:	f000 f996 	bl	8005366 <prvIsQueueEmpty>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	f43f af4d 	beq.w	8004edc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005048:	f001 fab8 	bl	80065bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800504c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800504e:	f000 f891 	bl	8005174 <prvGetDisinheritPriorityAfterTimeout>
 8005052:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800505a:	4618      	mov	r0, r3
 800505c:	f001 f8a0 	bl	80061a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005060:	f001 fadc 	bl	800661c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005064:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005066:	4618      	mov	r0, r3
 8005068:	3738      	adds	r7, #56	; 0x38
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08e      	sub	sp, #56	; 0x38
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	623b      	str	r3, [r7, #32]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d103      	bne.n	80050ae <xQueueReceiveFromISR+0x3a>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <xQueueReceiveFromISR+0x3e>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <xQueueReceiveFromISR+0x40>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	61fb      	str	r3, [r7, #28]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ce:	f001 fb37 	bl	8006740 <vPortValidateInterruptPriority>
	__asm volatile
 80050d2:	f3ef 8211 	mrs	r2, BASEPRI
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	61ba      	str	r2, [r7, #24]
 80050e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80050ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02f      	beq.n	800515a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005108:	f000 f8b5 	bl	8005276 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	1e5a      	subs	r2, r3, #1
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d112      	bne.n	8005144 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	3310      	adds	r3, #16
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fd4e 	bl	8005bcc <xTaskRemoveFromEventList>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00e      	beq.n	8005154 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e007      	b.n	8005154 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005148:	3301      	adds	r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	b25a      	sxtb	r2, r3
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005154:	2301      	movs	r3, #1
 8005156:	637b      	str	r3, [r7, #52]	; 0x34
 8005158:	e001      	b.n	800515e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800515a:	2300      	movs	r3, #0
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f383 8811 	msr	BASEPRI, r3
}
 8005168:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800516c:	4618      	mov	r0, r3
 800516e:	3738      	adds	r7, #56	; 0x38
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b00      	cmp	r3, #0
 8005182:	d006      	beq.n	8005192 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f1c3 0307 	rsb	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e001      	b.n	8005196 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005196:	68fb      	ldr	r3, [r7, #12]
	}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10d      	bne.n	80051dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d14d      	bne.n	8005264 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 ff61 	bl	8006094 <xTaskPriorityDisinherit>
 80051d2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	e043      	b.n	8005264 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d119      	bne.n	8005216 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6898      	ldr	r0, [r3, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	461a      	mov	r2, r3
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	f001 fd05 	bl	8006bfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d32b      	bcc.n	8005264 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	e026      	b.n	8005264 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68d8      	ldr	r0, [r3, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	461a      	mov	r2, r3
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	f001 fceb 	bl	8006bfc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	425b      	negs	r3, r3
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d207      	bcs.n	8005252 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	425b      	negs	r3, r3
 800524c:	441a      	add	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d105      	bne.n	8005264 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	3b01      	subs	r3, #1
 8005262:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800526c:	697b      	ldr	r3, [r7, #20]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d018      	beq.n	80052ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d303      	bcc.n	80052aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68d9      	ldr	r1, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	461a      	mov	r2, r3
 80052b4:	6838      	ldr	r0, [r7, #0]
 80052b6:	f001 fca1 	bl	8006bfc <memcpy>
	}
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052ca:	f001 f977 	bl	80065bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052d6:	e011      	b.n	80052fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d012      	beq.n	8005306 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fc71 	bl	8005bcc <xTaskRemoveFromEventList>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052f0:	f000 fd46 	bl	8005d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005300:	2b00      	cmp	r3, #0
 8005302:	dce9      	bgt.n	80052d8 <prvUnlockQueue+0x16>
 8005304:	e000      	b.n	8005308 <prvUnlockQueue+0x46>
					break;
 8005306:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	22ff      	movs	r2, #255	; 0xff
 800530c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005310:	f001 f984 	bl	800661c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005314:	f001 f952 	bl	80065bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800531e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005320:	e011      	b.n	8005346 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d012      	beq.n	8005350 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3310      	adds	r3, #16
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fc4c 	bl	8005bcc <xTaskRemoveFromEventList>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800533a:	f000 fd21 	bl	8005d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800533e:	7bbb      	ldrb	r3, [r7, #14]
 8005340:	3b01      	subs	r3, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800534a:	2b00      	cmp	r3, #0
 800534c:	dce9      	bgt.n	8005322 <prvUnlockQueue+0x60>
 800534e:	e000      	b.n	8005352 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005350:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800535a:	f001 f95f 	bl	800661c <vPortExitCritical>
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800536e:	f001 f925 	bl	80065bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800537a:	2301      	movs	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e001      	b.n	8005384 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005384:	f001 f94a 	bl	800661c <vPortExitCritical>

	return xReturn;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800539a:	f001 f90f 	bl	80065bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d102      	bne.n	80053b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e001      	b.n	80053b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053b4:	f001 f932 	bl	800661c <vPortExitCritical>

	return xReturn;
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b08e      	sub	sp, #56	; 0x38
 80053c6:	af04      	add	r7, sp, #16
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <xTaskCreateStatic+0x2a>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	623b      	str	r3, [r7, #32]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <xTaskCreateStatic+0x46>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	61fb      	str	r3, [r7, #28]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005408:	2354      	movs	r3, #84	; 0x54
 800540a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b54      	cmp	r3, #84	; 0x54
 8005410:	d00a      	beq.n	8005428 <xTaskCreateStatic+0x66>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	61bb      	str	r3, [r7, #24]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	2b00      	cmp	r3, #0
 800542c:	d01e      	beq.n	800546c <xTaskCreateStatic+0xaa>
 800542e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01b      	beq.n	800546c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800543c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	2202      	movs	r2, #2
 8005442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005446:	2300      	movs	r3, #0
 8005448:	9303      	str	r3, [sp, #12]
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	9302      	str	r3, [sp, #8]
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f850 	bl	8005504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005466:	f000 f8cd 	bl	8005604 <prvAddNewTaskToReadyList>
 800546a:	e001      	b.n	8005470 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005470:	697b      	ldr	r3, [r7, #20]
	}
 8005472:	4618      	mov	r0, r3
 8005474:	3728      	adds	r7, #40	; 0x28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800547a:	b580      	push	{r7, lr}
 800547c:	b08c      	sub	sp, #48	; 0x30
 800547e:	af04      	add	r7, sp, #16
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4618      	mov	r0, r3
 8005490:	f001 f994 	bl	80067bc <pvPortMalloc>
 8005494:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00e      	beq.n	80054ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800549c:	2054      	movs	r0, #84	; 0x54
 800549e:	f001 f98d 	bl	80067bc <pvPortMalloc>
 80054a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
 80054b0:	e005      	b.n	80054be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054b2:	6978      	ldr	r0, [r7, #20]
 80054b4:	f001 fa46 	bl	8006944 <vPortFree>
 80054b8:	e001      	b.n	80054be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d017      	beq.n	80054f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054cc:	88fa      	ldrh	r2, [r7, #6]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9303      	str	r3, [sp, #12]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	9302      	str	r3, [sp, #8]
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f80e 	bl	8005504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054e8:	69f8      	ldr	r0, [r7, #28]
 80054ea:	f000 f88b 	bl	8005604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054ee:	2301      	movs	r3, #1
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	e002      	b.n	80054fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054f4:	f04f 33ff 	mov.w	r3, #4294967295
 80054f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054fa:	69bb      	ldr	r3, [r7, #24]
	}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800551c:	3b01      	subs	r3, #1
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f023 0307 	bic.w	r3, r3, #7
 800552a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	617b      	str	r3, [r7, #20]
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	e012      	b.n	8005578 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	7819      	ldrb	r1, [r3, #0]
 800555a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	3334      	adds	r3, #52	; 0x34
 8005562:	460a      	mov	r2, r1
 8005564:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3301      	adds	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2b0f      	cmp	r3, #15
 800557c:	d9e9      	bls.n	8005552 <prvInitialiseNewTask+0x4e>
 800557e:	e000      	b.n	8005582 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005580:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	2b06      	cmp	r3, #6
 800558e:	d901      	bls.n	8005594 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005590:	2306      	movs	r3, #6
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005598:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800559e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	2200      	movs	r2, #0
 80055a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	3304      	adds	r3, #4
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff f8fd 	bl	80047aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	3318      	adds	r3, #24
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff f8f8 	bl	80047aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	f1c3 0207 	rsb	r2, r3, #7
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	2200      	movs	r2, #0
 80055d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	69b8      	ldr	r0, [r7, #24]
 80055e4:	f000 fef6 	bl	80063d4 <pxPortInitialiseStack>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055fa:	bf00      	nop
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800560c:	f000 ffd6 	bl	80065bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005610:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <prvAddNewTaskToReadyList+0xb8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	4a29      	ldr	r2, [pc, #164]	; (80056bc <prvAddNewTaskToReadyList+0xb8>)
 8005618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800561a:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005622:	4a27      	ldr	r2, [pc, #156]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <prvAddNewTaskToReadyList+0xb8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d110      	bne.n	8005652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005630:	f000 fbca 	bl	8005dc8 <prvInitialiseTaskLists>
 8005634:	e00d      	b.n	8005652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005636:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <prvAddNewTaskToReadyList+0xc0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800563e:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d802      	bhi.n	8005652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800564c:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005652:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <prvAddNewTaskToReadyList+0xc4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <prvAddNewTaskToReadyList+0xc4>)
 800565a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	2201      	movs	r2, #1
 8005662:	409a      	lsls	r2, r3
 8005664:	4b19      	ldr	r3, [pc, #100]	; (80056cc <prvAddNewTaskToReadyList+0xc8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4313      	orrs	r3, r2
 800566a:	4a18      	ldr	r2, [pc, #96]	; (80056cc <prvAddNewTaskToReadyList+0xc8>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <prvAddNewTaskToReadyList+0xcc>)
 800567c:	441a      	add	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3304      	adds	r3, #4
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f7ff f89c 	bl	80047c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800568a:	f000 ffc7 	bl	800661c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800568e:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <prvAddNewTaskToReadyList+0xc0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d207      	bcs.n	80056b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <prvAddNewTaskToReadyList+0xd0>)
 80056a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	200005d0 	.word	0x200005d0
 80056c0:	200004d0 	.word	0x200004d0
 80056c4:	200005dc 	.word	0x200005dc
 80056c8:	200005ec 	.word	0x200005ec
 80056cc:	200005d8 	.word	0x200005d8
 80056d0:	200004d4 	.word	0x200004d4
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d017      	beq.n	800571a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ea:	4b13      	ldr	r3, [pc, #76]	; (8005738 <vTaskDelay+0x60>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <vTaskDelay+0x30>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60bb      	str	r3, [r7, #8]
}
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005708:	f000 f87a 	bl	8005800 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800570c:	2100      	movs	r1, #0
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fdfa 	bl	8006308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005714:	f000 f882 	bl	800581c <xTaskResumeAll>
 8005718:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d107      	bne.n	8005730 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005720:	4b06      	ldr	r3, [pc, #24]	; (800573c <vTaskDelay+0x64>)
 8005722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	200005f8 	.word	0x200005f8
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800574e:	463a      	mov	r2, r7
 8005750:	1d39      	adds	r1, r7, #4
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4618      	mov	r0, r3
 8005758:	f7fa fede 	bl	8000518 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	9202      	str	r2, [sp, #8]
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	2300      	movs	r3, #0
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	460a      	mov	r2, r1
 800576e:	491e      	ldr	r1, [pc, #120]	; (80057e8 <vTaskStartScheduler+0xa8>)
 8005770:	481e      	ldr	r0, [pc, #120]	; (80057ec <vTaskStartScheduler+0xac>)
 8005772:	f7ff fe26 	bl	80053c2 <xTaskCreateStatic>
 8005776:	4603      	mov	r3, r0
 8005778:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <vTaskStartScheduler+0xb0>)
 800577a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800577c:	4b1c      	ldr	r3, [pc, #112]	; (80057f0 <vTaskStartScheduler+0xb0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005784:	2301      	movs	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e001      	b.n	800578e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d116      	bne.n	80057c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	613b      	str	r3, [r7, #16]
}
 80057a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057a8:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <vTaskStartScheduler+0xb4>)
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057b0:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <vTaskStartScheduler+0xb8>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <vTaskStartScheduler+0xbc>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057bc:	f000 fe8c 	bl	80064d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057c0:	e00e      	b.n	80057e0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d10a      	bne.n	80057e0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60fb      	str	r3, [r7, #12]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <vTaskStartScheduler+0x9e>
}
 80057e0:	bf00      	nop
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	08006eac 	.word	0x08006eac
 80057ec:	08005d99 	.word	0x08005d99
 80057f0:	200005f4 	.word	0x200005f4
 80057f4:	200005f0 	.word	0x200005f0
 80057f8:	200005dc 	.word	0x200005dc
 80057fc:	200005d4 	.word	0x200005d4

08005800 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005804:	4b04      	ldr	r3, [pc, #16]	; (8005818 <vTaskSuspendAll+0x18>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3301      	adds	r3, #1
 800580a:	4a03      	ldr	r2, [pc, #12]	; (8005818 <vTaskSuspendAll+0x18>)
 800580c:	6013      	str	r3, [r2, #0]
}
 800580e:	bf00      	nop
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	200005f8 	.word	0x200005f8

0800581c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800582a:	4b41      	ldr	r3, [pc, #260]	; (8005930 <xTaskResumeAll+0x114>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <xTaskResumeAll+0x2c>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	603b      	str	r3, [r7, #0]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005848:	f000 feb8 	bl	80065bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800584c:	4b38      	ldr	r3, [pc, #224]	; (8005930 <xTaskResumeAll+0x114>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3b01      	subs	r3, #1
 8005852:	4a37      	ldr	r2, [pc, #220]	; (8005930 <xTaskResumeAll+0x114>)
 8005854:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005856:	4b36      	ldr	r3, [pc, #216]	; (8005930 <xTaskResumeAll+0x114>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d161      	bne.n	8005922 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800585e:	4b35      	ldr	r3, [pc, #212]	; (8005934 <xTaskResumeAll+0x118>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d05d      	beq.n	8005922 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005866:	e02e      	b.n	80058c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005868:	4b33      	ldr	r3, [pc, #204]	; (8005938 <xTaskResumeAll+0x11c>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3318      	adds	r3, #24
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe ffff 	bl	8004878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3304      	adds	r3, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fffa 	bl	8004878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	2201      	movs	r2, #1
 800588a:	409a      	lsls	r2, r3
 800588c:	4b2b      	ldr	r3, [pc, #172]	; (800593c <xTaskResumeAll+0x120>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	4a2a      	ldr	r2, [pc, #168]	; (800593c <xTaskResumeAll+0x120>)
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4a27      	ldr	r2, [pc, #156]	; (8005940 <xTaskResumeAll+0x124>)
 80058a4:	441a      	add	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7fe ff88 	bl	80047c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b6:	4b23      	ldr	r3, [pc, #140]	; (8005944 <xTaskResumeAll+0x128>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	429a      	cmp	r2, r3
 80058be:	d302      	bcc.n	80058c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80058c0:	4b21      	ldr	r3, [pc, #132]	; (8005948 <xTaskResumeAll+0x12c>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <xTaskResumeAll+0x11c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1cc      	bne.n	8005868 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058d4:	f000 fb16 	bl	8005f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058d8:	4b1c      	ldr	r3, [pc, #112]	; (800594c <xTaskResumeAll+0x130>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d010      	beq.n	8005906 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058e4:	f000 f836 	bl	8005954 <xTaskIncrementTick>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058ee:	4b16      	ldr	r3, [pc, #88]	; (8005948 <xTaskResumeAll+0x12c>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f1      	bne.n	80058e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <xTaskResumeAll+0x130>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005906:	4b10      	ldr	r3, [pc, #64]	; (8005948 <xTaskResumeAll+0x12c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800590e:	2301      	movs	r3, #1
 8005910:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005912:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <xTaskResumeAll+0x134>)
 8005914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005922:	f000 fe7b 	bl	800661c <vPortExitCritical>

	return xAlreadyYielded;
 8005926:	68bb      	ldr	r3, [r7, #8]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	200005f8 	.word	0x200005f8
 8005934:	200005d0 	.word	0x200005d0
 8005938:	20000590 	.word	0x20000590
 800593c:	200005d8 	.word	0x200005d8
 8005940:	200004d4 	.word	0x200004d4
 8005944:	200004d0 	.word	0x200004d0
 8005948:	200005e4 	.word	0x200005e4
 800594c:	200005e0 	.word	0x200005e0
 8005950:	e000ed04 	.word	0xe000ed04

08005954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800595e:	4b51      	ldr	r3, [pc, #324]	; (8005aa4 <xTaskIncrementTick+0x150>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f040 808d 	bne.w	8005a82 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005968:	4b4f      	ldr	r3, [pc, #316]	; (8005aa8 <xTaskIncrementTick+0x154>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005970:	4a4d      	ldr	r2, [pc, #308]	; (8005aa8 <xTaskIncrementTick+0x154>)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d120      	bne.n	80059be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800597c:	4b4b      	ldr	r3, [pc, #300]	; (8005aac <xTaskIncrementTick+0x158>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <xTaskIncrementTick+0x48>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	603b      	str	r3, [r7, #0]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <xTaskIncrementTick+0x46>
 800599c:	4b43      	ldr	r3, [pc, #268]	; (8005aac <xTaskIncrementTick+0x158>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	4b43      	ldr	r3, [pc, #268]	; (8005ab0 <xTaskIncrementTick+0x15c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a41      	ldr	r2, [pc, #260]	; (8005aac <xTaskIncrementTick+0x158>)
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4a41      	ldr	r2, [pc, #260]	; (8005ab0 <xTaskIncrementTick+0x15c>)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4b40      	ldr	r3, [pc, #256]	; (8005ab4 <xTaskIncrementTick+0x160>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3301      	adds	r3, #1
 80059b6:	4a3f      	ldr	r2, [pc, #252]	; (8005ab4 <xTaskIncrementTick+0x160>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	f000 faa3 	bl	8005f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059be:	4b3e      	ldr	r3, [pc, #248]	; (8005ab8 <xTaskIncrementTick+0x164>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d34d      	bcc.n	8005a64 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c8:	4b38      	ldr	r3, [pc, #224]	; (8005aac <xTaskIncrementTick+0x158>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <xTaskIncrementTick+0x82>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <xTaskIncrementTick+0x84>
 80059d6:	2300      	movs	r3, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059dc:	4b36      	ldr	r3, [pc, #216]	; (8005ab8 <xTaskIncrementTick+0x164>)
 80059de:	f04f 32ff 	mov.w	r2, #4294967295
 80059e2:	601a      	str	r2, [r3, #0]
					break;
 80059e4:	e03e      	b.n	8005a64 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059e6:	4b31      	ldr	r3, [pc, #196]	; (8005aac <xTaskIncrementTick+0x158>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d203      	bcs.n	8005a06 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059fe:	4a2e      	ldr	r2, [pc, #184]	; (8005ab8 <xTaskIncrementTick+0x164>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6013      	str	r3, [r2, #0]
						break;
 8005a04:	e02e      	b.n	8005a64 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe ff34 	bl	8004878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3318      	adds	r3, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe ff2b 	bl	8004878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	2201      	movs	r2, #1
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	4b24      	ldr	r3, [pc, #144]	; (8005abc <xTaskIncrementTick+0x168>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	4a22      	ldr	r2, [pc, #136]	; (8005abc <xTaskIncrementTick+0x168>)
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <xTaskIncrementTick+0x16c>)
 8005a42:	441a      	add	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	f7fe feb9 	bl	80047c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4b1b      	ldr	r3, [pc, #108]	; (8005ac4 <xTaskIncrementTick+0x170>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d3b4      	bcc.n	80059c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a62:	e7b1      	b.n	80059c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a64:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <xTaskIncrementTick+0x170>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	4915      	ldr	r1, [pc, #84]	; (8005ac0 <xTaskIncrementTick+0x16c>)
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d907      	bls.n	8005a8c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e004      	b.n	8005a8c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a82:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <xTaskIncrementTick+0x174>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3301      	adds	r3, #1
 8005a88:	4a0f      	ldr	r2, [pc, #60]	; (8005ac8 <xTaskIncrementTick+0x174>)
 8005a8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <xTaskIncrementTick+0x178>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a98:	697b      	ldr	r3, [r7, #20]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200005f8 	.word	0x200005f8
 8005aa8:	200005d4 	.word	0x200005d4
 8005aac:	20000588 	.word	0x20000588
 8005ab0:	2000058c 	.word	0x2000058c
 8005ab4:	200005e8 	.word	0x200005e8
 8005ab8:	200005f0 	.word	0x200005f0
 8005abc:	200005d8 	.word	0x200005d8
 8005ac0:	200004d4 	.word	0x200004d4
 8005ac4:	200004d0 	.word	0x200004d0
 8005ac8:	200005e0 	.word	0x200005e0
 8005acc:	200005e4 	.word	0x200005e4

08005ad0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ad6:	4b26      	ldr	r3, [pc, #152]	; (8005b70 <vTaskSwitchContext+0xa0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ade:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <vTaskSwitchContext+0xa4>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ae4:	e03f      	b.n	8005b66 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005ae6:	4b23      	ldr	r3, [pc, #140]	; (8005b74 <vTaskSwitchContext+0xa4>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005aec:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <vTaskSwitchContext+0xa8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	fab3 f383 	clz	r3, r3
 8005af8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005afa:	7afb      	ldrb	r3, [r7, #11]
 8005afc:	f1c3 031f 	rsb	r3, r3, #31
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	491e      	ldr	r1, [pc, #120]	; (8005b7c <vTaskSwitchContext+0xac>)
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	607b      	str	r3, [r7, #4]
}
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <vTaskSwitchContext+0x5a>
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <vTaskSwitchContext+0xac>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d104      	bne.n	8005b5c <vTaskSwitchContext+0x8c>
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	4a07      	ldr	r2, [pc, #28]	; (8005b80 <vTaskSwitchContext+0xb0>)
 8005b64:	6013      	str	r3, [r2, #0]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	200005f8 	.word	0x200005f8
 8005b74:	200005e4 	.word	0x200005e4
 8005b78:	200005d8 	.word	0x200005d8
 8005b7c:	200004d4 	.word	0x200004d4
 8005b80:	200004d0 	.word	0x200004d0

08005b84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <vTaskPlaceOnEventList+0x44>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3318      	adds	r3, #24
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fe fe28 	bl	8004808 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bb8:	2101      	movs	r1, #1
 8005bba:	6838      	ldr	r0, [r7, #0]
 8005bbc:	f000 fba4 	bl	8006308 <prvAddCurrentTaskToDelayedList>
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	200004d0 	.word	0x200004d0

08005bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60fb      	str	r3, [r7, #12]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3318      	adds	r3, #24
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fe fe3b 	bl	8004878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c02:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <xTaskRemoveFromEventList+0xac>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d11c      	bne.n	8005c44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe fe32 	bl	8004878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	2201      	movs	r2, #1
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <xTaskRemoveFromEventList+0xb0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <xTaskRemoveFromEventList+0xb0>)
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <xTaskRemoveFromEventList+0xb4>)
 8005c34:	441a      	add	r2, r3
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f7fe fdc0 	bl	80047c2 <vListInsertEnd>
 8005c42:	e005      	b.n	8005c50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	3318      	adds	r3, #24
 8005c48:	4619      	mov	r1, r3
 8005c4a:	480e      	ldr	r0, [pc, #56]	; (8005c84 <xTaskRemoveFromEventList+0xb8>)
 8005c4c:	f7fe fdb9 	bl	80047c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <xTaskRemoveFromEventList+0xbc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d905      	bls.n	8005c6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <xTaskRemoveFromEventList+0xc0>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e001      	b.n	8005c6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005c6e:	697b      	ldr	r3, [r7, #20]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	200005f8 	.word	0x200005f8
 8005c7c:	200005d8 	.word	0x200005d8
 8005c80:	200004d4 	.word	0x200004d4
 8005c84:	20000590 	.word	0x20000590
 8005c88:	200004d0 	.word	0x200004d0
 8005c8c:	200005e4 	.word	0x200005e4

08005c90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c98:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <vTaskInternalSetTimeOutState+0x24>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <vTaskInternalSetTimeOutState+0x28>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	605a      	str	r2, [r3, #4]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	200005e8 	.word	0x200005e8
 8005cb8:	200005d4 	.word	0x200005d4

08005cbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	613b      	str	r3, [r7, #16]
}
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	60fb      	str	r3, [r7, #12]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cfe:	f000 fc5d 	bl	80065bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d02:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <xTaskCheckForTimeOut+0xbc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d102      	bne.n	8005d22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	e023      	b.n	8005d6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <xTaskCheckForTimeOut+0xc0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d007      	beq.n	8005d3e <xTaskCheckForTimeOut+0x82>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	e015      	b.n	8005d6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d20b      	bcs.n	8005d60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ff9b 	bl	8005c90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	e004      	b.n	8005d6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d6a:	f000 fc57 	bl	800661c <vPortExitCritical>

	return xReturn;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200005d4 	.word	0x200005d4
 8005d7c:	200005e8 	.word	0x200005e8

08005d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d84:	4b03      	ldr	r3, [pc, #12]	; (8005d94 <vTaskMissedYield+0x14>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
}
 8005d8a:	bf00      	nop
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	200005e4 	.word	0x200005e4

08005d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005da0:	f000 f852 	bl	8005e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <prvIdleTask+0x28>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d9f9      	bls.n	8005da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dac:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <prvIdleTask+0x2c>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dbc:	e7f0      	b.n	8005da0 <prvIdleTask+0x8>
 8005dbe:	bf00      	nop
 8005dc0:	200004d4 	.word	0x200004d4
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	e00c      	b.n	8005dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4a12      	ldr	r2, [pc, #72]	; (8005e28 <prvInitialiseTaskLists+0x60>)
 8005de0:	4413      	add	r3, r2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe fcc2 	bl	800476c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3301      	adds	r3, #1
 8005dec:	607b      	str	r3, [r7, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b06      	cmp	r3, #6
 8005df2:	d9ef      	bls.n	8005dd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005df4:	480d      	ldr	r0, [pc, #52]	; (8005e2c <prvInitialiseTaskLists+0x64>)
 8005df6:	f7fe fcb9 	bl	800476c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dfa:	480d      	ldr	r0, [pc, #52]	; (8005e30 <prvInitialiseTaskLists+0x68>)
 8005dfc:	f7fe fcb6 	bl	800476c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e00:	480c      	ldr	r0, [pc, #48]	; (8005e34 <prvInitialiseTaskLists+0x6c>)
 8005e02:	f7fe fcb3 	bl	800476c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e06:	480c      	ldr	r0, [pc, #48]	; (8005e38 <prvInitialiseTaskLists+0x70>)
 8005e08:	f7fe fcb0 	bl	800476c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e0c:	480b      	ldr	r0, [pc, #44]	; (8005e3c <prvInitialiseTaskLists+0x74>)
 8005e0e:	f7fe fcad 	bl	800476c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <prvInitialiseTaskLists+0x78>)
 8005e14:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <prvInitialiseTaskLists+0x64>)
 8005e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <prvInitialiseTaskLists+0x7c>)
 8005e1a:	4a05      	ldr	r2, [pc, #20]	; (8005e30 <prvInitialiseTaskLists+0x68>)
 8005e1c:	601a      	str	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	200004d4 	.word	0x200004d4
 8005e2c:	20000560 	.word	0x20000560
 8005e30:	20000574 	.word	0x20000574
 8005e34:	20000590 	.word	0x20000590
 8005e38:	200005a4 	.word	0x200005a4
 8005e3c:	200005bc 	.word	0x200005bc
 8005e40:	20000588 	.word	0x20000588
 8005e44:	2000058c 	.word	0x2000058c

08005e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e4e:	e019      	b.n	8005e84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e50:	f000 fbb4 	bl	80065bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005e54:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <prvCheckTasksWaitingTermination+0x50>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe fd09 	bl	8004878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e66:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <prvCheckTasksWaitingTermination+0x54>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	4a0b      	ldr	r2, [pc, #44]	; (8005e9c <prvCheckTasksWaitingTermination+0x54>)
 8005e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <prvCheckTasksWaitingTermination+0x58>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <prvCheckTasksWaitingTermination+0x58>)
 8005e78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e7a:	f000 fbcf 	bl	800661c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f810 	bl	8005ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e84:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <prvCheckTasksWaitingTermination+0x58>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e1      	bne.n	8005e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200005a4 	.word	0x200005a4
 8005e9c:	200005d0 	.word	0x200005d0
 8005ea0:	200005b8 	.word	0x200005b8

08005ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fd42 	bl	8006944 <vPortFree>
				vPortFree( pxTCB );
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fd3f 	bl	8006944 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ec6:	e018      	b.n	8005efa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d103      	bne.n	8005eda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fd36 	bl	8006944 <vPortFree>
	}
 8005ed8:	e00f      	b.n	8005efa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d00a      	beq.n	8005efa <prvDeleteTCB+0x56>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	60fb      	str	r3, [r7, #12]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <prvDeleteTCB+0x54>
	}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <prvResetNextTaskUnblockTime+0x40>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <prvResetNextTaskUnblockTime+0x14>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <prvResetNextTaskUnblockTime+0x16>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <prvResetNextTaskUnblockTime+0x44>)
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f26:	e008      	b.n	8005f3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <prvResetNextTaskUnblockTime+0x40>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4a04      	ldr	r2, [pc, #16]	; (8005f48 <prvResetNextTaskUnblockTime+0x44>)
 8005f38:	6013      	str	r3, [r2, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr
 8005f44:	20000588 	.word	0x20000588
 8005f48:	200005f0 	.word	0x200005f0

08005f4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <xTaskGetSchedulerState+0x34>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	e008      	b.n	8005f72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f60:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <xTaskGetSchedulerState+0x38>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	607b      	str	r3, [r7, #4]
 8005f6c:	e001      	b.n	8005f72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f72:	687b      	ldr	r3, [r7, #4]
	}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	200005dc 	.word	0x200005dc
 8005f84:	200005f8 	.word	0x200005f8

08005f88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d06e      	beq.n	800607c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa2:	4b39      	ldr	r3, [pc, #228]	; (8006088 <xTaskPriorityInherit+0x100>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d25e      	bcs.n	800606a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	db06      	blt.n	8005fc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb4:	4b34      	ldr	r3, [pc, #208]	; (8006088 <xTaskPriorityInherit+0x100>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	f1c3 0207 	rsb	r2, r3, #7
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6959      	ldr	r1, [r3, #20]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4a2e      	ldr	r2, [pc, #184]	; (800608c <xTaskPriorityInherit+0x104>)
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4299      	cmp	r1, r3
 8005fd8:	d101      	bne.n	8005fde <xTaskPriorityInherit+0x56>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <xTaskPriorityInherit+0x58>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d03a      	beq.n	800605a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fe fc45 	bl	8004878 <uxListRemove>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d115      	bne.n	8006020 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4924      	ldr	r1, [pc, #144]	; (800608c <xTaskPriorityInherit+0x104>)
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <xTaskPriorityInherit+0x98>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	2201      	movs	r2, #1
 8006010:	fa02 f303 	lsl.w	r3, r2, r3
 8006014:	43da      	mvns	r2, r3
 8006016:	4b1e      	ldr	r3, [pc, #120]	; (8006090 <xTaskPriorityInherit+0x108>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4013      	ands	r3, r2
 800601c:	4a1c      	ldr	r2, [pc, #112]	; (8006090 <xTaskPriorityInherit+0x108>)
 800601e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006020:	4b19      	ldr	r3, [pc, #100]	; (8006088 <xTaskPriorityInherit+0x100>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	2201      	movs	r2, #1
 8006030:	409a      	lsls	r2, r3
 8006032:	4b17      	ldr	r3, [pc, #92]	; (8006090 <xTaskPriorityInherit+0x108>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4313      	orrs	r3, r2
 8006038:	4a15      	ldr	r2, [pc, #84]	; (8006090 <xTaskPriorityInherit+0x108>)
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4a10      	ldr	r2, [pc, #64]	; (800608c <xTaskPriorityInherit+0x104>)
 800604a:	441a      	add	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	3304      	adds	r3, #4
 8006050:	4619      	mov	r1, r3
 8006052:	4610      	mov	r0, r2
 8006054:	f7fe fbb5 	bl	80047c2 <vListInsertEnd>
 8006058:	e004      	b.n	8006064 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <xTaskPriorityInherit+0x100>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e008      	b.n	800607c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <xTaskPriorityInherit+0x100>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	429a      	cmp	r2, r3
 8006076:	d201      	bcs.n	800607c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006078:	2301      	movs	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800607c:	68fb      	ldr	r3, [r7, #12]
	}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	200004d0 	.word	0x200004d0
 800608c:	200004d4 	.word	0x200004d4
 8006090:	200005d8 	.word	0x200005d8

08006094 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d06e      	beq.n	8006188 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060aa:	4b3a      	ldr	r3, [pc, #232]	; (8006194 <xTaskPriorityDisinherit+0x100>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d00a      	beq.n	80060ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	60fb      	str	r3, [r7, #12]
}
 80060c6:	bf00      	nop
 80060c8:	e7fe      	b.n	80060c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60bb      	str	r3, [r7, #8]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ec:	1e5a      	subs	r2, r3, #1
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d044      	beq.n	8006188 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006102:	2b00      	cmp	r3, #0
 8006104:	d140      	bne.n	8006188 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3304      	adds	r3, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fbb4 	bl	8004878 <uxListRemove>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d115      	bne.n	8006142 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611a:	491f      	ldr	r1, [pc, #124]	; (8006198 <xTaskPriorityDisinherit+0x104>)
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xTaskPriorityDisinherit+0xae>
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	2201      	movs	r2, #1
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43da      	mvns	r2, r3
 8006138:	4b18      	ldr	r3, [pc, #96]	; (800619c <xTaskPriorityDisinherit+0x108>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4013      	ands	r3, r2
 800613e:	4a17      	ldr	r2, [pc, #92]	; (800619c <xTaskPriorityDisinherit+0x108>)
 8006140:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	f1c3 0207 	rsb	r2, r3, #7
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	2201      	movs	r2, #1
 800615c:	409a      	lsls	r2, r3
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <xTaskPriorityDisinherit+0x108>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4313      	orrs	r3, r2
 8006164:	4a0d      	ldr	r2, [pc, #52]	; (800619c <xTaskPriorityDisinherit+0x108>)
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4a08      	ldr	r2, [pc, #32]	; (8006198 <xTaskPriorityDisinherit+0x104>)
 8006176:	441a      	add	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	3304      	adds	r3, #4
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f7fe fb1f 	bl	80047c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006184:	2301      	movs	r3, #1
 8006186:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006188:	697b      	ldr	r3, [r7, #20]
	}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	200004d0 	.word	0x200004d0
 8006198:	200004d4 	.word	0x200004d4
 800619c:	200005d8 	.word	0x200005d8

080061a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80061ae:	2301      	movs	r3, #1
 80061b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8088 	beq.w	80062ca <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	60fb      	str	r3, [r7, #12]
}
 80061d4:	bf00      	nop
 80061d6:	e7fe      	b.n	80061d6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d902      	bls.n	80061e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	e002      	b.n	80061ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d068      	beq.n	80062ca <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d163      	bne.n	80062ca <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006202:	4b34      	ldr	r3, [pc, #208]	; (80062d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	429a      	cmp	r2, r3
 800620a:	d10a      	bne.n	8006222 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60bb      	str	r3, [r7, #8]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	db04      	blt.n	8006240 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f1c3 0207 	rsb	r2, r3, #7
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	6959      	ldr	r1, [r3, #20]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006250:	4413      	add	r3, r2
 8006252:	4299      	cmp	r1, r3
 8006254:	d101      	bne.n	800625a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800625a:	2300      	movs	r3, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d034      	beq.n	80062ca <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	3304      	adds	r3, #4
 8006264:	4618      	mov	r0, r3
 8006266:	f7fe fb07 	bl	8004878 <uxListRemove>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d115      	bne.n	800629c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	4918      	ldr	r1, [pc, #96]	; (80062d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	440b      	add	r3, r1
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	2201      	movs	r2, #1
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	43da      	mvns	r2, r3
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4013      	ands	r3, r2
 8006298:	4a10      	ldr	r2, [pc, #64]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800629a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	2201      	movs	r2, #1
 80062a2:	409a      	lsls	r2, r3
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	4a0c      	ldr	r2, [pc, #48]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80062bc:	441a      	add	r2, r3
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	4610      	mov	r0, r2
 80062c6:	f7fe fa7c 	bl	80047c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062ca:	bf00      	nop
 80062cc:	3720      	adds	r7, #32
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	200004d0 	.word	0x200004d0
 80062d8:	200004d4 	.word	0x200004d4
 80062dc:	200005d8 	.word	0x200005d8

080062e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80062e4:	4b07      	ldr	r3, [pc, #28]	; (8006304 <pvTaskIncrementMutexHeldCount+0x24>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <pvTaskIncrementMutexHeldCount+0x24>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062f2:	3201      	adds	r2, #1
 80062f4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80062f6:	4b03      	ldr	r3, [pc, #12]	; (8006304 <pvTaskIncrementMutexHeldCount+0x24>)
 80062f8:	681b      	ldr	r3, [r3, #0]
	}
 80062fa:	4618      	mov	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	200004d0 	.word	0x200004d0

08006308 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006312:	4b29      	ldr	r3, [pc, #164]	; (80063b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006318:	4b28      	ldr	r3, [pc, #160]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3304      	adds	r3, #4
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe faaa 	bl	8004878 <uxListRemove>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800632a:	4b24      	ldr	r3, [pc, #144]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	2201      	movs	r2, #1
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43da      	mvns	r2, r3
 8006338:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4013      	ands	r3, r2
 800633e:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006340:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d10a      	bne.n	8006360 <prvAddCurrentTaskToDelayedList+0x58>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006350:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	481a      	ldr	r0, [pc, #104]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800635a:	f7fe fa32 	bl	80047c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800635e:	e026      	b.n	80063ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006368:	4b14      	ldr	r3, [pc, #80]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	429a      	cmp	r2, r3
 8006376:	d209      	bcs.n	800638c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f7fe fa3f 	bl	8004808 <vListInsert>
}
 800638a:	e010      	b.n	80063ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3304      	adds	r3, #4
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f7fe fa35 	bl	8004808 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d202      	bcs.n	80063ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6013      	str	r3, [r2, #0]
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	200005d4 	.word	0x200005d4
 80063bc:	200004d0 	.word	0x200004d0
 80063c0:	200005d8 	.word	0x200005d8
 80063c4:	200005bc 	.word	0x200005bc
 80063c8:	2000058c 	.word	0x2000058c
 80063cc:	20000588 	.word	0x20000588
 80063d0:	200005f0 	.word	0x200005f0

080063d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3b04      	subs	r3, #4
 80063e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3b04      	subs	r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3b04      	subs	r3, #4
 8006402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006404:	4a08      	ldr	r2, [pc, #32]	; (8006428 <pxPortInitialiseStack+0x54>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3b14      	subs	r3, #20
 800640e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3b20      	subs	r3, #32
 800641a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800641c:	68fb      	ldr	r3, [r7, #12]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr
 8006428:	0800642d 	.word	0x0800642d

0800642c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006432:	2300      	movs	r3, #0
 8006434:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006436:	4b12      	ldr	r3, [pc, #72]	; (8006480 <prvTaskExitError+0x54>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d00a      	beq.n	8006456 <prvTaskExitError+0x2a>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60fb      	str	r3, [r7, #12]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <prvTaskExitError+0x28>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60bb      	str	r3, [r7, #8]
}
 8006468:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800646a:	bf00      	nop
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0fc      	beq.n	800646c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	2000000c 	.word	0x2000000c
	...

08006490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <pxCurrentTCBConst2>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800649a:	f380 8809 	msr	PSP, r0
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8811 	msr	BASEPRI, r0
 80064aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80064ae:	4770      	bx	lr

080064b0 <pxCurrentTCBConst2>:
 80064b0:	200004d0 	.word	0x200004d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80064b8:	4806      	ldr	r0, [pc, #24]	; (80064d4 <prvPortStartFirstTask+0x1c>)
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f380 8808 	msr	MSP, r0
 80064c2:	b662      	cpsie	i
 80064c4:	b661      	cpsie	f
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	df00      	svc	0
 80064d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064d2:	bf00      	nop
 80064d4:	e000ed08 	.word	0xe000ed08

080064d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064de:	4b32      	ldr	r3, [pc, #200]	; (80065a8 <xPortStartScheduler+0xd0>)
 80064e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006500:	b2da      	uxtb	r2, r3
 8006502:	4b2a      	ldr	r3, [pc, #168]	; (80065ac <xPortStartScheduler+0xd4>)
 8006504:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006506:	4b2a      	ldr	r3, [pc, #168]	; (80065b0 <xPortStartScheduler+0xd8>)
 8006508:	2207      	movs	r2, #7
 800650a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800650c:	e009      	b.n	8006522 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800650e:	4b28      	ldr	r3, [pc, #160]	; (80065b0 <xPortStartScheduler+0xd8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3b01      	subs	r3, #1
 8006514:	4a26      	ldr	r2, [pc, #152]	; (80065b0 <xPortStartScheduler+0xd8>)
 8006516:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b80      	cmp	r3, #128	; 0x80
 800652c:	d0ef      	beq.n	800650e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800652e:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <xPortStartScheduler+0xd8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1c3 0307 	rsb	r3, r3, #7
 8006536:	2b04      	cmp	r3, #4
 8006538:	d00a      	beq.n	8006550 <xPortStartScheduler+0x78>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60bb      	str	r3, [r7, #8]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006550:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <xPortStartScheduler+0xd8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	4a16      	ldr	r2, [pc, #88]	; (80065b0 <xPortStartScheduler+0xd8>)
 8006558:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <xPortStartScheduler+0xd8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006562:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <xPortStartScheduler+0xd8>)
 8006564:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800656e:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <xPortStartScheduler+0xdc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a10      	ldr	r2, [pc, #64]	; (80065b4 <xPortStartScheduler+0xdc>)
 8006574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006578:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800657a:	4b0e      	ldr	r3, [pc, #56]	; (80065b4 <xPortStartScheduler+0xdc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a0d      	ldr	r2, [pc, #52]	; (80065b4 <xPortStartScheduler+0xdc>)
 8006580:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006584:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006586:	f000 f8b9 	bl	80066fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <xPortStartScheduler+0xe0>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006590:	f7ff ff92 	bl	80064b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006594:	f7ff fa9c 	bl	8005ad0 <vTaskSwitchContext>
	prvTaskExitError();
 8006598:	f7ff ff48 	bl	800642c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	e000e400 	.word	0xe000e400
 80065ac:	200005fc 	.word	0x200005fc
 80065b0:	20000600 	.word	0x20000600
 80065b4:	e000ed20 	.word	0xe000ed20
 80065b8:	2000000c 	.word	0x2000000c

080065bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
}
 80065d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065d6:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <vPortEnterCritical+0x58>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3301      	adds	r3, #1
 80065dc:	4a0d      	ldr	r2, [pc, #52]	; (8006614 <vPortEnterCritical+0x58>)
 80065de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <vPortEnterCritical+0x58>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d10f      	bne.n	8006608 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e8:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <vPortEnterCritical+0x5c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <vPortEnterCritical+0x4c>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	603b      	str	r3, [r7, #0]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <vPortEnterCritical+0x4a>
	}
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	2000000c 	.word	0x2000000c
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006622:	4b11      	ldr	r3, [pc, #68]	; (8006668 <vPortExitCritical+0x4c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <vPortExitCritical+0x24>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	607b      	str	r3, [r7, #4]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006640:	4b09      	ldr	r3, [pc, #36]	; (8006668 <vPortExitCritical+0x4c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3b01      	subs	r3, #1
 8006646:	4a08      	ldr	r2, [pc, #32]	; (8006668 <vPortExitCritical+0x4c>)
 8006648:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <vPortExitCritical+0x4c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d105      	bne.n	800665e <vPortExitCritical+0x42>
 8006652:	2300      	movs	r3, #0
 8006654:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	f383 8811 	msr	BASEPRI, r3
}
 800665c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr
 8006668:	2000000c 	.word	0x2000000c
 800666c:	00000000 	.word	0x00000000

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006680:	6010      	str	r0, [r2, #0]
 8006682:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006686:	f04f 0050 	mov.w	r0, #80	; 0x50
 800668a:	f380 8811 	msr	BASEPRI, r0
 800668e:	f7ff fa1f 	bl	8005ad0 <vTaskSwitchContext>
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8811 	msr	BASEPRI, r0
 800669a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800669e:	6819      	ldr	r1, [r3, #0]
 80066a0:	6808      	ldr	r0, [r1, #0]
 80066a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066a6:	f380 8809 	msr	PSP, r0
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	4770      	bx	lr

080066b0 <pxCurrentTCBConst>:
 80066b0:	200004d0 	.word	0x200004d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
}
 80066d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066d2:	f7ff f93f 	bl	8005954 <xTaskIncrementTick>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <SysTick_Handler+0x40>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	2300      	movs	r3, #0
 80066e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f383 8811 	msr	BASEPRI, r3
}
 80066ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <vPortSetupTimerInterrupt+0x30>)
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006706:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <vPortSetupTimerInterrupt+0x34>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <vPortSetupTimerInterrupt+0x38>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a09      	ldr	r2, [pc, #36]	; (8006738 <vPortSetupTimerInterrupt+0x3c>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	099b      	lsrs	r3, r3, #6
 8006718:	4a08      	ldr	r2, [pc, #32]	; (800673c <vPortSetupTimerInterrupt+0x40>)
 800671a:	3b01      	subs	r3, #1
 800671c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800671e:	4b03      	ldr	r3, [pc, #12]	; (800672c <vPortSetupTimerInterrupt+0x30>)
 8006720:	2207      	movs	r2, #7
 8006722:	601a      	str	r2, [r3, #0]
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	e000e010 	.word	0xe000e010
 8006730:	e000e018 	.word	0xe000e018
 8006734:	20000000 	.word	0x20000000
 8006738:	10624dd3 	.word	0x10624dd3
 800673c:	e000e014 	.word	0xe000e014

08006740 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006746:	f3ef 8305 	mrs	r3, IPSR
 800674a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b0f      	cmp	r3, #15
 8006750:	d914      	bls.n	800677c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006752:	4a16      	ldr	r2, [pc, #88]	; (80067ac <vPortValidateInterruptPriority+0x6c>)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800675c:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <vPortValidateInterruptPriority+0x70>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	7afa      	ldrb	r2, [r7, #11]
 8006762:	429a      	cmp	r2, r3
 8006764:	d20a      	bcs.n	800677c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	607b      	str	r3, [r7, #4]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800677c:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <vPortValidateInterruptPriority+0x74>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <vPortValidateInterruptPriority+0x78>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d90a      	bls.n	80067a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	603b      	str	r3, [r7, #0]
}
 800679e:	bf00      	nop
 80067a0:	e7fe      	b.n	80067a0 <vPortValidateInterruptPriority+0x60>
	}
 80067a2:	bf00      	nop
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr
 80067ac:	e000e3f0 	.word	0xe000e3f0
 80067b0:	200005fc 	.word	0x200005fc
 80067b4:	e000ed0c 	.word	0xe000ed0c
 80067b8:	20000600 	.word	0x20000600

080067bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	; 0x28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067c4:	2300      	movs	r3, #0
 80067c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067c8:	f7ff f81a 	bl	8005800 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067cc:	4b58      	ldr	r3, [pc, #352]	; (8006930 <pvPortMalloc+0x174>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067d4:	f000 f910 	bl	80069f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067d8:	4b56      	ldr	r3, [pc, #344]	; (8006934 <pvPortMalloc+0x178>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f040 808e 	bne.w	8006902 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01d      	beq.n	8006828 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067ec:	2208      	movs	r2, #8
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4413      	add	r3, r2
 80067f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d014      	beq.n	8006828 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f023 0307 	bic.w	r3, r3, #7
 8006804:	3308      	adds	r3, #8
 8006806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <pvPortMalloc+0x6c>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	617b      	str	r3, [r7, #20]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d069      	beq.n	8006902 <pvPortMalloc+0x146>
 800682e:	4b42      	ldr	r3, [pc, #264]	; (8006938 <pvPortMalloc+0x17c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d864      	bhi.n	8006902 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006838:	4b40      	ldr	r3, [pc, #256]	; (800693c <pvPortMalloc+0x180>)
 800683a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800683c:	4b3f      	ldr	r3, [pc, #252]	; (800693c <pvPortMalloc+0x180>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006842:	e004      	b.n	800684e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d903      	bls.n	8006860 <pvPortMalloc+0xa4>
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f1      	bne.n	8006844 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006860:	4b33      	ldr	r3, [pc, #204]	; (8006930 <pvPortMalloc+0x174>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006866:	429a      	cmp	r2, r3
 8006868:	d04b      	beq.n	8006902 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2208      	movs	r2, #8
 8006870:	4413      	add	r3, r2
 8006872:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	2308      	movs	r3, #8
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	429a      	cmp	r2, r3
 800688a:	d91f      	bls.n	80068cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800688c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4413      	add	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <pvPortMalloc+0xf8>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	613b      	str	r3, [r7, #16]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	1ad2      	subs	r2, r2, r3
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068c6:	69b8      	ldr	r0, [r7, #24]
 80068c8:	f000 f8f8 	bl	8006abc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068cc:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <pvPortMalloc+0x17c>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	4a18      	ldr	r2, [pc, #96]	; (8006938 <pvPortMalloc+0x17c>)
 80068d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068da:	4b17      	ldr	r3, [pc, #92]	; (8006938 <pvPortMalloc+0x17c>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b18      	ldr	r3, [pc, #96]	; (8006940 <pvPortMalloc+0x184>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d203      	bcs.n	80068ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068e6:	4b14      	ldr	r3, [pc, #80]	; (8006938 <pvPortMalloc+0x17c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <pvPortMalloc+0x184>)
 80068ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	4b10      	ldr	r3, [pc, #64]	; (8006934 <pvPortMalloc+0x178>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006902:	f7fe ff8b 	bl	800581c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <pvPortMalloc+0x16a>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60fb      	str	r3, [r7, #12]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <pvPortMalloc+0x168>
	return pvReturn;
 8006926:	69fb      	ldr	r3, [r7, #28]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3728      	adds	r7, #40	; 0x28
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	2000120c 	.word	0x2000120c
 8006934:	20001218 	.word	0x20001218
 8006938:	20001210 	.word	0x20001210
 800693c:	20001204 	.word	0x20001204
 8006940:	20001214 	.word	0x20001214

08006944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d048      	beq.n	80069e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006956:	2308      	movs	r3, #8
 8006958:	425b      	negs	r3, r3
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4413      	add	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <vPortFree+0xac>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4013      	ands	r3, r2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <vPortFree+0x44>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	60fb      	str	r3, [r7, #12]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <vPortFree+0x62>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60bb      	str	r3, [r7, #8]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <vPortFree+0xac>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d019      	beq.n	80069e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d115      	bne.n	80069e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <vPortFree+0xac>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	43db      	mvns	r3, r3
 80069c6:	401a      	ands	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069cc:	f7fe ff18 	bl	8005800 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <vPortFree+0xb0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4413      	add	r3, r2
 80069da:	4a06      	ldr	r2, [pc, #24]	; (80069f4 <vPortFree+0xb0>)
 80069dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069de:	6938      	ldr	r0, [r7, #16]
 80069e0:	f000 f86c 	bl	8006abc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069e4:	f7fe ff1a 	bl	800581c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069e8:	bf00      	nop
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20001218 	.word	0x20001218
 80069f4:	20001210 	.word	0x20001210

080069f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a04:	4b27      	ldr	r3, [pc, #156]	; (8006aa4 <prvHeapInit+0xac>)
 8006a06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00c      	beq.n	8006a2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3307      	adds	r3, #7
 8006a16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0307 	bic.w	r3, r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	4a1f      	ldr	r2, [pc, #124]	; (8006aa4 <prvHeapInit+0xac>)
 8006a28:	4413      	add	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a30:	4a1d      	ldr	r2, [pc, #116]	; (8006aa8 <prvHeapInit+0xb0>)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a36:	4b1c      	ldr	r3, [pc, #112]	; (8006aa8 <prvHeapInit+0xb0>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4413      	add	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a44:	2208      	movs	r2, #8
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0307 	bic.w	r3, r3, #7
 8006a52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4a15      	ldr	r2, [pc, #84]	; (8006aac <prvHeapInit+0xb4>)
 8006a58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a5a:	4b14      	ldr	r3, [pc, #80]	; (8006aac <prvHeapInit+0xb4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a62:	4b12      	ldr	r3, [pc, #72]	; (8006aac <prvHeapInit+0xb4>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	1ad2      	subs	r2, r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a78:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <prvHeapInit+0xb4>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	4a0a      	ldr	r2, [pc, #40]	; (8006ab0 <prvHeapInit+0xb8>)
 8006a86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <prvHeapInit+0xbc>)
 8006a8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a90:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <prvHeapInit+0xc0>)
 8006a92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a96:	601a      	str	r2, [r3, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000604 	.word	0x20000604
 8006aa8:	20001204 	.word	0x20001204
 8006aac:	2000120c 	.word	0x2000120c
 8006ab0:	20001214 	.word	0x20001214
 8006ab4:	20001210 	.word	0x20001210
 8006ab8:	20001218 	.word	0x20001218

08006abc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ac4:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <prvInsertBlockIntoFreeList+0xa8>)
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e002      	b.n	8006ad0 <prvInsertBlockIntoFreeList+0x14>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d8f7      	bhi.n	8006aca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d108      	bne.n	8006afe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	441a      	add	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	441a      	add	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d118      	bne.n	8006b44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <prvInsertBlockIntoFreeList+0xac>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d00d      	beq.n	8006b3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	441a      	add	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	e008      	b.n	8006b4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <prvInsertBlockIntoFreeList+0xac>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e003      	b.n	8006b4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d002      	beq.n	8006b5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b5a:	bf00      	nop
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr
 8006b64:	20001204 	.word	0x20001204
 8006b68:	2000120c 	.word	0x2000120c

08006b6c <atoi>:
 8006b6c:	220a      	movs	r2, #10
 8006b6e:	2100      	movs	r1, #0
 8006b70:	f000 b8d6 	b.w	8006d20 <strtol>

08006b74 <__errno>:
 8006b74:	4b01      	ldr	r3, [pc, #4]	; (8006b7c <__errno+0x8>)
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000010 	.word	0x20000010

08006b80 <__libc_init_array>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	2600      	movs	r6, #0
 8006b84:	4d0c      	ldr	r5, [pc, #48]	; (8006bb8 <__libc_init_array+0x38>)
 8006b86:	4c0d      	ldr	r4, [pc, #52]	; (8006bbc <__libc_init_array+0x3c>)
 8006b88:	1b64      	subs	r4, r4, r5
 8006b8a:	10a4      	asrs	r4, r4, #2
 8006b8c:	42a6      	cmp	r6, r4
 8006b8e:	d109      	bne.n	8006ba4 <__libc_init_array+0x24>
 8006b90:	f000 f912 	bl	8006db8 <_init>
 8006b94:	2600      	movs	r6, #0
 8006b96:	4d0a      	ldr	r5, [pc, #40]	; (8006bc0 <__libc_init_array+0x40>)
 8006b98:	4c0a      	ldr	r4, [pc, #40]	; (8006bc4 <__libc_init_array+0x44>)
 8006b9a:	1b64      	subs	r4, r4, r5
 8006b9c:	10a4      	asrs	r4, r4, #2
 8006b9e:	42a6      	cmp	r6, r4
 8006ba0:	d105      	bne.n	8006bae <__libc_init_array+0x2e>
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba8:	4798      	blx	r3
 8006baa:	3601      	adds	r6, #1
 8006bac:	e7ee      	b.n	8006b8c <__libc_init_array+0xc>
 8006bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb2:	4798      	blx	r3
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	e7f2      	b.n	8006b9e <__libc_init_array+0x1e>
 8006bb8:	08006ff4 	.word	0x08006ff4
 8006bbc:	08006ff4 	.word	0x08006ff4
 8006bc0:	08006ff4 	.word	0x08006ff4
 8006bc4:	08006ff8 	.word	0x08006ff8

08006bc8 <__itoa>:
 8006bc8:	1e93      	subs	r3, r2, #2
 8006bca:	2b22      	cmp	r3, #34	; 0x22
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	460c      	mov	r4, r1
 8006bd0:	d904      	bls.n	8006bdc <__itoa+0x14>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	461c      	mov	r4, r3
 8006bd6:	700b      	strb	r3, [r1, #0]
 8006bd8:	4620      	mov	r0, r4
 8006bda:	bd10      	pop	{r4, pc}
 8006bdc:	2a0a      	cmp	r2, #10
 8006bde:	d109      	bne.n	8006bf4 <__itoa+0x2c>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	da07      	bge.n	8006bf4 <__itoa+0x2c>
 8006be4:	232d      	movs	r3, #45	; 0x2d
 8006be6:	700b      	strb	r3, [r1, #0]
 8006be8:	2101      	movs	r1, #1
 8006bea:	4240      	negs	r0, r0
 8006bec:	4421      	add	r1, r4
 8006bee:	f000 f8a1 	bl	8006d34 <__utoa>
 8006bf2:	e7f1      	b.n	8006bd8 <__itoa+0x10>
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	e7f9      	b.n	8006bec <__itoa+0x24>

08006bf8 <itoa>:
 8006bf8:	f7ff bfe6 	b.w	8006bc8 <__itoa>

08006bfc <memcpy>:
 8006bfc:	440a      	add	r2, r1
 8006bfe:	4291      	cmp	r1, r2
 8006c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c04:	d100      	bne.n	8006c08 <memcpy+0xc>
 8006c06:	4770      	bx	lr
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c0e:	4291      	cmp	r1, r2
 8006c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c14:	d1f9      	bne.n	8006c0a <memcpy+0xe>
 8006c16:	bd10      	pop	{r4, pc}

08006c18 <memset>:
 8006c18:	4603      	mov	r3, r0
 8006c1a:	4402      	add	r2, r0
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d100      	bne.n	8006c22 <memset+0xa>
 8006c20:	4770      	bx	lr
 8006c22:	f803 1b01 	strb.w	r1, [r3], #1
 8006c26:	e7f9      	b.n	8006c1c <memset+0x4>

08006c28 <_strtol_l.constprop.0>:
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2e:	4680      	mov	r8, r0
 8006c30:	d001      	beq.n	8006c36 <_strtol_l.constprop.0+0xe>
 8006c32:	2b24      	cmp	r3, #36	; 0x24
 8006c34:	d906      	bls.n	8006c44 <_strtol_l.constprop.0+0x1c>
 8006c36:	f7ff ff9d 	bl	8006b74 <__errno>
 8006c3a:	2316      	movs	r3, #22
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	2000      	movs	r0, #0
 8006c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c44:	460d      	mov	r5, r1
 8006c46:	4f35      	ldr	r7, [pc, #212]	; (8006d1c <_strtol_l.constprop.0+0xf4>)
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c4e:	5de6      	ldrb	r6, [r4, r7]
 8006c50:	f016 0608 	ands.w	r6, r6, #8
 8006c54:	d1f8      	bne.n	8006c48 <_strtol_l.constprop.0+0x20>
 8006c56:	2c2d      	cmp	r4, #45	; 0x2d
 8006c58:	d12f      	bne.n	8006cba <_strtol_l.constprop.0+0x92>
 8006c5a:	2601      	movs	r6, #1
 8006c5c:	782c      	ldrb	r4, [r5, #0]
 8006c5e:	1c85      	adds	r5, r0, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d057      	beq.n	8006d14 <_strtol_l.constprop.0+0xec>
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d109      	bne.n	8006c7c <_strtol_l.constprop.0+0x54>
 8006c68:	2c30      	cmp	r4, #48	; 0x30
 8006c6a:	d107      	bne.n	8006c7c <_strtol_l.constprop.0+0x54>
 8006c6c:	7828      	ldrb	r0, [r5, #0]
 8006c6e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006c72:	2858      	cmp	r0, #88	; 0x58
 8006c74:	d149      	bne.n	8006d0a <_strtol_l.constprop.0+0xe2>
 8006c76:	2310      	movs	r3, #16
 8006c78:	786c      	ldrb	r4, [r5, #1]
 8006c7a:	3502      	adds	r5, #2
 8006c7c:	2700      	movs	r7, #0
 8006c7e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006c82:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006c86:	fbbe f9f3 	udiv	r9, lr, r3
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	fb03 ea19 	mls	sl, r3, r9, lr
 8006c90:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006c94:	f1bc 0f09 	cmp.w	ip, #9
 8006c98:	d814      	bhi.n	8006cc4 <_strtol_l.constprop.0+0x9c>
 8006c9a:	4664      	mov	r4, ip
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	dd22      	ble.n	8006ce6 <_strtol_l.constprop.0+0xbe>
 8006ca0:	2f00      	cmp	r7, #0
 8006ca2:	db1d      	blt.n	8006ce0 <_strtol_l.constprop.0+0xb8>
 8006ca4:	4581      	cmp	r9, r0
 8006ca6:	d31b      	bcc.n	8006ce0 <_strtol_l.constprop.0+0xb8>
 8006ca8:	d101      	bne.n	8006cae <_strtol_l.constprop.0+0x86>
 8006caa:	45a2      	cmp	sl, r4
 8006cac:	db18      	blt.n	8006ce0 <_strtol_l.constprop.0+0xb8>
 8006cae:	2701      	movs	r7, #1
 8006cb0:	fb00 4003 	mla	r0, r0, r3, r4
 8006cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cb8:	e7ea      	b.n	8006c90 <_strtol_l.constprop.0+0x68>
 8006cba:	2c2b      	cmp	r4, #43	; 0x2b
 8006cbc:	bf04      	itt	eq
 8006cbe:	782c      	ldrbeq	r4, [r5, #0]
 8006cc0:	1c85      	addeq	r5, r0, #2
 8006cc2:	e7cd      	b.n	8006c60 <_strtol_l.constprop.0+0x38>
 8006cc4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006cc8:	f1bc 0f19 	cmp.w	ip, #25
 8006ccc:	d801      	bhi.n	8006cd2 <_strtol_l.constprop.0+0xaa>
 8006cce:	3c37      	subs	r4, #55	; 0x37
 8006cd0:	e7e4      	b.n	8006c9c <_strtol_l.constprop.0+0x74>
 8006cd2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006cd6:	f1bc 0f19 	cmp.w	ip, #25
 8006cda:	d804      	bhi.n	8006ce6 <_strtol_l.constprop.0+0xbe>
 8006cdc:	3c57      	subs	r4, #87	; 0x57
 8006cde:	e7dd      	b.n	8006c9c <_strtol_l.constprop.0+0x74>
 8006ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ce4:	e7e6      	b.n	8006cb4 <_strtol_l.constprop.0+0x8c>
 8006ce6:	2f00      	cmp	r7, #0
 8006ce8:	da07      	bge.n	8006cfa <_strtol_l.constprop.0+0xd2>
 8006cea:	2322      	movs	r3, #34	; 0x22
 8006cec:	4670      	mov	r0, lr
 8006cee:	f8c8 3000 	str.w	r3, [r8]
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	d0a4      	beq.n	8006c40 <_strtol_l.constprop.0+0x18>
 8006cf6:	1e69      	subs	r1, r5, #1
 8006cf8:	e005      	b.n	8006d06 <_strtol_l.constprop.0+0xde>
 8006cfa:	b106      	cbz	r6, 8006cfe <_strtol_l.constprop.0+0xd6>
 8006cfc:	4240      	negs	r0, r0
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	d09e      	beq.n	8006c40 <_strtol_l.constprop.0+0x18>
 8006d02:	2f00      	cmp	r7, #0
 8006d04:	d1f7      	bne.n	8006cf6 <_strtol_l.constprop.0+0xce>
 8006d06:	6011      	str	r1, [r2, #0]
 8006d08:	e79a      	b.n	8006c40 <_strtol_l.constprop.0+0x18>
 8006d0a:	2430      	movs	r4, #48	; 0x30
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1b5      	bne.n	8006c7c <_strtol_l.constprop.0+0x54>
 8006d10:	2308      	movs	r3, #8
 8006d12:	e7b3      	b.n	8006c7c <_strtol_l.constprop.0+0x54>
 8006d14:	2c30      	cmp	r4, #48	; 0x30
 8006d16:	d0a9      	beq.n	8006c6c <_strtol_l.constprop.0+0x44>
 8006d18:	230a      	movs	r3, #10
 8006d1a:	e7af      	b.n	8006c7c <_strtol_l.constprop.0+0x54>
 8006d1c:	08006ef2 	.word	0x08006ef2

08006d20 <strtol>:
 8006d20:	4613      	mov	r3, r2
 8006d22:	460a      	mov	r2, r1
 8006d24:	4601      	mov	r1, r0
 8006d26:	4802      	ldr	r0, [pc, #8]	; (8006d30 <strtol+0x10>)
 8006d28:	6800      	ldr	r0, [r0, #0]
 8006d2a:	f7ff bf7d 	b.w	8006c28 <_strtol_l.constprop.0>
 8006d2e:	bf00      	nop
 8006d30:	20000010 	.word	0x20000010

08006d34 <__utoa>:
 8006d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d36:	b08b      	sub	sp, #44	; 0x2c
 8006d38:	4605      	mov	r5, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	466e      	mov	r6, sp
 8006d3e:	4c1d      	ldr	r4, [pc, #116]	; (8006db4 <__utoa+0x80>)
 8006d40:	f104 0c20 	add.w	ip, r4, #32
 8006d44:	4637      	mov	r7, r6
 8006d46:	6820      	ldr	r0, [r4, #0]
 8006d48:	6861      	ldr	r1, [r4, #4]
 8006d4a:	3408      	adds	r4, #8
 8006d4c:	c703      	stmia	r7!, {r0, r1}
 8006d4e:	4564      	cmp	r4, ip
 8006d50:	463e      	mov	r6, r7
 8006d52:	d1f7      	bne.n	8006d44 <__utoa+0x10>
 8006d54:	7921      	ldrb	r1, [r4, #4]
 8006d56:	6820      	ldr	r0, [r4, #0]
 8006d58:	7139      	strb	r1, [r7, #4]
 8006d5a:	1e91      	subs	r1, r2, #2
 8006d5c:	2922      	cmp	r1, #34	; 0x22
 8006d5e:	6038      	str	r0, [r7, #0]
 8006d60:	f04f 0100 	mov.w	r1, #0
 8006d64:	d904      	bls.n	8006d70 <__utoa+0x3c>
 8006d66:	7019      	strb	r1, [r3, #0]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	b00b      	add	sp, #44	; 0x2c
 8006d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d70:	1e58      	subs	r0, r3, #1
 8006d72:	4684      	mov	ip, r0
 8006d74:	fbb5 f7f2 	udiv	r7, r5, r2
 8006d78:	fb02 5617 	mls	r6, r2, r7, r5
 8006d7c:	3628      	adds	r6, #40	; 0x28
 8006d7e:	446e      	add	r6, sp
 8006d80:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006d84:	460c      	mov	r4, r1
 8006d86:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006d8a:	462e      	mov	r6, r5
 8006d8c:	42b2      	cmp	r2, r6
 8006d8e:	463d      	mov	r5, r7
 8006d90:	f101 0101 	add.w	r1, r1, #1
 8006d94:	d9ee      	bls.n	8006d74 <__utoa+0x40>
 8006d96:	2200      	movs	r2, #0
 8006d98:	545a      	strb	r2, [r3, r1]
 8006d9a:	1919      	adds	r1, r3, r4
 8006d9c:	1aa5      	subs	r5, r4, r2
 8006d9e:	42aa      	cmp	r2, r5
 8006da0:	dae3      	bge.n	8006d6a <__utoa+0x36>
 8006da2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006da6:	780e      	ldrb	r6, [r1, #0]
 8006da8:	3201      	adds	r2, #1
 8006daa:	7006      	strb	r6, [r0, #0]
 8006dac:	f801 5901 	strb.w	r5, [r1], #-1
 8006db0:	e7f4      	b.n	8006d9c <__utoa+0x68>
 8006db2:	bf00      	nop
 8006db4:	08006ecc 	.word	0x08006ecc

08006db8 <_init>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr

08006dc4 <_fini>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	bf00      	nop
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr
