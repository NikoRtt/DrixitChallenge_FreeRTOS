
DrixitChallenge_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009280  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800966c  0800966c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800966c  0800966c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800966c  0800966c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800966c  0800966c  0001966c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009670  08009670  00019670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011dc  20000074  080096e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001250  080096e8  00021250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182ad  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003814  00000000  00000000  0003834a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0003bb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  0003d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae53  00000000  00000000  0003e970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a174  00000000  00000000  000597c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a27  00000000  00000000  00073937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c35e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006754  00000000  00000000  0010c3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08009378 	.word	0x08009378

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08009378 	.word	0x08009378

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_d2f>:
 8000630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000638:	bf24      	itt	cs
 800063a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800063e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000642:	d90d      	bls.n	8000660 <__aeabi_d2f+0x30>
 8000644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800064c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000658:	bf08      	it	eq
 800065a:	f020 0001 	biceq.w	r0, r0, #1
 800065e:	4770      	bx	lr
 8000660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000664:	d121      	bne.n	80006aa <__aeabi_d2f+0x7a>
 8000666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800066a:	bfbc      	itt	lt
 800066c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000670:	4770      	bxlt	lr
 8000672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000676:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800067a:	f1c2 0218 	rsb	r2, r2, #24
 800067e:	f1c2 0c20 	rsb	ip, r2, #32
 8000682:	fa10 f30c 	lsls.w	r3, r0, ip
 8000686:	fa20 f002 	lsr.w	r0, r0, r2
 800068a:	bf18      	it	ne
 800068c:	f040 0001 	orrne.w	r0, r0, #1
 8000690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000698:	fa03 fc0c 	lsl.w	ip, r3, ip
 800069c:	ea40 000c 	orr.w	r0, r0, ip
 80006a0:	fa23 f302 	lsr.w	r3, r3, r2
 80006a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a8:	e7cc      	b.n	8000644 <__aeabi_d2f+0x14>
 80006aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006ae:	d107      	bne.n	80006c0 <__aeabi_d2f+0x90>
 80006b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006b4:	bf1e      	ittt	ne
 80006b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006be:	4770      	bxne	lr
 80006c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <__aeabi_frsub>:
 80006d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006d4:	e002      	b.n	80006dc <__addsf3>
 80006d6:	bf00      	nop

080006d8 <__aeabi_fsub>:
 80006d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006dc <__addsf3>:
 80006dc:	0042      	lsls	r2, r0, #1
 80006de:	bf1f      	itttt	ne
 80006e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006e4:	ea92 0f03 	teqne	r2, r3
 80006e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f0:	d06a      	beq.n	80007c8 <__addsf3+0xec>
 80006f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006fa:	bfc1      	itttt	gt
 80006fc:	18d2      	addgt	r2, r2, r3
 80006fe:	4041      	eorgt	r1, r0
 8000700:	4048      	eorgt	r0, r1
 8000702:	4041      	eorgt	r1, r0
 8000704:	bfb8      	it	lt
 8000706:	425b      	neglt	r3, r3
 8000708:	2b19      	cmp	r3, #25
 800070a:	bf88      	it	hi
 800070c:	4770      	bxhi	lr
 800070e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000712:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000716:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800071a:	bf18      	it	ne
 800071c:	4240      	negne	r0, r0
 800071e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000722:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000726:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800072a:	bf18      	it	ne
 800072c:	4249      	negne	r1, r1
 800072e:	ea92 0f03 	teq	r2, r3
 8000732:	d03f      	beq.n	80007b4 <__addsf3+0xd8>
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	fa41 fc03 	asr.w	ip, r1, r3
 800073c:	eb10 000c 	adds.w	r0, r0, ip
 8000740:	f1c3 0320 	rsb	r3, r3, #32
 8000744:	fa01 f103 	lsl.w	r1, r1, r3
 8000748:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800074c:	d502      	bpl.n	8000754 <__addsf3+0x78>
 800074e:	4249      	negs	r1, r1
 8000750:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000754:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000758:	d313      	bcc.n	8000782 <__addsf3+0xa6>
 800075a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075e:	d306      	bcc.n	800076e <__addsf3+0x92>
 8000760:	0840      	lsrs	r0, r0, #1
 8000762:	ea4f 0131 	mov.w	r1, r1, rrx
 8000766:	f102 0201 	add.w	r2, r2, #1
 800076a:	2afe      	cmp	r2, #254	; 0xfe
 800076c:	d251      	bcs.n	8000812 <__addsf3+0x136>
 800076e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000772:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000776:	bf08      	it	eq
 8000778:	f020 0001 	biceq.w	r0, r0, #1
 800077c:	ea40 0003 	orr.w	r0, r0, r3
 8000780:	4770      	bx	lr
 8000782:	0049      	lsls	r1, r1, #1
 8000784:	eb40 0000 	adc.w	r0, r0, r0
 8000788:	3a01      	subs	r2, #1
 800078a:	bf28      	it	cs
 800078c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000790:	d2ed      	bcs.n	800076e <__addsf3+0x92>
 8000792:	fab0 fc80 	clz	ip, r0
 8000796:	f1ac 0c08 	sub.w	ip, ip, #8
 800079a:	ebb2 020c 	subs.w	r2, r2, ip
 800079e:	fa00 f00c 	lsl.w	r0, r0, ip
 80007a2:	bfaa      	itet	ge
 80007a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007a8:	4252      	neglt	r2, r2
 80007aa:	4318      	orrge	r0, r3
 80007ac:	bfbc      	itt	lt
 80007ae:	40d0      	lsrlt	r0, r2
 80007b0:	4318      	orrlt	r0, r3
 80007b2:	4770      	bx	lr
 80007b4:	f092 0f00 	teq	r2, #0
 80007b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007bc:	bf06      	itte	eq
 80007be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007c2:	3201      	addeq	r2, #1
 80007c4:	3b01      	subne	r3, #1
 80007c6:	e7b5      	b.n	8000734 <__addsf3+0x58>
 80007c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007d0:	bf18      	it	ne
 80007d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007d6:	d021      	beq.n	800081c <__addsf3+0x140>
 80007d8:	ea92 0f03 	teq	r2, r3
 80007dc:	d004      	beq.n	80007e8 <__addsf3+0x10c>
 80007de:	f092 0f00 	teq	r2, #0
 80007e2:	bf08      	it	eq
 80007e4:	4608      	moveq	r0, r1
 80007e6:	4770      	bx	lr
 80007e8:	ea90 0f01 	teq	r0, r1
 80007ec:	bf1c      	itt	ne
 80007ee:	2000      	movne	r0, #0
 80007f0:	4770      	bxne	lr
 80007f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007f6:	d104      	bne.n	8000802 <__addsf3+0x126>
 80007f8:	0040      	lsls	r0, r0, #1
 80007fa:	bf28      	it	cs
 80007fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000800:	4770      	bx	lr
 8000802:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000806:	bf3c      	itt	cc
 8000808:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800080c:	4770      	bxcc	lr
 800080e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000812:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000816:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081a:	4770      	bx	lr
 800081c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000820:	bf16      	itet	ne
 8000822:	4608      	movne	r0, r1
 8000824:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000828:	4601      	movne	r1, r0
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	bf06      	itte	eq
 800082e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000832:	ea90 0f01 	teqeq	r0, r1
 8000836:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800083a:	4770      	bx	lr

0800083c <__aeabi_ui2f>:
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	e004      	b.n	800084c <__aeabi_i2f+0x8>
 8000842:	bf00      	nop

08000844 <__aeabi_i2f>:
 8000844:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000848:	bf48      	it	mi
 800084a:	4240      	negmi	r0, r0
 800084c:	ea5f 0c00 	movs.w	ip, r0
 8000850:	bf08      	it	eq
 8000852:	4770      	bxeq	lr
 8000854:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000858:	4601      	mov	r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	e01c      	b.n	800089a <__aeabi_l2f+0x2a>

08000860 <__aeabi_ul2f>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e00a      	b.n	8000884 <__aeabi_l2f+0x14>
 800086e:	bf00      	nop

08000870 <__aeabi_l2f>:
 8000870:	ea50 0201 	orrs.w	r2, r0, r1
 8000874:	bf08      	it	eq
 8000876:	4770      	bxeq	lr
 8000878:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800087c:	d502      	bpl.n	8000884 <__aeabi_l2f+0x14>
 800087e:	4240      	negs	r0, r0
 8000880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000884:	ea5f 0c01 	movs.w	ip, r1
 8000888:	bf02      	ittt	eq
 800088a:	4684      	moveq	ip, r0
 800088c:	4601      	moveq	r1, r0
 800088e:	2000      	moveq	r0, #0
 8000890:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000894:	bf08      	it	eq
 8000896:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800089a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800089e:	fabc f28c 	clz	r2, ip
 80008a2:	3a08      	subs	r2, #8
 80008a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008a8:	db10      	blt.n	80008cc <__aeabi_l2f+0x5c>
 80008aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80008ae:	4463      	add	r3, ip
 80008b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80008b4:	f1c2 0220 	rsb	r2, r2, #32
 80008b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008bc:	fa20 f202 	lsr.w	r2, r0, r2
 80008c0:	eb43 0002 	adc.w	r0, r3, r2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f102 0220 	add.w	r2, r2, #32
 80008d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80008d4:	f1c2 0220 	rsb	r2, r2, #32
 80008d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008dc:	fa21 f202 	lsr.w	r2, r1, r2
 80008e0:	eb43 0002 	adc.w	r0, r3, r2
 80008e4:	bf08      	it	eq
 80008e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008ea:	4770      	bx	lr

080008ec <__gesf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpsf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__lesf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpsf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpsf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000908:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800090c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000910:	bf18      	it	ne
 8000912:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000916:	d011      	beq.n	800093c <__cmpsf2+0x40>
 8000918:	b001      	add	sp, #4
 800091a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800091e:	bf18      	it	ne
 8000920:	ea90 0f01 	teqne	r0, r1
 8000924:	bf58      	it	pl
 8000926:	ebb2 0003 	subspl.w	r0, r2, r3
 800092a:	bf88      	it	hi
 800092c:	17c8      	asrhi	r0, r1, #31
 800092e:	bf38      	it	cc
 8000930:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000934:	bf18      	it	ne
 8000936:	f040 0001 	orrne.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000940:	d102      	bne.n	8000948 <__cmpsf2+0x4c>
 8000942:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000946:	d105      	bne.n	8000954 <__cmpsf2+0x58>
 8000948:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800094c:	d1e4      	bne.n	8000918 <__cmpsf2+0x1c>
 800094e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000952:	d0e1      	beq.n	8000918 <__cmpsf2+0x1c>
 8000954:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_cfrcmple>:
 800095c:	4684      	mov	ip, r0
 800095e:	4608      	mov	r0, r1
 8000960:	4661      	mov	r1, ip
 8000962:	e7ff      	b.n	8000964 <__aeabi_cfcmpeq>

08000964 <__aeabi_cfcmpeq>:
 8000964:	b50f      	push	{r0, r1, r2, r3, lr}
 8000966:	f7ff ffc9 	bl	80008fc <__cmpsf2>
 800096a:	2800      	cmp	r0, #0
 800096c:	bf48      	it	mi
 800096e:	f110 0f00 	cmnmi.w	r0, #0
 8000972:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000974 <__aeabi_fcmpeq>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff fff4 	bl	8000964 <__aeabi_cfcmpeq>
 800097c:	bf0c      	ite	eq
 800097e:	2001      	moveq	r0, #1
 8000980:	2000      	movne	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_fcmplt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffea 	bl	8000964 <__aeabi_cfcmpeq>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_fcmple>:
 800099c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a0:	f7ff ffe0 	bl	8000964 <__aeabi_cfcmpeq>
 80009a4:	bf94      	ite	ls
 80009a6:	2001      	movls	r0, #1
 80009a8:	2000      	movhi	r0, #0
 80009aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ae:	bf00      	nop

080009b0 <__aeabi_fcmpge>:
 80009b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b4:	f7ff ffd2 	bl	800095c <__aeabi_cfrcmple>
 80009b8:	bf94      	ite	ls
 80009ba:	2001      	movls	r0, #1
 80009bc:	2000      	movhi	r0, #0
 80009be:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c2:	bf00      	nop

080009c4 <__aeabi_fcmpgt>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff ffc8 	bl	800095c <__aeabi_cfrcmple>
 80009cc:	bf34      	ite	cc
 80009ce:	2001      	movcc	r0, #1
 80009d0:	2000      	movcs	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_f2iz>:
 80009d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009e0:	d30f      	bcc.n	8000a02 <__aeabi_f2iz+0x2a>
 80009e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ea:	d90d      	bls.n	8000a08 <__aeabi_f2iz+0x30>
 80009ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f8:	fa23 f002 	lsr.w	r0, r3, r2
 80009fc:	bf18      	it	ne
 80009fe:	4240      	negne	r0, r0
 8000a00:	4770      	bx	lr
 8000a02:	f04f 0000 	mov.w	r0, #0
 8000a06:	4770      	bx	lr
 8000a08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a0c:	d101      	bne.n	8000a12 <__aeabi_f2iz+0x3a>
 8000a0e:	0242      	lsls	r2, r0, #9
 8000a10:	d105      	bne.n	8000a1e <__aeabi_f2iz+0x46>
 8000a12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	bf08      	it	eq
 8000a18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0000 	mov.w	r0, #0
 8000a22:	4770      	bx	lr

08000a24 <lis3mdl_Init>:

/*==================[internal functions definition]==========================*/

/*==================[Initialization functions definition]====================*/

uint8_t lis3mdl_Init ( LIS3MDL_Data_t* dev, I2C_HandleTypeDef *i2cHandle ){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]

	// Set the struct parameters first

	dev->i2cHandle = i2cHandle;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	601a      	str	r2, [r3, #0]
	dev->mag_x = 0.0f;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
	dev->mag_y = 0.0f;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f04f 0200 	mov.w	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
	dev->mag_z = 0.0f;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f04f 0200 	mov.w	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
	dev->temp = 0.0f;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]

	// Variable to accumulate errors to determine how many transaction errors we have.

	uint8_t accumulatedErrors = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]
	uint8_t regValue;
	HAL_StatusTypeDef status;

	// Checking the device ID

	status = lis3mdl_ReadRegister(dev, LIS3MDL_REG_WHO_AM_I, &regValue);
 8000a58:	f107 030d 	add.w	r3, r7, #13
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	210f      	movs	r1, #15
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f94c 	bl	8000cfe <lis3mdl_ReadRegister>
 8000a66:	4603      	mov	r3, r0
 8000a68:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf14      	ite	ne
 8000a70:	2301      	movne	r3, #1
 8000a72:	2300      	moveq	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	73fb      	strb	r3, [r7, #15]

    if (regValue != LIS3MDL_DEVICE_ID) {
 8000a7e:	7b7b      	ldrb	r3, [r7, #13]
 8000a80:	2b3d      	cmp	r3, #61	; 0x3d
 8000a82:	d001      	beq.n	8000a88 <lis3mdl_Init+0x64>

    	return FAIL;
 8000a84:	23ff      	movs	r3, #255	; 0xff
 8000a86:	e057      	b.n	8000b38 <lis3mdl_Init+0x114>
		3. Write 0Ch in CTRL_REG4. Sets UHP mode on the Z-axis.
		4. Write 00h in CTRL_REG3. Sets continuous-measurement mode. */

    // FS = +/-12G

    regValue = dev->scale << 5;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7e1b      	ldrb	r3, [r3, #24]
 8000a8c:	015b      	lsls	r3, r3, #5
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_2, &regValue);
 8000a92:	f107 030d 	add.w	r3, r7, #13
 8000a96:	461a      	mov	r2, r3
 8000a98:	2121      	movs	r1, #33	; 0x21
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f94a 	bl	8000d34 <lis3mdl_WriteRegister>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	73fb      	strb	r3, [r7, #15]

    // Ultra-High performance in X and Y axes, ODR at 80Hz and temperature enable.

    regValue = LIS3MDL_REG_CTL_1_TEMP_EN | (LIS3MDL_PERFORMANCE_ULTRA_HIGH << 5) | (LIS3MDL_DATA_RATE_80_HZ << 2);
 8000ab8:	23fc      	movs	r3, #252	; 0xfc
 8000aba:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_1, &regValue);
 8000abc:	f107 030d 	add.w	r3, r7, #13
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f935 	bl	8000d34 <lis3mdl_WriteRegister>
 8000aca:	4603      	mov	r3, r0
 8000acc:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bf14      	ite	ne
 8000ad4:	2301      	movne	r3, #1
 8000ad6:	2300      	moveq	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4413      	add	r3, r2
 8000ae0:	73fb      	strb	r3, [r7, #15]

    // Ultra-High performance in Z axe.

    regValue = 0x00 | (LIS3MDL_PERFORMANCE_ULTRA_HIGH << 2);
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_4, &regValue);
 8000ae6:	f107 030d 	add.w	r3, r7, #13
 8000aea:	461a      	mov	r2, r3
 8000aec:	2123      	movs	r1, #35	; 0x23
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f920 	bl	8000d34 <lis3mdl_WriteRegister>
 8000af4:	4603      	mov	r3, r0
 8000af6:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000af8:	7bbb      	ldrb	r3, [r7, #14]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	4413      	add	r3, r2
 8000b0a:	73fb      	strb	r3, [r7, #15]

    // Sets continuous-measurement mode.

    regValue = 0x00 | LIS3MDL_MODE_CONTINUOUS_MEASUREMENT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_3, &regValue);
 8000b10:	f107 030d 	add.w	r3, r7, #13
 8000b14:	461a      	mov	r2, r3
 8000b16:	2122      	movs	r1, #34	; 0x22
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f90b 	bl	8000d34 <lis3mdl_WriteRegister>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	4413      	add	r3, r2
 8000b34:	73fb      	strb	r3, [r7, #15]

    return accumulatedErrors;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <lis3mdl_DataReady>:

/*==================[Measurement functions definition]=======================*/

HAL_StatusTypeDef lis3mdl_DataReady ( LIS3MDL_Data_t* dev ){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint8_t regValue;
	HAL_StatusTypeDef status;

	// First we have to know if there is any data ready to read

	status = lis3mdl_ReadRegister(dev, LIS3MDL_REG_STATUS, &regValue);
 8000b48:	f107 030e 	add.w	r3, r7, #14
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	2127      	movs	r1, #39	; 0x27
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f8d4 	bl	8000cfe <lis3mdl_ReadRegister>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73fb      	strb	r3, [r7, #15]

	if(status == HAL_OK){
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <lis3mdl_DataReady+0x24>

		if(!(((regValue & LIS3MDL_STATUS_ZYXDA) >> 3) && ((status & LIS3MDL_STATUS_ZYXOR) >> 7))){

			status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <lis3mdl_ReadMagnetometer>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_ReadMagnetometer ( LIS3MDL_Data_t* dev ){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	uint8_t regValue[6];
	HAL_StatusTypeDef status;

	// Reading the axes registers

	status = lis3mdl_ReadRegisters(dev, LIS3MDL_REG_OUT_TEMP_L, regValue, 6);
 8000b78:	f107 020c 	add.w	r2, r7, #12
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	212e      	movs	r1, #46	; 0x2e
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f8f2 	bl	8000d6a <lis3mdl_ReadRegisters>
 8000b86:	4603      	mov	r3, r0
 8000b88:	74fb      	strb	r3, [r7, #19]

	if(status == HAL_OK){
 8000b8a:	7cfb      	ldrb	r3, [r7, #19]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d154      	bne.n	8000c3a <lis3mdl_ReadMagnetometer+0xca>

		float sensitivity;

		switch(dev->scale){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7e1b      	ldrb	r3, [r3, #24]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d817      	bhi.n	8000bc8 <lis3mdl_ReadMagnetometer+0x58>
 8000b98:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <lis3mdl_ReadMagnetometer+0x30>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bb1 	.word	0x08000bb1
 8000ba4:	08000bb7 	.word	0x08000bb7
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000bc3 	.word	0x08000bc3

			case LIS3MDL_SCALE_4_GAUSS:

				sensitivity = 1.0/6842;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <lis3mdl_ReadMagnetometer+0xd4>)
 8000bb2:	617b      	str	r3, [r7, #20]

				break;
 8000bb4:	e008      	b.n	8000bc8 <lis3mdl_ReadMagnetometer+0x58>

			case LIS3MDL_SCALE_8_GAUSS:

				sensitivity = 1.0/3421;
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <lis3mdl_ReadMagnetometer+0xd8>)
 8000bb8:	617b      	str	r3, [r7, #20]

				break;
 8000bba:	e005      	b.n	8000bc8 <lis3mdl_ReadMagnetometer+0x58>

			case LIS3MDL_SCALE_12_GAUSS:

				sensitivity = 1.0/2281;
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <lis3mdl_ReadMagnetometer+0xdc>)
 8000bbe:	617b      	str	r3, [r7, #20]

				break;
 8000bc0:	e002      	b.n	8000bc8 <lis3mdl_ReadMagnetometer+0x58>

			case LIS3MDL_SCALE_16_GAUSS:

				sensitivity = 1.0/1711;
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <lis3mdl_ReadMagnetometer+0xe0>)
 8000bc4:	617b      	str	r3, [r7, #20]

				break;
 8000bc6:	bf00      	nop
		}

		dev->mag_x = ((int16_t)((regValue[1] << 8) | regValue[0])) * sensitivity;
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	7b3b      	ldrb	r3, [r7, #12]
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe34 	bl	8000844 <__aeabi_i2f>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	6979      	ldr	r1, [r7, #20]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fab5 	bl	8000150 <__aeabi_fmul>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	609a      	str	r2, [r3, #8]

		dev->mag_y = ((int16_t)((regValue[3] << 8) | regValue[2])) * sensitivity;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe21 	bl	8000844 <__aeabi_i2f>
 8000c02:	4603      	mov	r3, r0
 8000c04:	6979      	ldr	r1, [r7, #20]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff faa2 	bl	8000150 <__aeabi_fmul>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60da      	str	r2, [r3, #12]

		dev->mag_z = ((int16_t)((regValue[5] << 8) | regValue[4])) * sensitivity;
 8000c14:	7c7b      	ldrb	r3, [r7, #17]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	7c3b      	ldrb	r3, [r7, #16]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe0e 	bl	8000844 <__aeabi_i2f>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	6979      	ldr	r1, [r7, #20]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fa8f 	bl	8000150 <__aeabi_fmul>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	611a      	str	r2, [r3, #16]
	}

	return status;
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	3919417a 	.word	0x3919417a
 8000c48:	3999417a 	.word	0x3999417a
 8000c4c:	39e5d99e 	.word	0x39e5d99e
 8000c50:	3a193603 	.word	0x3a193603

08000c54 <lis3mdl_ReadTemperature>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_ReadTemperature ( LIS3MDL_Data_t* dev ){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	uint8_t regValue[2];
	HAL_StatusTypeDef status;

	// Reading the temperature registers

	status = lis3mdl_ReadRegisters(dev, LIS3MDL_REG_OUT_TEMP_L, regValue, 2);
 8000c5c:	f107 020c 	add.w	r2, r7, #12
 8000c60:	2302      	movs	r3, #2
 8000c62:	212e      	movs	r1, #46	; 0x2e
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f880 	bl	8000d6a <lis3mdl_ReadRegisters>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]

	if(status == HAL_OK){
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d119      	bne.n	8000ca8 <lis3mdl_ReadTemperature+0x54>

		// From the datasheet, the nominal sensitivity is 8 LSB/°C (>>3) and 0 output means T=25 °C

		dev->temp = (((int16_t)((regValue[1] << 8) | regValue[0])) >> 3) + 25.0;
 8000c74:	7b7b      	ldrb	r3, [r7, #13]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	7b3b      	ldrb	r3, [r7, #12]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	10db      	asrs	r3, r3, #3
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc68 	bl	800055c <__aeabi_i2d>
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <lis3mdl_ReadTemperature+0x60>)
 8000c92:	f7ff fb17 	bl	80002c4 <__adddf3>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f7ff fcc7 	bl	8000630 <__aeabi_d2f>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	615a      	str	r2, [r3, #20]

	}

	return status;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40390000 	.word	0x40390000

08000cb8 <lis3mdl_ConvertToStoreData>:


/*************************************************************/

LIS3MDL_StoreData_t lis3mdl_ConvertToStoreData ( LIS3MDL_Data_t* dev ){
 8000cb8:	b4b0      	push	{r4, r5, r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]

	LIS3MDL_StoreData_t newData;

	newData.mag_x = dev->mag_x;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	60fb      	str	r3, [r7, #12]

	newData.mag_y = dev->mag_y;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	613b      	str	r3, [r7, #16]

	newData.mag_z = dev->mag_z;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	617b      	str	r3, [r7, #20]

	newData.temp = dev->temp;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	61bb      	str	r3, [r7, #24]

	newData.uid = dev->uid;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	889b      	ldrh	r3, [r3, #4]
 8000cde:	813b      	strh	r3, [r7, #8]

	return newData;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f107 0408 	add.w	r4, r7, #8
 8000ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cf0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	3724      	adds	r7, #36	; 0x24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bcb0      	pop	{r4, r5, r7}
 8000cfc:	4770      	bx	lr

08000cfe <lis3mdl_ReadRegister>:

/*==================[low level functions definition]=========================*/

HAL_StatusTypeDef lis3mdl_ReadRegister( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value ){
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b088      	sub	sp, #32
 8000d02:	af04      	add	r7, sp, #16
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	460b      	mov	r3, r1
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, 1, HAL_MAX_DELAY);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	213c      	movs	r1, #60	; 0x3c
 8000d26:	f002 fd39 	bl	800379c <HAL_I2C_Mem_Read>
 8000d2a:	4603      	mov	r3, r0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <lis3mdl_WriteRegister>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_WriteRegister( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value ){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af04      	add	r7, sp, #16
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, 1, HAL_MAX_DELAY);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	7afb      	ldrb	r3, [r7, #11]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	2301      	movs	r3, #1
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	213c      	movs	r1, #60	; 0x3c
 8000d5c:	f002 fc24 	bl	80035a8 <HAL_I2C_Mem_Write>
 8000d60:	4603      	mov	r3, r0

}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <lis3mdl_ReadRegisters>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_ReadRegisters( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value, uint8_t lenght ){
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b088      	sub	sp, #32
 8000d6e:	af04      	add	r7, sp, #16
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	461a      	mov	r2, r3
 8000d76:	460b      	mov	r3, r1
 8000d78:	72fb      	strb	r3, [r7, #11]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, lenght, HAL_MAX_DELAY);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6818      	ldr	r0, [r3, #0]
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	7abb      	ldrb	r3, [r7, #10]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	9102      	str	r1, [sp, #8]
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	213c      	movs	r1, #60	; 0x3c
 8000d9a:	f002 fcff 	bl	800379c <HAL_I2C_Mem_Read>
 8000d9e:	4603      	mov	r3, r0

}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <StoreUSARTData>:

static uint8_t BufferUsart1[UART_MAX_RECEIVE_DATA], Escritura_BufferUsart1 = 0, Lectura_BufferUsart1 = 0;

/*==================[internal functions definition]==========================*/

bool_t StoreUSARTData(uint8_t* data, uint16_t size){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]

	bool_t retVal = FALSE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

	uint8_t auxSize = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73bb      	strb	r3, [r7, #14]

	if((Escritura_BufferUsart1 + size) >= UART_MAX_RECEIVE_DATA){
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <StoreUSARTData+0xc4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	2b18      	cmp	r3, #24
 8000dc8:	dd29      	ble.n	8000e1e <StoreUSARTData+0x76>

		auxSize = (Escritura_BufferUsart1 + size) - UART_MAX_RECEIVE_DATA;
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <StoreUSARTData+0xc4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	3b19      	subs	r3, #25
 8000dd8:	73bb      	strb	r3, [r7, #14]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, (size - auxSize));
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <StoreUSARTData+0xc4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <StoreUSARTData+0xc8>)
 8000de2:	18d0      	adds	r0, r2, r3
 8000de4:	887a      	ldrh	r2, [r7, #2]
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	f008 f9e5 	bl	80091bc <memcpy>

		Escritura_BufferUsart1 = 0;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <StoreUSARTData+0xc4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), (data + (size - auxSize)), auxSize);
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <StoreUSARTData+0xc4>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <StoreUSARTData+0xc8>)
 8000e00:	18d0      	adds	r0, r2, r3
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	7bba      	ldrb	r2, [r7, #14]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f008 f9d3 	bl	80091bc <memcpy>

		Escritura_BufferUsart1 = auxSize;
 8000e16:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	7013      	strb	r3, [r2, #0]
 8000e1c:	e011      	b.n	8000e42 <StoreUSARTData+0x9a>
	}

	else {

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, size);
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <StoreUSARTData+0xc8>)
 8000e26:	4413      	add	r3, r2
 8000e28:	887a      	ldrh	r2, [r7, #2]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f008 f9c5 	bl	80091bc <memcpy>

		Escritura_BufferUsart1 = Escritura_BufferUsart1 + size;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e40:	701a      	strb	r2, [r3, #0]
	}

	if(BufferUsart1[Escritura_BufferUsart1 - 1] == '\r' || BufferUsart1[Escritura_BufferUsart1 - 1] == '\n'){
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <StoreUSARTData+0xc8>)
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	2b0d      	cmp	r3, #13
 8000e4e:	d006      	beq.n	8000e5e <StoreUSARTData+0xb6>
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <StoreUSARTData+0xc8>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d101      	bne.n	8000e62 <StoreUSARTData+0xba>

		retVal = TRUE;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
	}

	return retVal;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000a9 	.word	0x200000a9
 8000e70:	20000090 	.word	0x20000090

08000e74 <DecodeReceivedData>:

/*************************************************************/

bool_t DecodeReceivedData( uint16_t* NumberReceived ){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

	bool_t retVal = FALSE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t j = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	char DatosRecibidos[UART_MAX_RECEIVE_DATA];

	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 8000e88:	e03f      	b.n	8000f0a <DecodeReceivedData+0x96>

		// I remove the characters that are not information
		// If it is any of these characters, nothing is done.
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000e92:	5c9b      	ldrb	r3, [r3, r2]
 8000e94:	2b0d      	cmp	r3, #13
 8000e96:	d02b      	beq.n	8000ef0 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 8000e98:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000ea0:	5c9b      	ldrb	r3, [r3, r2]
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d024      	beq.n	8000ef0 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000eae:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d01d      	beq.n	8000ef0 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000ebc:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 8000ebe:	2b20      	cmp	r3, #32
 8000ec0:	d016      	beq.n	8000ef0 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == 0xff){}
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 8000ecc:	2bff      	cmp	r3, #255	; 0xff
 8000ece:	d00f      	beq.n	8000ef0 <DecodeReceivedData+0x7c>

		else {

			*(DatosRecibidos + j) = BufferUsart1[Lectura_BufferUsart1];
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eda:	f107 020c 	add.w	r2, r7, #12
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000ee2:	5c52      	ldrb	r2, [r2, r1]
 8000ee4:	701a      	strb	r2, [r3, #0]

			j++;
 8000ee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eea:	3301      	adds	r3, #1
 8000eec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		Lectura_BufferUsart1++;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000efa:	701a      	strb	r2, [r3, #0]

		if(Lectura_BufferUsart1 >= UART_MAX_RECEIVE_DATA){
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b18      	cmp	r3, #24
 8000f02:	d902      	bls.n	8000f0a <DecodeReceivedData+0x96>

			Lectura_BufferUsart1 = 0;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <DecodeReceivedData+0xe4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d1b9      	bne.n	8000e8a <DecodeReceivedData+0x16>
		}
	}

	*(DatosRecibidos + j) = '\0';
 8000f16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f1a:	f107 020c 	add.w	r2, r7, #12
 8000f1e:	4413      	add	r3, r2
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]

	*NumberReceived = atoi(DatosRecibidos);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f008 f8ff 	bl	800912c <atoi>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	801a      	strh	r2, [r3, #0]

	if(*NumberReceived != 0){
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <DecodeReceivedData+0xd0>

		retVal = TRUE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return retVal; //si no recibi nada valido, vuelve por FALSE
 8000f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000aa 	.word	0x200000aa
 8000f54:	20000090 	.word	0x20000090
 8000f58:	200000a9 	.word	0x200000a9

08000f5c <PrintString>:

/*************************************************************/

void PrintString( UART_HandleTypeDef printer, char* string, uint16_t size ){
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	f107 0c08 	add.w	ip, r7, #8
 8000f66:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_UART_Transmit( &printer, (uint8_t*)string, size, HAL_MAX_DELAY );
 8000f6a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f74:	f107 0008 	add.w	r0, r7, #8
 8000f78:	f004 fe1f 	bl	8005bba <HAL_UART_Transmit>
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr

08000f88 <PrintEnter>:

/*************************************************************/

void PrintEnter( UART_HandleTypeDef printer ){
 8000f88:	b084      	sub	sp, #16
 8000f8a:	b5b0      	push	{r4, r5, r7, lr}
 8000f8c:	b090      	sub	sp, #64	; 0x40
 8000f8e:	af10      	add	r7, sp, #64	; 0x40
 8000f90:	f107 0410 	add.w	r4, r7, #16
 8000f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    PrintString( printer, PRINT_ENTER_STRING, sizeof(PRINT_ENTER_STRING) );
 8000f98:	2303      	movs	r3, #3
 8000f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <PrintEnter+0x44>)
 8000f9e:	930d      	str	r3, [sp, #52]	; 0x34
 8000fa0:	466d      	mov	r5, sp
 8000fa2:	f107 0420 	add.w	r4, r7, #32
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbc:	f7ff ffce 	bl	8000f5c <PrintString>
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fc8:	b004      	add	sp, #16
 8000fca:	4770      	bx	lr
 8000fcc:	08009390 	.word	0x08009390

08000fd0 <PrintIntFormat>:

/*************************************************************/

void PrintIntFormat( UART_HandleTypeDef printer, int16_t number ){
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	b5b0      	push	{r4, r5, r7, lr}
 8000fd4:	b094      	sub	sp, #80	; 0x50
 8000fd6:	af10      	add	r7, sp, #64	; 0x40
 8000fd8:	f107 0420 	add.w	r4, r7, #32
 8000fdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char DataNumber[10];

	memset (DataNumber,'\0', 10);
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	220a      	movs	r2, #10
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f008 f8f6 	bl	80091d8 <memset>

	itoa(number, DataNumber, 10);
 8000fec:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8000ff0:	1d39      	adds	r1, r7, #4
 8000ff2:	220a      	movs	r2, #10
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f008 f8df 	bl	80091b8 <itoa>

	PrintString( printer, DataNumber, sizeof(DataNumber) );
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	930d      	str	r3, [sp, #52]	; 0x34
 8001002:	466d      	mov	r5, sp
 8001004:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	602b      	str	r3, [r5, #0]
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101e:	f7ff ff9d 	bl	8000f5c <PrintString>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800102c:	b004      	add	sp, #16
 800102e:	4770      	bx	lr

08001030 <PrintFloat>:

/*************************************************************/

void PrintFloat( UART_HandleTypeDef printer, float number, uint8_t afterpoint ){
 8001030:	b084      	sub	sp, #16
 8001032:	b5b0      	push	{r4, r5, r7, lr}
 8001034:	b0a2      	sub	sp, #136	; 0x88
 8001036:	af10      	add	r7, sp, #64	; 0x40
 8001038:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800103c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    char strNumber[65];

    uint16_t sizeStrNumber = floatToString( number, strNumber, afterpoint);
 8001040:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800104c:	f000 f820 	bl	8001090 <floatToString>
 8001050:	4603      	mov	r3, r0
 8001052:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    PrintString( printer, strNumber, sizeStrNumber);
 8001056:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800105a:	930e      	str	r3, [sp, #56]	; 0x38
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	930d      	str	r3, [sp, #52]	; 0x34
 8001060:	466d      	mov	r5, sp
 8001062:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	602b      	str	r3, [r5, #0]
 8001076:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800107a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800107c:	f7ff ff6e 	bl	8000f5c <PrintString>
}
 8001080:	bf00      	nop
 8001082:	3748      	adds	r7, #72	; 0x48
 8001084:	46bd      	mov	sp, r7
 8001086:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800108a:	b004      	add	sp, #16
 800108c:	4770      	bx	lr
	...

08001090 <floatToString>:

/*************************************************************/

uint16_t floatToString( float number, char* String, uint8_t afterpoint ){
 8001090:	b580      	push	{r7, lr}
 8001092:	b09a      	sub	sp, #104	; 0x68
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	71fb      	strb	r3, [r7, #7]

    char strNumber[65];

    uint8_t point = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    int32_t ipart = (int32_t)number; // Extract integer part
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fc97 	bl	80009d8 <__aeabi_f2iz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	65bb      	str	r3, [r7, #88]	; 0x58

    itoa(ipart, strNumber, 10); // convert integer part to string
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	220a      	movs	r2, #10
 80010b4:	4619      	mov	r1, r3
 80010b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010b8:	f008 f87e 	bl	80091b8 <itoa>

    int32_t aux = ipart;
 80010bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010be:	663b      	str	r3, [r7, #96]	; 0x60

    if(afterpoint > 0){
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d071      	beq.n	80011aa <floatToString+0x11a>

    	if(aux < 0){ point++; } //Sumo un lugar para que entre el menos en el string
 80010c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da12      	bge.n	80010f2 <floatToString+0x62>
 80010cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010d0:	3301      	adds	r3, #1
 80010d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

        while(aux != 0){
 80010d6:	e00c      	b.n	80010f2 <floatToString+0x62>

            aux = aux/10;
 80010d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010da:	4a41      	ldr	r2, [pc, #260]	; (80011e0 <floatToString+0x150>)
 80010dc:	fb82 1203 	smull	r1, r2, r2, r3
 80010e0:	1092      	asrs	r2, r2, #2
 80010e2:	17db      	asrs	r3, r3, #31
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	663b      	str	r3, [r7, #96]	; 0x60

            point++;
 80010e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010ec:	3301      	adds	r3, #1
 80010ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        while(aux != 0){
 80010f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1ef      	bne.n	80010d8 <floatToString+0x48>
        }

        if(point > 0){
 80010f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d054      	beq.n	80011aa <floatToString+0x11a>

            strNumber[point] = '.';  // add dot
 8001100:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001104:	3368      	adds	r3, #104	; 0x68
 8001106:	443b      	add	r3, r7
 8001108:	222e      	movs	r2, #46	; 0x2e
 800110a:	f803 2c58 	strb.w	r2, [r3, #-88]

            float fpart = number - (float)ipart; // Extract floating part
 800110e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001110:	f7ff fb98 	bl	8000844 <__aeabi_i2f>
 8001114:	4603      	mov	r3, r0
 8001116:	4619      	mov	r1, r3
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f7ff fadd 	bl	80006d8 <__aeabi_fsub>
 800111e:	4603      	mov	r3, r0
 8001120:	65fb      	str	r3, [r7, #92]	; 0x5c

            if(fpart < 0){fpart = fpart*(-1); }
 8001122:	f04f 0100 	mov.w	r1, #0
 8001126:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001128:	f7ff fc2e 	bl	8000988 <__aeabi_fcmplt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <floatToString+0xaa>
 8001132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001134:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001138:	65fb      	str	r3, [r7, #92]	; 0x5c

            aux = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	663b      	str	r3, [r7, #96]	; 0x60

            ipart = (int32_t)(fpart*10);
 800113e:	4929      	ldr	r1, [pc, #164]	; (80011e4 <floatToString+0x154>)
 8001140:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001142:	f7ff f805 	bl	8000150 <__aeabi_fmul>
 8001146:	4603      	mov	r3, r0
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fc45 	bl	80009d8 <__aeabi_f2iz>
 800114e:	4603      	mov	r3, r0
 8001150:	65bb      	str	r3, [r7, #88]	; 0x58

            if(ipart == 0){  point++; strNumber[point] = '0'; } // Si el primer decimal despues de la coma es 0 lo cargo a mano.
 8001152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001154:	2b00      	cmp	r3, #0
 8001156:	d115      	bne.n	8001184 <floatToString+0xf4>
 8001158:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800115c:	3301      	adds	r3, #1
 800115e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001162:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001166:	3368      	adds	r3, #104	; 0x68
 8001168:	443b      	add	r3, r7
 800116a:	2230      	movs	r2, #48	; 0x30
 800116c:	f803 2c58 	strb.w	r2, [r3, #-88]

            while(aux != afterpoint){
 8001170:	e008      	b.n	8001184 <floatToString+0xf4>

                fpart = fpart*10;
 8001172:	491c      	ldr	r1, [pc, #112]	; (80011e4 <floatToString+0x154>)
 8001174:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001176:	f7fe ffeb 	bl	8000150 <__aeabi_fmul>
 800117a:	4603      	mov	r3, r0
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c

                aux++;
 800117e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001180:	3301      	adds	r3, #1
 8001182:	663b      	str	r3, [r7, #96]	; 0x60
            while(aux != afterpoint){
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001188:	429a      	cmp	r2, r3
 800118a:	d1f2      	bne.n	8001172 <floatToString+0xe2>
            }

            char * pointer;

            pointer = strNumber;
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	657b      	str	r3, [r7, #84]	; 0x54

            itoa(fpart, (pointer + point + 1), 10); // convert integer part to string
 8001192:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001194:	f7ff fc20 	bl	80009d8 <__aeabi_f2iz>
 8001198:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800119c:	3301      	adds	r3, #1
 800119e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011a0:	4413      	add	r3, r2
 80011a2:	220a      	movs	r2, #10
 80011a4:	4619      	mov	r1, r3
 80011a6:	f008 f807 	bl	80091b8 <itoa>
        }
    }

    memcpy(String, strNumber, (point + 1 + aux + 1)); //enteros + punto + decimales + fin de string
 80011aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011b2:	4413      	add	r3, r2
 80011b4:	3301      	adds	r3, #1
 80011b6:	461a      	mov	r2, r3
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	68b8      	ldr	r0, [r7, #8]
 80011c0:	f007 fffc 	bl	80091bc <memcpy>

    return (point + 1 + aux + 1);//enteros + punto + decimales + fin de string
 80011c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3302      	adds	r3, #2
 80011d4:	b29b      	uxth	r3, r3
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3768      	adds	r7, #104	; 0x68
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	66666667 	.word	0x66666667
 80011e4:	41200000 	.word	0x41200000

080011e8 <w25q80dv_SPIRead>:

/*==================[internal functions definition]==========================*/

/*==================[low level functions definition]=========================*/

HAL_StatusTypeDef w25q80dv_SPIRead( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght, uint8_t* value, uint8_t valueLenght ){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71fb      	strb	r3, [r7, #7]

	uint8_t retVal;

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_RESET);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6898      	ldr	r0, [r3, #8]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	889b      	ldrh	r3, [r3, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	f002 f85c 	bl	80032c0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(dev->W25Q80DV_SPI, data, dataLenght, HAL_MAX_DELAY);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	f003 fd51 	bl	8004cbc <HAL_SPI_Transmit>

	retVal = HAL_SPI_Receive(dev->W25Q80DV_SPI, value, valueLenght, HAL_MAX_DELAY);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001222:	b29a      	uxth	r2, r3
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	f003 fe83 	bl	8004f34 <HAL_SPI_Receive>
 800122e:	4603      	mov	r3, r0
 8001230:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_SET);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6898      	ldr	r0, [r3, #8]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	4619      	mov	r1, r3
 800123e:	f002 f83f 	bl	80032c0 <HAL_GPIO_WritePin>

	return retVal;
 8001242:	7dfb      	ldrb	r3, [r7, #23]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <w25q80dv_SPIWrite>:

/*************************************************************/

HAL_StatusTypeDef w25q80dv_SPIWrite( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght ){
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	4613      	mov	r3, r2
 8001258:	71fb      	strb	r3, [r7, #7]

	uint8_t retVal;

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_RESET);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6898      	ldr	r0, [r3, #8]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	889b      	ldrh	r3, [r3, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	4619      	mov	r1, r3
 8001266:	f002 f82b 	bl	80032c0 <HAL_GPIO_WritePin>

	retVal = HAL_SPI_Transmit(dev->W25Q80DV_SPI, data, dataLenght, HAL_MAX_DELAY);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	b29a      	uxth	r2, r3
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	f003 fd20 	bl	8004cbc <HAL_SPI_Transmit>
 800127c:	4603      	mov	r3, r0
 800127e:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_SET);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6898      	ldr	r0, [r3, #8]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	889b      	ldrh	r3, [r3, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	4619      	mov	r1, r3
 800128c:	f002 f818 	bl	80032c0 <HAL_GPIO_WritePin>

	return retVal;
 8001290:	7dfb      	ldrb	r3, [r7, #23]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <w25q80dv_InstructionReadID>:

/*==================[Instruction functions definition]=======================*/

bool_t w25q80dv_InstructionReadID( W25Q80DV_Data_t* dev ){
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]

	uint8_t instruction[] = {W25Q80DV_DEVID, W25Q80DV_DUMMY_BYTE, W25Q80DV_DUMMY_BYTE, W25Q80DV_DUMMY_BYTE};
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <w25q80dv_InstructionReadID+0x44>)
 80012a6:	613b      	str	r3, [r7, #16]

	uint8_t devID = W25Q80DV_ERROR_BYTE;
 80012a8:	23ff      	movs	r3, #255	; 0xff
 80012aa:	73fb      	strb	r3, [r7, #15]

	bool_t retVal = FALSE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	75fb      	strb	r3, [r7, #23]

	if(w25q80dv_SPIRead(dev, instruction, 4, &devID, 1) == HAL_OK){
 80012b0:	f107 030f 	add.w	r3, r7, #15
 80012b4:	f107 0110 	add.w	r1, r7, #16
 80012b8:	2201      	movs	r2, #1
 80012ba:	9200      	str	r2, [sp, #0]
 80012bc:	2204      	movs	r2, #4
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff92 	bl	80011e8 <w25q80dv_SPIRead>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d104      	bne.n	80012d4 <w25q80dv_InstructionReadID+0x38>

		if(devID == W25Q80DV_ID){
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b13      	cmp	r3, #19
 80012ce:	d101      	bne.n	80012d4 <w25q80dv_InstructionReadID+0x38>

			retVal = TRUE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	return retVal;
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	aaaaaaab 	.word	0xaaaaaaab

080012e4 <w25q80dv_InstructionWriteEnable>:

/*************************************************************/

HAL_StatusTypeDef w25q80dv_InstructionWriteEnable( W25Q80DV_Data_t* dev ){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

	uint8_t instruction = W25Q80DV_WRITE_ENABLE;
 80012ec:	2306      	movs	r3, #6
 80012ee:	73fb      	strb	r3, [r7, #15]

	return w25q80dv_SPIWrite(dev, &instruction, 1);
 80012f0:	f107 030f 	add.w	r3, r7, #15
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ffa7 	bl	800124c <w25q80dv_SPIWrite>
 80012fe:	4603      	mov	r3, r0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <w25q80dv_InstructionReadStatusRegister>:
	return w25q80dv_SPIWrite(dev, &instruction, 1);
}

/*************************************************************/

uint8_t w25q80dv_InstructionReadStatusRegister( W25Q80DV_Data_t* dev, uint8_t selectRegister){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af02      	add	r7, sp, #8
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]

	uint8_t instruction;

	uint8_t statusRegister = W25Q80DV_ERROR_BYTE;
 8001314:	23ff      	movs	r3, #255	; 0xff
 8001316:	73bb      	strb	r3, [r7, #14]

	if (selectRegister == W25Q80DV_STATUSREGISTER_1 ){
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10c      	bne.n	8001338 <w25q80dv_InstructionReadStatusRegister+0x30>

		instruction = W25Q80DV_READ_SR1;
 800131e:	2305      	movs	r3, #5
 8001320:	73fb      	strb	r3, [r7, #15]

		w25q80dv_SPIRead(dev, &instruction, 1, &statusRegister, 1);
 8001322:	f107 030e 	add.w	r3, r7, #14
 8001326:	f107 010f 	add.w	r1, r7, #15
 800132a:	2201      	movs	r2, #1
 800132c:	9200      	str	r2, [sp, #0]
 800132e:	2201      	movs	r2, #1
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff59 	bl	80011e8 <w25q80dv_SPIRead>
 8001336:	e00e      	b.n	8001356 <w25q80dv_InstructionReadStatusRegister+0x4e>
	}

	else if (selectRegister == 2){
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d10b      	bne.n	8001356 <w25q80dv_InstructionReadStatusRegister+0x4e>

		instruction = W25Q80DV_READ_SR2;
 800133e:	2335      	movs	r3, #53	; 0x35
 8001340:	73fb      	strb	r3, [r7, #15]

		w25q80dv_SPIRead(dev, &instruction, 1, &statusRegister, 1);
 8001342:	f107 030e 	add.w	r3, r7, #14
 8001346:	f107 010f 	add.w	r1, r7, #15
 800134a:	2201      	movs	r2, #1
 800134c:	9200      	str	r2, [sp, #0]
 800134e:	2201      	movs	r2, #1
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff49 	bl	80011e8 <w25q80dv_SPIRead>
	}

	return statusRegister;
 8001356:	7bbb      	ldrb	r3, [r7, #14]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <w25q80dv_InstructionWaitForWriteEnd>:

/*************************************************************/

void w25q80dv_InstructionWaitForWriteEnd( W25Q80DV_Data_t* dev ){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

	uint8_t statusRegister1;

	do{
		statusRegister1 = w25q80dv_InstructionReadStatusRegister(dev, W25Q80DV_READ_SR1);
 8001368:	2105      	movs	r1, #5
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffcc 	bl	8001308 <w25q80dv_InstructionReadStatusRegister>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]

		HAL_Delay(1);
 8001374:	2001      	movs	r0, #1
 8001376:	f001 fa4b 	bl	8002810 <HAL_Delay>

	} while ((statusRegister1 & W25Q80DV_WEL_BIT) == W25Q80DV_WEL_ENABLE);
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f1      	bne.n	8001368 <w25q80dv_InstructionWaitForWriteEnd+0x8>
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <w25q80dv_Init>:

/*==================[Initialization functions definition]====================*/

bool_t w25q80dv_Init( W25Q80DV_Data_t* dev, SPI_HandleTypeDef* spi, uint16_t pin, GPIO_TypeDef* port ){
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4613      	mov	r3, r2
 800139c:	80fb      	strh	r3, [r7, #6]

	dev->W25Q80DV_SPI = spi;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	601a      	str	r2, [r3, #0]

	dev->csPort = port;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	609a      	str	r2, [r3, #8]

	dev->csPin = pin;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	809a      	strh	r2, [r3, #4]

	dev->lastPage = 0;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	821a      	strh	r2, [r3, #16]

	dev->lastAddress = W25Q80DV_FIRST_PAGE_ADDRESS;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]

	dev->statusMemInit = FALSE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	749a      	strb	r2, [r3, #18]

	// We make sure that the memory start properly

	uint8_t instruction = W25Q80DV_RELEASE_PD;
 80013c2:	23ab      	movs	r3, #171	; 0xab
 80013c4:	75fb      	strb	r3, [r7, #23]

	w25q80dv_SPIWrite(dev, &instruction, 1);
 80013c6:	f107 0317 	add.w	r3, r7, #23
 80013ca:	2201      	movs	r2, #1
 80013cc:	4619      	mov	r1, r3
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f7ff ff3c 	bl	800124c <w25q80dv_SPIWrite>

	// Check the flash memory

	if(w25q80dv_InstructionReadID(dev)){
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f7ff ff61 	bl	800129c <w25q80dv_InstructionReadID>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <w25q80dv_Init+0x58>

		dev->statusMemInit = TRUE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2201      	movs	r2, #1
 80013e4:	749a      	strb	r2, [r3, #18]
	}

	return dev->statusMemInit;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	7c9b      	ldrb	r3, [r3, #18]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <w25q80dv_isMemInit>:

/*************************************************************/

bool_t w25q80dv_isMemInit( W25Q80DV_Data_t* dev ){
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]

	uint8_t data[W25Q80DV_INITIALIZE_SIZE];

	w25q80dv_ReadBytesInAddress(dev, W25Q80DV_FIRST_PAGE_ADDRESS, data, W25Q80DV_INITIALIZE_SIZE);
 80013fa:	f107 020c 	add.w	r2, r7, #12
 80013fe:	2304      	movs	r3, #4
 8001400:	2100      	movs	r1, #0
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f97d 	bl	8001702 <w25q80dv_ReadBytesInAddress>

	// Check the data of initialization in memory

	bool_t retVal = FALSE;
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]

	uint32_t resultValue = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 800140c:	7b3b      	ldrb	r3, [r7, #12]
 800140e:	061a      	lsls	r2, r3, #24
 8001410:	7b7b      	ldrb	r3, [r7, #13]
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	431a      	orrs	r2, r3
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	4313      	orrs	r3, r2
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]

	if(resultValue == W25Q80DV_INITIALIZE_MEM){
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8001428:	d101      	bne.n	800142e <w25q80dv_isMemInit+0x3c>

		retVal = TRUE;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
	}

	return retVal;
 800142e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <w25q80dv_EraseChip>:

/*==================[Basic functions definition]============================*/

void w25q80dv_EraseChip( W25Q80DV_Data_t* dev ){
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

	w25q80dv_InstructionWaitForWriteEnd(dev);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff8d 	bl	8001360 <w25q80dv_InstructionWaitForWriteEnd>

	w25q80dv_InstructionWriteEnable(dev);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff4c 	bl	80012e4 <w25q80dv_InstructionWriteEnable>

	uint8_t instruction = W25Q80DV_CHIP_ERASE;
 800144c:	23c7      	movs	r3, #199	; 0xc7
 800144e:	73fb      	strb	r3, [r7, #15]

	w25q80dv_SPIWrite(dev, &instruction, 1);
 8001450:	f107 030f 	add.w	r3, r7, #15
 8001454:	2201      	movs	r2, #1
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fef7 	bl	800124c <w25q80dv_SPIWrite>

	w25q80dv_InstructionWaitForWriteEnd(dev);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff7e 	bl	8001360 <w25q80dv_InstructionWaitForWriteEnd>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <w25q80dv_WriteBytesInPage>:

/*************************************************************/

void w25q80dv_WriteBytesInPage( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght ){
 800146c:	b580      	push	{r7, lr}
 800146e:	b0c6      	sub	sp, #280	; 0x118
 8001470:	af00      	add	r7, sp, #0
 8001472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001476:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800147a:	6018      	str	r0, [r3, #0]
 800147c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001480:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001484:	6019      	str	r1, [r3, #0]
 8001486:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800148a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800148e:	701a      	strb	r2, [r3, #0]

	w25q80dv_InstructionWaitForWriteEnd(dev);
 8001490:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001494:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	f7ff ff61 	bl	8001360 <w25q80dv_InstructionWaitForWriteEnd>

	w25q80dv_InstructionWriteEnable(dev);
 800149e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	f7ff ff1c 	bl	80012e4 <w25q80dv_InstructionWriteEnable>

	uint8_t instruction[4 + W25Q80DV_PAGE_SIZE]; // Instruction + 3 byte Address + Data

	instruction[0] = W25Q80DV_PAGE_PROGRAM;
 80014ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014b4:	2202      	movs	r2, #2
 80014b6:	701a      	strb	r2, [r3, #0]

	instruction[1] = (dev->lastAddress & 0xFF0000) >> 16;
 80014b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014d0:	705a      	strb	r2, [r3, #1]

	instruction[2] = (dev->lastAddress & 0xFF00) >> 8;
 80014d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ea:	709a      	strb	r2, [r3, #2]

	instruction[3] = (dev->lastAddress & 0xFF);
 80014ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001502:	70da      	strb	r2, [r3, #3]

	memcpy((instruction + 4), data, dataLenght);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	3304      	adds	r3, #4
 800150a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800150e:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001518:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800151c:	6809      	ldr	r1, [r1, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f007 fe4c 	bl	80091bc <memcpy>

	w25q80dv_SPIWrite(dev, instruction, 4 + dataLenght);
 8001524:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001528:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3304      	adds	r3, #4
 8001530:	b2da      	uxtb	r2, r3
 8001532:	f107 0114 	add.w	r1, r7, #20
 8001536:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800153a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	f7ff fe84 	bl	800124c <w25q80dv_SPIWrite>

	w25q80dv_InstructionWaitForWriteEnd(dev);
 8001544:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001548:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f7ff ff07 	bl	8001360 <w25q80dv_InstructionWaitForWriteEnd>

	// Maximum time to write a page
	HAL_Delay(3);
 8001552:	2003      	movs	r0, #3
 8001554:	f001 f95c 	bl	8002810 <HAL_Delay>

	dev->lastAddress = dev->lastAddress + dataLenght;
 8001558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800155c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001568:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	441a      	add	r2, r3
 8001570:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001574:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60da      	str	r2, [r3, #12]
}
 800157c:	bf00      	nop
 800157e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <w25q80dv_WriteBytesInSequence>:

/*************************************************************/

bool_t w25q80dv_WriteBytesInSequence( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght ){
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	4613      	mov	r3, r2
 8001592:	71fb      	strb	r3, [r7, #7]

	bool_t retVal = FALSE;
 8001594:	2300      	movs	r3, #0
 8001596:	75fb      	strb	r3, [r7, #23]

	uint8_t splitData;

	if(w25q80dv_AddressToWrite(dev, dataLenght, splitData)){
 8001598:	7dbb      	ldrb	r3, [r7, #22]
 800159a:	461a      	mov	r2, r3
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4619      	mov	r1, r3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f8cf 	bl	8001744 <w25q80dv_AddressToWrite>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d02a      	beq.n	8001602 <w25q80dv_WriteBytesInSequence+0x7c>

		retVal = TRUE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]

		if(splitData == 0){
 80015b0:	7dbb      	ldrb	r3, [r7, #22]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <w25q80dv_WriteBytesInSequence+0x3e>

			w25q80dv_WriteBytesInPage(dev, data, dataLenght);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	461a      	mov	r2, r3
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7ff ff55 	bl	800146c <w25q80dv_WriteBytesInPage>
 80015c2:	e01b      	b.n	80015fc <w25q80dv_WriteBytesInSequence+0x76>
		}

		else {

			dev->lastPage++;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8a1b      	ldrh	r3, [r3, #16]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	821a      	strh	r2, [r3, #16]

			w25q80dv_WriteBytesInPage(dev, data, (dataLenght - splitData));
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	7dbb      	ldrb	r3, [r7, #22]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f7ff ff45 	bl	800146c <w25q80dv_WriteBytesInPage>

			w25q80dv_WriteBytesInPage(dev, data[dataLenght - splitData], splitData);
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	7dbb      	ldrb	r3, [r7, #22]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	7dbb      	ldrb	r3, [r7, #22]
 80015f4:	461a      	mov	r2, r3
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff ff38 	bl	800146c <w25q80dv_WriteBytesInPage>
		}

		w25q80dv_InstructionWaitForWriteEnd(dev);
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff feaf 	bl	8001360 <w25q80dv_InstructionWaitForWriteEnd>
	}

	return retVal;
 8001602:	7dfb      	ldrb	r3, [r7, #23]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <w25q80dv_WriteBytesInAddress>:

/*************************************************************/

void w25q80dv_WriteBytesInAddress( W25Q80DV_Data_t* dev, uint32_t address, uint8_t* data, uint8_t dataLenght ){
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b0c7      	sub	sp, #284	; 0x11c
 8001610:	af00      	add	r7, sp, #0
 8001612:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001616:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800161a:	6020      	str	r0, [r4, #0]
 800161c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001620:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001624:	6001      	str	r1, [r0, #0]
 8001626:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800162a:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800162e:	600a      	str	r2, [r1, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001636:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800163a:	701a      	strb	r2, [r3, #0]

	w25q80dv_InstructionWaitForWriteEnd(dev);
 800163c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001640:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	f7ff fe8b 	bl	8001360 <w25q80dv_InstructionWaitForWriteEnd>

	w25q80dv_InstructionWriteEnable(dev);
 800164a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800164e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	f7ff fe46 	bl	80012e4 <w25q80dv_InstructionWriteEnable>

	uint8_t instruction[4 + W25Q80DV_PAGE_SIZE]; // Instruction + 3 byte Address + Data

	instruction[0] = W25Q80DV_PAGE_PROGRAM;
 8001658:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800165c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001660:	2202      	movs	r2, #2
 8001662:	701a      	strb	r2, [r3, #0]

	instruction[1] = (address & 0xFF0000) >> 16;
 8001664:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001668:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0c1b      	lsrs	r3, r3, #16
 8001670:	b2da      	uxtb	r2, r3
 8001672:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800167a:	705a      	strb	r2, [r3, #1]

	instruction[2] = (address & 0xFF00) >> 8;
 800167c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001680:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	b2da      	uxtb	r2, r3
 800168a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800168e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001692:	709a      	strb	r2, [r3, #2]

	instruction[3] = (address & 0xFF);
 8001694:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001698:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016a8:	70da      	strb	r2, [r3, #3]

	memcpy((instruction + 4), data, dataLenght);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	3304      	adds	r3, #4
 80016b0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80016b4:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80016be:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80016c2:	6809      	ldr	r1, [r1, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f007 fd79 	bl	80091bc <memcpy>

	w25q80dv_SPIWrite(dev, instruction, 4 + dataLenght);
 80016ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016ce:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	3304      	adds	r3, #4
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	f107 0114 	add.w	r1, r7, #20
 80016dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	f7ff fdb1 	bl	800124c <w25q80dv_SPIWrite>

	w25q80dv_InstructionWaitForWriteEnd(dev);
 80016ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	f7ff fe34 	bl	8001360 <w25q80dv_InstructionWaitForWriteEnd>
}
 80016f8:	bf00      	nop
 80016fa:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd90      	pop	{r4, r7, pc}

08001702 <w25q80dv_ReadBytesInAddress>:
	w25q80dv_SPIRead(dev, instruction, 4, data, dataLenght);
}

/*************************************************************/

void w25q80dv_ReadBytesInAddress( W25Q80DV_Data_t* dev, uint32_t address, uint8_t* data, uint8_t dataLenght ){
 8001702:	b580      	push	{r7, lr}
 8001704:	b088      	sub	sp, #32
 8001706:	af02      	add	r7, sp, #8
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	70fb      	strb	r3, [r7, #3]

	uint8_t instruction[4]; // Instruction + 3 byte Address

	instruction[0] = W25Q80DV_READ_DATA;
 8001710:	2303      	movs	r3, #3
 8001712:	753b      	strb	r3, [r7, #20]

	instruction[1] = (address & 0xFF0000) >> 16;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	0c1b      	lsrs	r3, r3, #16
 8001718:	b2db      	uxtb	r3, r3
 800171a:	757b      	strb	r3, [r7, #21]

	instruction[2] = (address & 0xFF00) >> 8;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	b2db      	uxtb	r3, r3
 8001722:	75bb      	strb	r3, [r7, #22]

	instruction[3] = (address & 0xFF);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	75fb      	strb	r3, [r7, #23]

	w25q80dv_SPIRead(dev, instruction, 4, data, dataLenght);
 800172a:	f107 0114 	add.w	r1, r7, #20
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2204      	movs	r2, #4
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff fd56 	bl	80011e8 <w25q80dv_SPIRead>
}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <w25q80dv_AddressToWrite>:

/*************************************************************/

bool_t w25q80dv_AddressToWrite( W25Q80DV_Data_t* dev, uint8_t dataLenght, uint8_t* splitDataLenght ){
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	460b      	mov	r3, r1
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	72fb      	strb	r3, [r7, #11]

	bool_t retVal = FALSE;
 8001752:	2300      	movs	r3, #0
 8001754:	77fb      	strb	r3, [r7, #31]

	uint32_t nextAddressPageWrite = (dev->lastPage + 1)*W25Q80DV_PAGE_SIZE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8a1b      	ldrh	r3, [r3, #16]
 800175a:	3301      	adds	r3, #1
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	61bb      	str	r3, [r7, #24]

	if(nextAddressPageWrite <= W25Q80DV_LAST_PAGE_ADDRESS){
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <w25q80dv_AddressToWrite+0x5c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d815      	bhi.n	8001794 <w25q80dv_AddressToWrite+0x50>

		uint32_t offsetNextPage = nextAddressPageWrite - dev->lastAddress;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	617b      	str	r3, [r7, #20]

		if(offsetNextPage > dataLenght){
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	429a      	cmp	r2, r3
 8001778:	d903      	bls.n	8001782 <w25q80dv_AddressToWrite+0x3e>

			*splitDataLenght = 0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e006      	b.n	8001790 <w25q80dv_AddressToWrite+0x4c>
		}

		else {

			*splitDataLenght = dataLenght - offsetNextPage;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	7afa      	ldrb	r2, [r7, #11]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b2da      	uxtb	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	701a      	strb	r2, [r3, #0]
		}

		retVal = TRUE;
 8001790:	2301      	movs	r3, #1
 8001792:	77fb      	strb	r3, [r7, #31]
	}

	return retVal;
 8001794:	7ffb      	ldrb	r3, [r7, #31]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	000ffff0 	.word	0x000ffff0

080017a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4a06      	ldr	r2, [pc, #24]	; (80017cc <vApplicationGetIdleTaskMemory+0x28>)
 80017b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80017ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	200000ac 	.word	0x200000ac
 80017d0:	20000100 	.word	0x20000100

080017d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d6:	b0b1      	sub	sp, #196	; 0xc4
 80017d8:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017da:	f000 ffe7 	bl	80027ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017de:	f000 f8e9 	bl	80019b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e2:	f000 f9e9 	bl	8001bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017e6:	f000 f9c9 	bl	8001b7c <MX_DMA_Init>
  MX_I2C1_Init();
 80017ea:	f000 f929 	bl	8001a40 <MX_I2C1_Init>
  MX_SPI1_Init();
 80017ee:	f000 f955 	bl	8001a9c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80017f2:	f000 f989 	bl	8001b08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	// First we initialize the memory to recover all the data save(last uid);
	if(w25q80dv_Init(&W25Q80DV_data, &hspi1, SPI1_NCS_Pin, SPI1_NCS_GPIO_Port)){
 80017f6:	4b5d      	ldr	r3, [pc, #372]	; (800196c <main+0x198>)
 80017f8:	2210      	movs	r2, #16
 80017fa:	495d      	ldr	r1, [pc, #372]	; (8001970 <main+0x19c>)
 80017fc:	485d      	ldr	r0, [pc, #372]	; (8001974 <main+0x1a0>)
 80017fe:	f7ff fdc6 	bl	800138e <w25q80dv_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d028      	beq.n	800185a <main+0x86>

		// If there's no data save in the memory, we must do an erase to start using it.
		if(w25q80dv_isMemInit(&W25Q80DV_data) == FALSE){
 8001808:	485a      	ldr	r0, [pc, #360]	; (8001974 <main+0x1a0>)
 800180a:	f7ff fdf2 	bl	80013f2 <w25q80dv_isMemInit>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10f      	bne.n	8001834 <main+0x60>

			w25q80dv_EraseChip(&W25Q80DV_data);
 8001814:	4857      	ldr	r0, [pc, #348]	; (8001974 <main+0x1a0>)
 8001816:	f7ff fe0f 	bl	8001438 <w25q80dv_EraseChip>

			uint32_t initData = W25Q80DV_INITIALIZE_MEM;
 800181a:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800181e:	607b      	str	r3, [r7, #4]

			w25q80dv_WriteBytesInAddress(&W25Q80DV_data, W25Q80DV_FIRST_PAGE_ADDRESS, (uint8_t*)&initData, W25Q80DV_INITIALIZE_SIZE);
 8001820:	1d3a      	adds	r2, r7, #4
 8001822:	2304      	movs	r3, #4
 8001824:	2100      	movs	r1, #0
 8001826:	4853      	ldr	r0, [pc, #332]	; (8001974 <main+0x1a0>)
 8001828:	f7ff fef0 	bl	800160c <w25q80dv_WriteBytesInAddress>

			LIS3MDL_data.uid = 0;
 800182c:	4b52      	ldr	r3, [pc, #328]	; (8001978 <main+0x1a4>)
 800182e:	2200      	movs	r2, #0
 8001830:	809a      	strh	r2, [r3, #4]
 8001832:	e012      	b.n	800185a <main+0x86>
		// Else we have to read the last ID save in memory to know where to start writting the memory.
		else {

			uint16_t lastID;

			w25q80dv_ReadBytesInAddress(&W25Q80DV_data, INIT_DATA_ADDRESS, (uint8_t*)&lastID, INIT_DATA_SIZE);
 8001834:	1cba      	adds	r2, r7, #2
 8001836:	2302      	movs	r3, #2
 8001838:	2104      	movs	r1, #4
 800183a:	484e      	ldr	r0, [pc, #312]	; (8001974 <main+0x1a0>)
 800183c:	f7ff ff61 	bl	8001702 <w25q80dv_ReadBytesInAddress>

			W25Q80DV_data.lastAddress = lastID*(sizeof(LIS3MDL_StoreData_t) - 1) + (INIT_DATA_ADDRESS + INIT_DATA_SIZE);
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	461a      	mov	r2, r3
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	3306      	adds	r3, #6
 8001850:	4a48      	ldr	r2, [pc, #288]	; (8001974 <main+0x1a0>)
 8001852:	60d3      	str	r3, [r2, #12]

			LIS3MDL_data.uid = lastID;
 8001854:	887a      	ldrh	r2, [r7, #2]
 8001856:	4b48      	ldr	r3, [pc, #288]	; (8001978 <main+0x1a4>)
 8001858:	809a      	strh	r2, [r3, #4]
		}
	}

    PrintString(huart1, "Starting FreeRTOS System\r\n", sizeof("Starting FreeRTOS System\r\n"));
 800185a:	4e48      	ldr	r6, [pc, #288]	; (800197c <main+0x1a8>)
 800185c:	231b      	movs	r3, #27
 800185e:	930e      	str	r3, [sp, #56]	; 0x38
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <main+0x1ac>)
 8001862:	930d      	str	r3, [sp, #52]	; 0x34
 8001864:	466d      	mov	r5, sp
 8001866:	f106 0410 	add.w	r4, r6, #16
 800186a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	602b      	str	r3, [r5, #0]
 800187a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800187e:	f7ff fb6d 	bl	8000f5c <PrintString>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemaphoreUART */
  osSemaphoreDef(binarySemaphoreUART);
 8001882:	2300      	movs	r3, #0
 8001884:	67bb      	str	r3, [r7, #120]	; 0x78
 8001886:	2300      	movs	r3, #0
 8001888:	67fb      	str	r3, [r7, #124]	; 0x7c
  binarySemaphoreUARTHandle = osSemaphoreCreate(osSemaphore(binarySemaphoreUART), 1);
 800188a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800188e:	2101      	movs	r1, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f005 f822 	bl	80068da <osSemaphoreCreate>
 8001896:	4603      	mov	r3, r0
 8001898:	4a3a      	ldr	r2, [pc, #232]	; (8001984 <main+0x1b0>)
 800189a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  queueDataProcessing = xQueueCreate(16, sizeof(LIS3MDL_StoreData_t));
 800189c:	2200      	movs	r2, #0
 800189e:	2118      	movs	r1, #24
 80018a0:	2010      	movs	r0, #16
 80018a2:	f005 fa60 	bl	8006d66 <xQueueGenericCreate>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a37      	ldr	r2, [pc, #220]	; (8001988 <main+0x1b4>)
 80018aa:	6013      	str	r3, [r2, #0]
  queueUsartReception = xQueueCreate(16, sizeof(uint16_t));
 80018ac:	2200      	movs	r2, #0
 80018ae:	2102      	movs	r1, #2
 80018b0:	2010      	movs	r0, #16
 80018b2:	f005 fa58 	bl	8006d66 <xQueueGenericCreate>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a34      	ldr	r2, [pc, #208]	; (800198c <main+0x1b8>)
 80018ba:	6013      	str	r3, [r2, #0]
  queueUsartSender = xQueueCreate(16, sizeof(LIS3MDL_StoreData_t));
 80018bc:	2200      	movs	r2, #0
 80018be:	2118      	movs	r1, #24
 80018c0:	2010      	movs	r0, #16
 80018c2:	f005 fa50 	bl	8006d66 <xQueueGenericCreate>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a31      	ldr	r2, [pc, #196]	; (8001990 <main+0x1bc>)
 80018ca:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of measurementTask */
  osThreadDef(measurementTask, measurementFunction, osPriorityNormal, 0, 128);
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <main+0x1c0>)
 80018ce:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80018d2:	461d      	mov	r5, r3
 80018d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  measurementTaskHandle = osThreadCreate(osThread(measurementTask), NULL);
 80018e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 ff97 	bl	800681a <osThreadCreate>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <main+0x1c4>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of recordingTask */
  osThreadDef(recordingTask, recordingFunction, osPriorityNormal, 0, 128);
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <main+0x1c8>)
 80018f4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80018f8:	461d      	mov	r5, r3
 80018fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  recordingTaskHandle = osThreadCreate(osThread(recordingTask), NULL);
 8001906:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f004 ff84 	bl	800681a <osThreadCreate>
 8001912:	4603      	mov	r3, r0
 8001914:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <main+0x1cc>)
 8001916:	6013      	str	r3, [r2, #0]

  /* definition and creation of receptionTask */
  osThreadDef(receptionTask, receptionFunction, osPriorityNormal, 0, 128);
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <main+0x1d0>)
 800191a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800191e:	461d      	mov	r5, r3
 8001920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receptionTaskHandle = osThreadCreate(osThread(receptionTask), NULL);
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f004 ff71 	bl	800681a <osThreadCreate>
 8001938:	4603      	mov	r3, r0
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <main+0x1d4>)
 800193c:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendingTask */
  osThreadDef(sendingTask, sendingFunction, osPriorityNormal, 0, 128);
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <main+0x1d8>)
 8001940:	f107 0408 	add.w	r4, r7, #8
 8001944:	461d      	mov	r5, r3
 8001946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800194e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendingTaskHandle = osThreadCreate(osThread(sendingTask), NULL);
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f004 ff5e 	bl	800681a <osThreadCreate>
 800195e:	4603      	mov	r3, r0
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <main+0x1dc>)
 8001962:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001964:	f004 ff52 	bl	800680c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001968:	e7fe      	b.n	8001968 <main+0x194>
 800196a:	bf00      	nop
 800196c:	40010800 	.word	0x40010800
 8001970:	20000354 	.word	0x20000354
 8001974:	200004a4 	.word	0x200004a4
 8001978:	20000470 	.word	0x20000470
 800197c:	200003ac 	.word	0x200003ac
 8001980:	080093d0 	.word	0x080093d0
 8001984:	20000444 	.word	0x20000444
 8001988:	20000448 	.word	0x20000448
 800198c:	2000044c 	.word	0x2000044c
 8001990:	20000450 	.word	0x20000450
 8001994:	080093ec 	.word	0x080093ec
 8001998:	20000434 	.word	0x20000434
 800199c:	08009408 	.word	0x08009408
 80019a0:	20000438 	.word	0x20000438
 80019a4:	08009424 	.word	0x08009424
 80019a8:	2000043c 	.word	0x2000043c
 80019ac:	08009440 	.word	0x08009440
 80019b0:	20000440 	.word	0x20000440

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	; 0x40
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2228      	movs	r2, #40	; 0x28
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f007 fc08 	bl	80091d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e4:	2301      	movs	r3, #1
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e8:	2302      	movs	r3, #2
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fc8f 	bl	8004320 <HAL_RCC_OscConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a08:	f000 fcb2 	bl	8002370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a10:	2302      	movs	r3, #2
 8001a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2102      	movs	r1, #2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fefc 	bl	8004824 <HAL_RCC_ClockConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a32:	f000 fc9d 	bl	8002370 <Error_Handler>
  }
}
 8001a36:	bf00      	nop
 8001a38:	3740      	adds	r7, #64	; 0x40
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a46:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <MX_I2C1_Init+0x54>)
 8001a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a4c:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_I2C1_Init+0x58>)
 8001a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a7e:	f001 fc4f 	bl	8003320 <HAL_I2C_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a88:	f000 fc72 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000300 	.word	0x20000300
 8001a94:	40005400 	.word	0x40005400
 8001a98:	000186a0 	.word	0x000186a0

08001a9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001aa2:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <MX_SPI1_Init+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001aa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001acc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001ae8:	220a      	movs	r2, #10
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_SPI1_Init+0x64>)
 8001aee:	f003 f861 	bl	8004bb4 <HAL_SPI_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001af8:	f000 fc3a 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000354 	.word	0x20000354
 8001b04:	40013000 	.word	0x40013000

08001b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b0e:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <MX_USART1_UART_Init+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b3e:	480b      	ldr	r0, [pc, #44]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b40:	f003 ffee 	bl	8005b20 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f000 fc11 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 8001b4e:	2219      	movs	r2, #25
 8001b50:	4908      	ldr	r1, [pc, #32]	; (8001b74 <MX_USART1_UART_Init+0x6c>)
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_USART1_UART_Init+0x64>)
 8001b54:	f004 f8c3 	bl	8005cde <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_USART1_UART_Init+0x70>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART1_UART_Init+0x70>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0204 	bic.w	r2, r2, #4
 8001b66:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART1_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200003ac 	.word	0x200003ac
 8001b70:	40013800 	.word	0x40013800
 8001b74:	20000454 	.word	0x20000454
 8001b78:	200003f0 	.word	0x200003f0

08001b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_DMA_Init+0x38>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <MX_DMA_Init+0x38>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6153      	str	r3, [r2, #20]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_DMA_Init+0x38>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	200f      	movs	r0, #15
 8001ba0:	f000 ff33 	bl	8002a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ba4:	200f      	movs	r0, #15
 8001ba6:	f000 ff4c 	bl	8002a42 <HAL_NVIC_EnableIRQ>

}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001bd2:	f043 0310 	orr.w	r3, r3, #16
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be4:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a31      	ldr	r2, [pc, #196]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001bea:	f043 0320 	orr.w	r3, r3, #32
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c14:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <MX_GPIO_Init+0xf8>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c32:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <MX_GPIO_Init+0xfc>)
 8001c34:	f001 fb44 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	481e      	ldr	r0, [pc, #120]	; (8001cb8 <MX_GPIO_Init+0x100>)
 8001c3e:	f001 fb3f 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <MX_GPIO_Init+0xfc>)
 8001c5c:	f001 f9ac 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_Pin;
 8001c60:	2310      	movs	r3, #16
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4619      	mov	r1, r3
 8001c76:	4810      	ldr	r0, [pc, #64]	; (8001cb8 <MX_GPIO_Init+0x100>)
 8001c78:	f001 f99e 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_GPIO_Init+0x104>)
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <MX_GPIO_Init+0x108>)
 8001c92:	f001 f991 	bl	8002fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	2028      	movs	r0, #40	; 0x28
 8001c9c:	f000 feb5 	bl	8002a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ca0:	2028      	movs	r0, #40	; 0x28
 8001ca2:	f000 fece 	bl	8002a42 <HAL_NVIC_EnableIRQ>

}
 8001ca6:	bf00      	nop
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40011000 	.word	0x40011000
 8001cb8:	40010800 	.word	0x40010800
 8001cbc:	10210000 	.word	0x10210000
 8001cc0:	40010c00 	.word	0x40010c00

08001cc4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
  
  if (huart->Instance == USART1){
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_UARTEx_RxEventCallback+0x54>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d119      	bne.n	8001d0e <HAL_UARTEx_RxEventCallback+0x4a>
  
    if(StoreUSARTData(Rx_data, size)){
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480f      	ldr	r0, [pc, #60]	; (8001d1c <HAL_UARTEx_RxEventCallback+0x58>)
 8001ce0:	f7ff f862 	bl	8000da8 <StoreUSARTData>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <HAL_UARTEx_RxEventCallback+0x30>
  
        osSemaphoreRelease(binarySemaphoreUARTHandle);
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fe74 	bl	80069dc <osSemaphoreRelease>
    }
  
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 8001cf4:	2219      	movs	r2, #25
 8001cf6:	4909      	ldr	r1, [pc, #36]	; (8001d1c <HAL_UARTEx_RxEventCallback+0x58>)
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <HAL_UARTEx_RxEventCallback+0x60>)
 8001cfa:	f003 fff0 	bl	8005cde <HAL_UARTEx_ReceiveToIdle_DMA>
  
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_UARTEx_RxEventCallback+0x64>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_UARTEx_RxEventCallback+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0204 	bic.w	r2, r2, #4
 8001d0c:	601a      	str	r2, [r3, #0]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	20000454 	.word	0x20000454
 8001d20:	20000444 	.word	0x20000444
 8001d24:	200003ac 	.word	0x200003ac
 8001d28:	200003f0 	.word	0x200003f0

08001d2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]
	
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001d36:	2028      	movs	r0, #40	; 0x28
 8001d38:	f000 fe91 	bl	8002a5e <HAL_NVIC_DisableIRQ>
    
  if(GPIO_Pin == BUTTON_Pin){
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d42:	d117      	bne.n	8001d74 <HAL_GPIO_EXTI_Callback+0x48>

    LIS3MDL_StoreData_t message = LIS3MDL_storedata;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_GPIO_EXTI_Callback+0x58>)
 8001d46:	f107 0410 	add.w	r4, r7, #16
 8001d4a:	461d      	mov	r5, r3
 8001d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d54:	e884 0003 	stmia.w	r4, {r0, r1}

    message.statusData = DATA_READ;
 8001d58:	2306      	movs	r3, #6
 8001d5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
    
    xQueueSendToFrontFromISR(queueUsartSender, &message, &xHigherPriorityTaskWoken);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f107 020c 	add.w	r2, r7, #12
 8001d6a:	f107 0110 	add.w	r1, r7, #16
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f005 f954 	bl	800701c <xQueueGenericSendFromISR>
  }
  
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d74:	2028      	movs	r0, #40	; 0x28
 8001d76:	f000 fe64 	bl	8002a42 <HAL_NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	; 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000048c 	.word	0x2000048c
 8001d88:	20000450 	.word	0x20000450

08001d8c <measurementFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_measurementFunction */
void measurementFunction(void const * argument)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	LIS3MDL_data.scale = LIS3MDL_SCALE_12_GAUSS;
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <measurementFunction+0x90>)
 8001d96:	2202      	movs	r2, #2
 8001d98:	761a      	strb	r2, [r3, #24]

	lis3mdl_Init(&LIS3MDL_data, &hi2c1);
 8001d9a:	4921      	ldr	r1, [pc, #132]	; (8001e20 <measurementFunction+0x94>)
 8001d9c:	481f      	ldr	r0, [pc, #124]	; (8001e1c <measurementFunction+0x90>)
 8001d9e:	f7fe fe41 	bl	8000a24 <lis3mdl_Init>

	while(1){

		osDelay(1000);
 8001da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da6:	f004 fd84 	bl	80068b2 <osDelay>

		if(lis3mdl_DataReady(&LIS3MDL_data) == HAL_OK){
 8001daa:	481c      	ldr	r0, [pc, #112]	; (8001e1c <measurementFunction+0x90>)
 8001dac:	f7fe fec8 	bl	8000b40 <lis3mdl_DataReady>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d125      	bne.n	8001e02 <measurementFunction+0x76>

		  LIS3MDL_data.uid++;
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <measurementFunction+0x90>)
 8001db8:	889b      	ldrh	r3, [r3, #4]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <measurementFunction+0x90>)
 8001dc0:	809a      	strh	r2, [r3, #4]

			lis3mdl_ReadMagnetometer(&LIS3MDL_data);
 8001dc2:	4816      	ldr	r0, [pc, #88]	; (8001e1c <measurementFunction+0x90>)
 8001dc4:	f7fe fed4 	bl	8000b70 <lis3mdl_ReadMagnetometer>

			lis3mdl_ReadTemperature(&LIS3MDL_data);
 8001dc8:	4814      	ldr	r0, [pc, #80]	; (8001e1c <measurementFunction+0x90>)
 8001dca:	f7fe ff43 	bl	8000c54 <lis3mdl_ReadTemperature>

			LIS3MDL_storedata = lis3mdl_ConvertToStoreData(&LIS3MDL_data);
 8001dce:	4c15      	ldr	r4, [pc, #84]	; (8001e24 <measurementFunction+0x98>)
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	4912      	ldr	r1, [pc, #72]	; (8001e1c <measurementFunction+0x90>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ff6f 	bl	8000cb8 <lis3mdl_ConvertToStoreData>
 8001dda:	4625      	mov	r5, r4
 8001ddc:	463c      	mov	r4, r7
 8001dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de6:	e885 0003 	stmia.w	r5, {r0, r1}

			LIS3MDL_storedata.statusData = SAVE_DATA;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <measurementFunction+0x98>)
 8001dec:	2205      	movs	r2, #5
 8001dee:	751a      	strb	r2, [r3, #20]

			xQueueSend(queueDataProcessing, &LIS3MDL_storedata, portMAX_DELAY);
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <measurementFunction+0x9c>)
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	2300      	movs	r3, #0
 8001df6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfa:	490a      	ldr	r1, [pc, #40]	; (8001e24 <measurementFunction+0x98>)
 8001dfc:	f005 f810 	bl	8006e20 <xQueueGenericSend>
 8001e00:	e7cf      	b.n	8001da2 <measurementFunction+0x16>
		}

    else {

			LIS3MDL_storedata.statusData = LIS3MDL_ERROR;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <measurementFunction+0x98>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	751a      	strb	r2, [r3, #20]

			xQueueSend(queueUsartSender, &LIS3MDL_storedata, portMAX_DELAY);
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <measurementFunction+0xa0>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e12:	4904      	ldr	r1, [pc, #16]	; (8001e24 <measurementFunction+0x98>)
 8001e14:	f005 f804 	bl	8006e20 <xQueueGenericSend>
		osDelay(1000);
 8001e18:	e7c3      	b.n	8001da2 <measurementFunction+0x16>
 8001e1a:	bf00      	nop
 8001e1c:	20000470 	.word	0x20000470
 8001e20:	20000300 	.word	0x20000300
 8001e24:	2000048c 	.word	0x2000048c
 8001e28:	20000448 	.word	0x20000448
 8001e2c:	20000450 	.word	0x20000450

08001e30 <recordingFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordingFunction */
void recordingFunction(void const * argument)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

	LIS3MDL_StoreData_t message;

	while(1){

		xQueueReceive(queueDataProcessing, &message, portMAX_DELAY);
 8001e38:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <recordingFunction+0xfc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f107 010c 	add.w	r1, r7, #12
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 fa0f 	bl	8007268 <xQueueReceive>

		if(W25Q80DV_data.statusMemInit == TRUE){
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <recordingFunction+0x100>)
 8001e4c:	7c9b      	ldrb	r3, [r3, #18]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d15e      	bne.n	8001f10 <recordingFunction+0xe0>

			if(message.statusData == SAVE_DATA){
 8001e52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d129      	bne.n	8001eae <recordingFunction+0x7e>

				uint8_t splitData = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	72fb      	strb	r3, [r7, #11]

				if(w25q80dv_AddressToWrite(&W25Q80DV_data, (sizeof(LIS3MDL_StoreData_t) - 1), &splitData)){
 8001e5e:	f107 030b 	add.w	r3, r7, #11
 8001e62:	461a      	mov	r2, r3
 8001e64:	2117      	movs	r1, #23
 8001e66:	4832      	ldr	r0, [pc, #200]	; (8001f30 <recordingFunction+0x100>)
 8001e68:	f7ff fc6c 	bl	8001744 <w25q80dv_AddressToWrite>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d011      	beq.n	8001e96 <recordingFunction+0x66>
					// We must save the data in memory
					w25q80dv_WriteBytesInSequence(&W25Q80DV_data, (uint8_t*)&message, (sizeof(LIS3MDL_StoreData_t) - 1));
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	2217      	movs	r2, #23
 8001e78:	4619      	mov	r1, r3
 8001e7a:	482d      	ldr	r0, [pc, #180]	; (8001f30 <recordingFunction+0x100>)
 8001e7c:	f7ff fb83 	bl	8001586 <w25q80dv_WriteBytesInSequence>
					// We save in the first bytes the last id save in memory, for the next power up
					w25q80dv_WriteBytesInAddress(&W25Q80DV_data, INIT_DATA_ADDRESS, (uint8_t*)&message, INIT_DATA_SIZE);
 8001e80:	f107 020c 	add.w	r2, r7, #12
 8001e84:	2302      	movs	r3, #2
 8001e86:	2104      	movs	r1, #4
 8001e88:	4829      	ldr	r0, [pc, #164]	; (8001f30 <recordingFunction+0x100>)
 8001e8a:	f7ff fbbf 	bl	800160c <w25q80dv_WriteBytesInAddress>

					message.statusData = DATA_SAVE;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	f887 3020 	strb.w	r3, [r7, #32]
 8001e94:	e00b      	b.n	8001eae <recordingFunction+0x7e>
				}

				else {
					// There's no more space in memory, we must adopt a rule, overwrite data starting
					// with the first page or send an alert.
					message.statusData = MEMORY_FULL;
 8001e96:	2307      	movs	r3, #7
 8001e98:	f887 3020 	strb.w	r3, [r7, #32]
					// Send the data to the sendingTask
					xQueueSend(queueUsartSender, &message, portMAX_DELAY);
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <recordingFunction+0x104>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f107 010c 	add.w	r1, r7, #12
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	f004 ffb9 	bl	8006e20 <xQueueGenericSend>
				}
			}

			if(message.statusData == READ_DATA){
 8001eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d1c0      	bne.n	8001e38 <recordingFunction+0x8>
				// First we must get the address of that data id
				uint32_t addressAskID = message.uid*(sizeof(LIS3MDL_StoreData_t) - 1) + (INIT_DATA_ADDRESS + INIT_DATA_SIZE);
 8001eb6:	89bb      	ldrh	r3, [r7, #12]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	3306      	adds	r3, #6
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24

				if(addressAskID > 0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d013      	beq.n	8001ef6 <recordingFunction+0xc6>
					&& addressAskID <= (W25Q80DV_LAST_ADDRESS - (sizeof(LIS3MDL_StoreData_t) - 1))
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <recordingFunction+0x108>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d80f      	bhi.n	8001ef6 <recordingFunction+0xc6>
					&& message.uid <= LIS3MDL_data.uid){
 8001ed6:	89ba      	ldrh	r2, [r7, #12]
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <recordingFunction+0x10c>)
 8001eda:	889b      	ldrh	r3, [r3, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d80a      	bhi.n	8001ef6 <recordingFunction+0xc6>
					// We must read the data in memory of the address
					w25q80dv_ReadBytesInAddress(&W25Q80DV_data, addressAskID, (uint8_t*)&message, (sizeof(LIS3MDL_StoreData_t) - 1));
 8001ee0:	f107 020c 	add.w	r2, r7, #12
 8001ee4:	2317      	movs	r3, #23
 8001ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee8:	4811      	ldr	r0, [pc, #68]	; (8001f30 <recordingFunction+0x100>)
 8001eea:	f7ff fc0a 	bl	8001702 <w25q80dv_ReadBytesInAddress>

					message.statusData = DATA_READ;
 8001eee:	2306      	movs	r3, #6
 8001ef0:	f887 3020 	strb.w	r3, [r7, #32]
 8001ef4:	e002      	b.n	8001efc <recordingFunction+0xcc>
				}

				else {
					// The ID selected is wrong, send error message
					message.statusData = WRONG_ID;
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	f887 3020 	strb.w	r3, [r7, #32]
				}
				// Send the data to the sendingTask
				xQueueSend(queueUsartSender, &message, portMAX_DELAY);
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <recordingFunction+0x104>)
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	f107 010c 	add.w	r1, r7, #12
 8001f04:	2300      	movs	r3, #0
 8001f06:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0a:	f004 ff89 	bl	8006e20 <xQueueGenericSend>
 8001f0e:	e793      	b.n	8001e38 <recordingFunction+0x8>
		}

		else {

			// The memory is not operative
			message.statusData = MEMORY_ERROR;
 8001f10:	2302      	movs	r3, #2
 8001f12:	f887 3020 	strb.w	r3, [r7, #32]
			// Send the data to the sendingTask
			xQueueSend(queueUsartSender, &message, portMAX_DELAY);
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <recordingFunction+0x104>)
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	f107 010c 	add.w	r1, r7, #12
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	f004 ff7c 	bl	8006e20 <xQueueGenericSend>
		xQueueReceive(queueDataProcessing, &message, portMAX_DELAY);
 8001f28:	e786      	b.n	8001e38 <recordingFunction+0x8>
 8001f2a:	bf00      	nop
 8001f2c:	20000448 	.word	0x20000448
 8001f30:	200004a4 	.word	0x200004a4
 8001f34:	20000450 	.word	0x20000450
 8001f38:	000fffe8 	.word	0x000fffe8
 8001f3c:	20000470 	.word	0x20000470

08001f40 <receptionFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receptionFunction */
void receptionFunction(void const * argument)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

	LIS3MDL_StoreData_t message;

	while(1){
		
    osSemaphoreWait(binarySemaphoreUARTHandle, osWaitForever);
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <receptionFunction+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 fcf5 	bl	8006940 <osSemaphoreWait>
		
    uint16_t measureAsk = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	81fb      	strh	r3, [r7, #14]
		
    if(DecodeReceivedData(&measureAsk)){
 8001f5a:	f107 030e 	add.w	r3, r7, #14
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe ff88 	bl	8000e74 <DecodeReceivedData>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00e      	beq.n	8001f88 <receptionFunction+0x48>

      message.uid = measureAsk;
 8001f6a:	89fb      	ldrh	r3, [r7, #14]
 8001f6c:	823b      	strh	r3, [r7, #16]

      message.statusData = READ_DATA;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      
      // Send the data to the sendingTask
			xQueueSend(queueDataProcessing, &message, portMAX_DELAY);
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <receptionFunction+0x68>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	f107 0110 	add.w	r1, r7, #16
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f82:	f004 ff4d 	bl	8006e20 <xQueueGenericSend>
 8001f86:	e7df      	b.n	8001f48 <receptionFunction+0x8>
		}

    else {

      message.statusData = UNKNOWN_ERROR;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      
      // Send the data to the sendingTask
			xQueueSend(queueUsartSender, &message, portMAX_DELAY);
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <receptionFunction+0x6c>)
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	f107 0110 	add.w	r1, r7, #16
 8001f96:	2300      	movs	r3, #0
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	f004 ff40 	bl	8006e20 <xQueueGenericSend>
	while(1){
 8001fa0:	e7d2      	b.n	8001f48 <receptionFunction+0x8>
 8001fa2:	bf00      	nop
 8001fa4:	20000444 	.word	0x20000444
 8001fa8:	20000448 	.word	0x20000448
 8001fac:	20000450 	.word	0x20000450

08001fb0 <sendingFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendingFunction */
void sendingFunction(void const * argument)
{
 8001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb2:	b099      	sub	sp, #100	; 0x64
 8001fb4:	af10      	add	r7, sp, #64	; 0x40
 8001fb6:	6078      	str	r0, [r7, #4]

	LIS3MDL_StoreData_t message;

	while(1){

		xQueueReceive(queueUsartSender, &message, portMAX_DELAY);
 8001fb8:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <sendingFunction+0x114>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f107 0108 	add.w	r1, r7, #8
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 f94f 	bl	8007268 <xQueueReceive>

		switch(message.statusData){
 8001fca:	7f3b      	ldrb	r3, [r7, #28]
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	f200 819a 	bhi.w	8002306 <sendingFunction+0x356>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <sendingFunction+0x28>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08002289 	.word	0x08002289
 8001fdc:	080022b3 	.word	0x080022b3
 8001fe0:	080022dd 	.word	0x080022dd
 8001fe4:	08002307 	.word	0x08002307
 8001fe8:	08002307 	.word	0x08002307
 8001fec:	08002307 	.word	0x08002307
 8001ff0:	080020d9 	.word	0x080020d9
 8001ff4:	08002001 	.word	0x08002001
 8001ff8:	0800202b 	.word	0x0800202b
 8001ffc:	08002307 	.word	0x08002307

		  case MEMORY_FULL:

			PrintString(huart1, "Error memory full", 17);
 8002000:	4e31      	ldr	r6, [pc, #196]	; (80020c8 <sendingFunction+0x118>)
 8002002:	2311      	movs	r3, #17
 8002004:	930e      	str	r3, [sp, #56]	; 0x38
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <sendingFunction+0x11c>)
 8002008:	930d      	str	r3, [sp, #52]	; 0x34
 800200a:	466d      	mov	r5, sp
 800200c:	f106 0410 	add.w	r4, r6, #16
 8002010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	602b      	str	r3, [r5, #0]
 8002020:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002024:	f7fe ff9a 	bl	8000f5c <PrintString>

		  break;
 8002028:	e16d      	b.n	8002306 <sendingFunction+0x356>

		  case WRONG_ID:

			PrintString(huart1, "Searching for the uid data: ", 28);
 800202a:	4e27      	ldr	r6, [pc, #156]	; (80020c8 <sendingFunction+0x118>)
 800202c:	231c      	movs	r3, #28
 800202e:	930e      	str	r3, [sp, #56]	; 0x38
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <sendingFunction+0x120>)
 8002032:	930d      	str	r3, [sp, #52]	; 0x34
 8002034:	466d      	mov	r5, sp
 8002036:	f106 0410 	add.w	r4, r6, #16
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	602b      	str	r3, [r5, #0]
 800204a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800204e:	f7fe ff85 	bl	8000f5c <PrintString>

			PrintIntFormat(huart1, message.uid);
 8002052:	893b      	ldrh	r3, [r7, #8]
 8002054:	b21b      	sxth	r3, r3
 8002056:	4e1c      	ldr	r6, [pc, #112]	; (80020c8 <sendingFunction+0x118>)
 8002058:	930d      	str	r3, [sp, #52]	; 0x34
 800205a:	466d      	mov	r5, sp
 800205c:	f106 0410 	add.w	r4, r6, #16
 8002060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	602b      	str	r3, [r5, #0]
 8002070:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002074:	f7fe ffac 	bl	8000fd0 <PrintIntFormat>

			PrintEnter(huart1);
 8002078:	4e13      	ldr	r6, [pc, #76]	; (80020c8 <sendingFunction+0x118>)
 800207a:	466d      	mov	r5, sp
 800207c:	f106 0410 	add.w	r4, r6, #16
 8002080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	602b      	str	r3, [r5, #0]
 8002090:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002094:	f7fe ff78 	bl	8000f88 <PrintEnter>

			PrintString(huart1, "Wrong ID", 8);
 8002098:	4e0b      	ldr	r6, [pc, #44]	; (80020c8 <sendingFunction+0x118>)
 800209a:	2308      	movs	r3, #8
 800209c:	930e      	str	r3, [sp, #56]	; 0x38
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <sendingFunction+0x124>)
 80020a0:	930d      	str	r3, [sp, #52]	; 0x34
 80020a2:	466d      	mov	r5, sp
 80020a4:	f106 0410 	add.w	r4, r6, #16
 80020a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	602b      	str	r3, [r5, #0]
 80020b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020bc:	f7fe ff4e 	bl	8000f5c <PrintString>

		  break;
 80020c0:	e121      	b.n	8002306 <sendingFunction+0x356>
 80020c2:	bf00      	nop
 80020c4:	20000450 	.word	0x20000450
 80020c8:	200003ac 	.word	0x200003ac
 80020cc:	0800945c 	.word	0x0800945c
 80020d0:	08009470 	.word	0x08009470
 80020d4:	08009490 	.word	0x08009490

		  case DATA_READ:

			PrintString(huart1, "Searching for the uid data: ", 28);
 80020d8:	4e93      	ldr	r6, [pc, #588]	; (8002328 <sendingFunction+0x378>)
 80020da:	231c      	movs	r3, #28
 80020dc:	930e      	str	r3, [sp, #56]	; 0x38
 80020de:	4b93      	ldr	r3, [pc, #588]	; (800232c <sendingFunction+0x37c>)
 80020e0:	930d      	str	r3, [sp, #52]	; 0x34
 80020e2:	466d      	mov	r5, sp
 80020e4:	f106 0410 	add.w	r4, r6, #16
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020fc:	f7fe ff2e 	bl	8000f5c <PrintString>

			PrintIntFormat(huart1, message.uid);
 8002100:	893b      	ldrh	r3, [r7, #8]
 8002102:	b21b      	sxth	r3, r3
 8002104:	4e88      	ldr	r6, [pc, #544]	; (8002328 <sendingFunction+0x378>)
 8002106:	930d      	str	r3, [sp, #52]	; 0x34
 8002108:	466d      	mov	r5, sp
 800210a:	f106 0410 	add.w	r4, r6, #16
 800210e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	602b      	str	r3, [r5, #0]
 800211e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002122:	f7fe ff55 	bl	8000fd0 <PrintIntFormat>

			PrintEnter(huart1);
 8002126:	4e80      	ldr	r6, [pc, #512]	; (8002328 <sendingFunction+0x378>)
 8002128:	466d      	mov	r5, sp
 800212a:	f106 0410 	add.w	r4, r6, #16
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	602b      	str	r3, [r5, #0]
 800213e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002142:	f7fe ff21 	bl	8000f88 <PrintEnter>

			PrintString(huart1, "Data sensor -> x:", 15);
 8002146:	4e78      	ldr	r6, [pc, #480]	; (8002328 <sendingFunction+0x378>)
 8002148:	230f      	movs	r3, #15
 800214a:	930e      	str	r3, [sp, #56]	; 0x38
 800214c:	4b78      	ldr	r3, [pc, #480]	; (8002330 <sendingFunction+0x380>)
 800214e:	930d      	str	r3, [sp, #52]	; 0x34
 8002150:	466d      	mov	r5, sp
 8002152:	f106 0410 	add.w	r4, r6, #16
 8002156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	602b      	str	r3, [r5, #0]
 8002166:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800216a:	f7fe fef7 	bl	8000f5c <PrintString>

			PrintFloat(huart1, message.mag_x, 4);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4e6d      	ldr	r6, [pc, #436]	; (8002328 <sendingFunction+0x378>)
 8002172:	2204      	movs	r2, #4
 8002174:	920e      	str	r2, [sp, #56]	; 0x38
 8002176:	930d      	str	r3, [sp, #52]	; 0x34
 8002178:	466d      	mov	r5, sp
 800217a:	f106 0410 	add.w	r4, r6, #16
 800217e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	602b      	str	r3, [r5, #0]
 800218e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002192:	f7fe ff4d 	bl	8001030 <PrintFloat>

			PrintString(huart1, " , y: ", 6);
 8002196:	4e64      	ldr	r6, [pc, #400]	; (8002328 <sendingFunction+0x378>)
 8002198:	2306      	movs	r3, #6
 800219a:	930e      	str	r3, [sp, #56]	; 0x38
 800219c:	4b65      	ldr	r3, [pc, #404]	; (8002334 <sendingFunction+0x384>)
 800219e:	930d      	str	r3, [sp, #52]	; 0x34
 80021a0:	466d      	mov	r5, sp
 80021a2:	f106 0410 	add.w	r4, r6, #16
 80021a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	602b      	str	r3, [r5, #0]
 80021b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021ba:	f7fe fecf 	bl	8000f5c <PrintString>

			PrintFloat(huart1, message.mag_y, 4);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4e59      	ldr	r6, [pc, #356]	; (8002328 <sendingFunction+0x378>)
 80021c2:	2204      	movs	r2, #4
 80021c4:	920e      	str	r2, [sp, #56]	; 0x38
 80021c6:	930d      	str	r3, [sp, #52]	; 0x34
 80021c8:	466d      	mov	r5, sp
 80021ca:	f106 0410 	add.w	r4, r6, #16
 80021ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	602b      	str	r3, [r5, #0]
 80021de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021e2:	f7fe ff25 	bl	8001030 <PrintFloat>

			PrintString(huart1, " , z: ", 6);
 80021e6:	4e50      	ldr	r6, [pc, #320]	; (8002328 <sendingFunction+0x378>)
 80021e8:	2306      	movs	r3, #6
 80021ea:	930e      	str	r3, [sp, #56]	; 0x38
 80021ec:	4b52      	ldr	r3, [pc, #328]	; (8002338 <sendingFunction+0x388>)
 80021ee:	930d      	str	r3, [sp, #52]	; 0x34
 80021f0:	466d      	mov	r5, sp
 80021f2:	f106 0410 	add.w	r4, r6, #16
 80021f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	602b      	str	r3, [r5, #0]
 8002206:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800220a:	f7fe fea7 	bl	8000f5c <PrintString>

			PrintFloat(huart1, message.mag_z, 4);
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	4e45      	ldr	r6, [pc, #276]	; (8002328 <sendingFunction+0x378>)
 8002212:	2204      	movs	r2, #4
 8002214:	920e      	str	r2, [sp, #56]	; 0x38
 8002216:	930d      	str	r3, [sp, #52]	; 0x34
 8002218:	466d      	mov	r5, sp
 800221a:	f106 0410 	add.w	r4, r6, #16
 800221e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	602b      	str	r3, [r5, #0]
 800222e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002232:	f7fe fefd 	bl	8001030 <PrintFloat>

			PrintString(huart1, " , temp: ", 9);
 8002236:	4e3c      	ldr	r6, [pc, #240]	; (8002328 <sendingFunction+0x378>)
 8002238:	2309      	movs	r3, #9
 800223a:	930e      	str	r3, [sp, #56]	; 0x38
 800223c:	4b3f      	ldr	r3, [pc, #252]	; (800233c <sendingFunction+0x38c>)
 800223e:	930d      	str	r3, [sp, #52]	; 0x34
 8002240:	466d      	mov	r5, sp
 8002242:	f106 0410 	add.w	r4, r6, #16
 8002246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	602b      	str	r3, [r5, #0]
 8002256:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800225a:	f7fe fe7f 	bl	8000f5c <PrintString>

			PrintFloat(huart1, message.temp, 4);
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4e31      	ldr	r6, [pc, #196]	; (8002328 <sendingFunction+0x378>)
 8002262:	2204      	movs	r2, #4
 8002264:	920e      	str	r2, [sp, #56]	; 0x38
 8002266:	930d      	str	r3, [sp, #52]	; 0x34
 8002268:	466d      	mov	r5, sp
 800226a:	f106 0410 	add.w	r4, r6, #16
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	602b      	str	r3, [r5, #0]
 800227e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002282:	f7fe fed5 	bl	8001030 <PrintFloat>

		  break;
 8002286:	e03e      	b.n	8002306 <sendingFunction+0x356>

		  case UNKNOWN_ERROR:

			PrintString(huart1, "Unknown error detected", 21);
 8002288:	4e27      	ldr	r6, [pc, #156]	; (8002328 <sendingFunction+0x378>)
 800228a:	2315      	movs	r3, #21
 800228c:	930e      	str	r3, [sp, #56]	; 0x38
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <sendingFunction+0x390>)
 8002290:	930d      	str	r3, [sp, #52]	; 0x34
 8002292:	466d      	mov	r5, sp
 8002294:	f106 0410 	add.w	r4, r6, #16
 8002298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	602b      	str	r3, [r5, #0]
 80022a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80022ac:	f7fe fe56 	bl	8000f5c <PrintString>

		  break;
 80022b0:	e029      	b.n	8002306 <sendingFunction+0x356>

		  case LIS3MDL_ERROR:

			PrintString(huart1, "The sensor has an error", 23);
 80022b2:	4e1d      	ldr	r6, [pc, #116]	; (8002328 <sendingFunction+0x378>)
 80022b4:	2317      	movs	r3, #23
 80022b6:	930e      	str	r3, [sp, #56]	; 0x38
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <sendingFunction+0x394>)
 80022ba:	930d      	str	r3, [sp, #52]	; 0x34
 80022bc:	466d      	mov	r5, sp
 80022be:	f106 0410 	add.w	r4, r6, #16
 80022c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	602b      	str	r3, [r5, #0]
 80022d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80022d6:	f7fe fe41 	bl	8000f5c <PrintString>

		  break;
 80022da:	e014      	b.n	8002306 <sendingFunction+0x356>

		  case MEMORY_ERROR:

			PrintString(huart1, "The memory has an error", 23);
 80022dc:	4e12      	ldr	r6, [pc, #72]	; (8002328 <sendingFunction+0x378>)
 80022de:	2317      	movs	r3, #23
 80022e0:	930e      	str	r3, [sp, #56]	; 0x38
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <sendingFunction+0x398>)
 80022e4:	930d      	str	r3, [sp, #52]	; 0x34
 80022e6:	466d      	mov	r5, sp
 80022e8:	f106 0410 	add.w	r4, r6, #16
 80022ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	602b      	str	r3, [r5, #0]
 80022fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002300:	f7fe fe2c 	bl	8000f5c <PrintString>

		  break;
 8002304:	bf00      	nop
		  case NO_ERROR:
		  case READ_DATA:
		  case SAVE_DATA: break;
		}

		PrintEnter(huart1);
 8002306:	4e08      	ldr	r6, [pc, #32]	; (8002328 <sendingFunction+0x378>)
 8002308:	466d      	mov	r5, sp
 800230a:	f106 0410 	add.w	r4, r6, #16
 800230e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	602b      	str	r3, [r5, #0]
 800231e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002322:	f7fe fe31 	bl	8000f88 <PrintEnter>
		xQueueReceive(queueUsartSender, &message, portMAX_DELAY);
 8002326:	e647      	b.n	8001fb8 <sendingFunction+0x8>
 8002328:	200003ac 	.word	0x200003ac
 800232c:	08009470 	.word	0x08009470
 8002330:	0800949c 	.word	0x0800949c
 8002334:	080094b0 	.word	0x080094b0
 8002338:	080094b8 	.word	0x080094b8
 800233c:	080094c0 	.word	0x080094c0
 8002340:	080094cc 	.word	0x080094cc
 8002344:	080094e4 	.word	0x080094e4
 8002348:	080094fc 	.word	0x080094fc

0800234c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800235e:	f000 fa3b 	bl	80027d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002378:	e7fe      	b.n	8002378 <Error_Handler+0x8>
	...

0800237c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_MspInit+0x68>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_MspInit+0x68>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6193      	str	r3, [r2, #24]
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_MspInit+0x68>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_MspInit+0x68>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <HAL_MspInit+0x68>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_MspInit+0x68>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	210f      	movs	r1, #15
 80023b6:	f06f 0001 	mvn.w	r0, #1
 80023ba:	f000 fb26 	bl	8002a0a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_MspInit+0x6c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_MspInit+0x6c>)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010000 	.word	0x40010000

080023ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a15      	ldr	r2, [pc, #84]	; (800245c <HAL_I2C_MspInit+0x70>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d123      	bne.n	8002454 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <HAL_I2C_MspInit+0x74>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a13      	ldr	r2, [pc, #76]	; (8002460 <HAL_I2C_MspInit+0x74>)
 8002412:	f043 0308 	orr.w	r3, r3, #8
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <HAL_I2C_MspInit+0x74>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002424:	23c0      	movs	r3, #192	; 0xc0
 8002426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002428:	2312      	movs	r3, #18
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	4619      	mov	r1, r3
 8002436:	480b      	ldr	r0, [pc, #44]	; (8002464 <HAL_I2C_MspInit+0x78>)
 8002438:	f000 fdbe 	bl	8002fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_I2C_MspInit+0x74>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_I2C_MspInit+0x74>)
 8002442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002446:	61d3      	str	r3, [r2, #28]
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_I2C_MspInit+0x74>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002454:	bf00      	nop
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40005400 	.word	0x40005400
 8002460:	40021000 	.word	0x40021000
 8002464:	40010c00 	.word	0x40010c00

08002468 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_SPI_MspInit+0x88>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d12f      	bne.n	80024e8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 800248e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6193      	str	r3, [r2, #24]
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024b8:	23a0      	movs	r3, #160	; 0xa0
 80024ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	4619      	mov	r1, r3
 80024ca:	480b      	ldr	r0, [pc, #44]	; (80024f8 <HAL_SPI_MspInit+0x90>)
 80024cc:	f000 fd74 	bl	8002fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <HAL_SPI_MspInit+0x90>)
 80024e4:	f000 fd68 	bl	8002fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024e8:	bf00      	nop
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40013000 	.word	0x40013000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010800 	.word	0x40010800

080024fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <HAL_UART_MspInit+0xe8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d15f      	bne.n	80025dc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_UART_MspInit+0xec>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_UART_MspInit+0xec>)
 8002522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_UART_MspInit+0xec>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <HAL_UART_MspInit+0xec>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a2b      	ldr	r2, [pc, #172]	; (80025e8 <HAL_UART_MspInit+0xec>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_UART_MspInit+0xec>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800254c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002550:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	4619      	mov	r1, r3
 8002560:	4822      	ldr	r0, [pc, #136]	; (80025ec <HAL_UART_MspInit+0xf0>)
 8002562:	f000 fd29 	bl	8002fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4619      	mov	r1, r3
 800257a:	481c      	ldr	r0, [pc, #112]	; (80025ec <HAL_UART_MspInit+0xf0>)
 800257c:	f000 fd1c 	bl	8002fb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_UART_MspInit+0xf8>)
 8002584:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025b0:	480f      	ldr	r0, [pc, #60]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 80025b2:	f000 fa63 	bl	8002a7c <HAL_DMA_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80025bc:	f7ff fed8 	bl	8002370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 80025c4:	639a      	str	r2, [r3, #56]	; 0x38
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_UART_MspInit+0xf4>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2105      	movs	r1, #5
 80025d0:	2025      	movs	r0, #37	; 0x25
 80025d2:	f000 fa1a 	bl	8002a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025d6:	2025      	movs	r0, #37	; 0x25
 80025d8:	f000 fa33 	bl	8002a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025dc:	bf00      	nop
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40010800 	.word	0x40010800
 80025f0:	200003f0 	.word	0x200003f0
 80025f4:	40020058 	.word	0x40020058

080025f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800260e:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <HAL_InitTick+0xd0>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4a2d      	ldr	r2, [pc, #180]	; (80026c8 <HAL_InitTick+0xd0>)
 8002614:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002618:	6193      	str	r3, [r2, #24]
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_InitTick+0xd0>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002626:	f107 020c 	add.w	r2, r7, #12
 800262a:	f107 0310 	add.w	r3, r7, #16
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fa71 	bl	8004b18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002636:	f002 fa5b 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 800263a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263e:	4a23      	ldr	r2, [pc, #140]	; (80026cc <HAL_InitTick+0xd4>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	0c9b      	lsrs	r3, r3, #18
 8002646:	3b01      	subs	r3, #1
 8002648:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <HAL_InitTick+0xd8>)
 800264c:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <HAL_InitTick+0xdc>)
 800264e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <HAL_InitTick+0xd8>)
 8002652:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002656:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_InitTick+0xd8>)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_InitTick+0xd8>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_InitTick+0xd8>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_InitTick+0xd8>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002670:	4817      	ldr	r0, [pc, #92]	; (80026d0 <HAL_InitTick+0xd8>)
 8002672:	f003 f80b 	bl	800568c <HAL_TIM_Base_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800267c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11b      	bne.n	80026bc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002684:	4812      	ldr	r0, [pc, #72]	; (80026d0 <HAL_InitTick+0xd8>)
 8002686:	f003 f859 	bl	800573c <HAL_TIM_Base_Start_IT>
 800268a:	4603      	mov	r3, r0
 800268c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002694:	2b00      	cmp	r3, #0
 8002696:	d111      	bne.n	80026bc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002698:	2019      	movs	r0, #25
 800269a:	f000 f9d2 	bl	8002a42 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d808      	bhi.n	80026b6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	2019      	movs	r0, #25
 80026aa:	f000 f9ae 	bl	8002a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_InitTick+0xe0>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e002      	b.n	80026bc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3730      	adds	r7, #48	; 0x30
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	200004b8 	.word	0x200004b8
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	20000004 	.word	0x20000004

080026dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <NMI_Handler+0x4>

080026e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e6:	e7fe      	b.n	80026e6 <HardFault_Handler+0x4>

080026e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ec:	e7fe      	b.n	80026ec <MemManage_Handler+0x4>

080026ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f2:	e7fe      	b.n	80026f2 <BusFault_Handler+0x4>

080026f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <UsageFault_Handler+0x4>

080026fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
	...

08002708 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <DMA1_Channel5_IRQHandler+0x10>)
 800270e:	f000 fb1f 	bl	8002d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200003f0 	.word	0x200003f0

0800271c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <TIM1_UP_IRQHandler+0x10>)
 8002722:	f003 f85d 	bl	80057e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200004b8 	.word	0x200004b8

08002730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <USART1_IRQHandler+0x10>)
 8002736:	f003 fb21 	bl	8005d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200003ac 	.word	0x200003ac

08002744 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8002748:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800274c:	f000 fdd0 	bl	80032f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002760:	480c      	ldr	r0, [pc, #48]	; (8002794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002762:	490d      	ldr	r1, [pc, #52]	; (8002798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800276c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002778:	4c0a      	ldr	r4, [pc, #40]	; (80027a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002786:	f7ff ffe5 	bl	8002754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800278a:	f006 fcd9 	bl	8009140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800278e:	f7ff f821 	bl	80017d4 <main>
  bx lr
 8002792:	4770      	bx	lr
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800279c:	08009674 	.word	0x08009674
  ldr r2, =_sbss
 80027a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80027a4:	20001250 	.word	0x20001250

080027a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC1_2_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_Init+0x28>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <HAL_Init+0x28>)
 80027b6:	f043 0310 	orr.w	r3, r3, #16
 80027ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027bc:	2003      	movs	r0, #3
 80027be:	f000 f919 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7ff ff18 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c8:	f7ff fdd8 	bl	800237c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40022000 	.word	0x40022000

080027d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_IncTick+0x1c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_IncTick+0x20>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <HAL_IncTick+0x20>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000008 	.word	0x20000008
 80027f8:	20000500 	.word	0x20000500

080027fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <HAL_GetTick+0x10>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000500 	.word	0x20000500

08002810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff fff0 	bl	80027fc <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d005      	beq.n	8002836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_Delay+0x44>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002836:	bf00      	nop
 8002838:	f7ff ffe0 	bl	80027fc <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d8f7      	bhi.n	8002838 <HAL_Delay+0x28>
  {
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000008 	.word	0x20000008

08002858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db0b      	blt.n	80028e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4906      	ldr	r1, [pc, #24]	; (80028f0 <__NVIC_EnableIRQ+0x34>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2001      	movs	r0, #1
 80028de:	fa00 f202 	lsl.w	r2, r0, r2
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db12      	blt.n	800292c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	490a      	ldr	r1, [pc, #40]	; (8002938 <__NVIC_DisableIRQ+0x44>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	3320      	adds	r3, #32
 800291c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002920:	f3bf 8f4f 	dsb	sy
}
 8002924:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002926:	f3bf 8f6f 	isb	sy
}
 800292a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000e100 	.word	0xe000e100

0800293c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	6039      	str	r1, [r7, #0]
 8002946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	2b00      	cmp	r3, #0
 800294e:	db0a      	blt.n	8002966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	b2da      	uxtb	r2, r3
 8002954:	490c      	ldr	r1, [pc, #48]	; (8002988 <__NVIC_SetPriority+0x4c>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	0112      	lsls	r2, r2, #4
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	440b      	add	r3, r1
 8002960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002964:	e00a      	b.n	800297c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4908      	ldr	r1, [pc, #32]	; (800298c <__NVIC_SetPriority+0x50>)
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	3b04      	subs	r3, #4
 8002974:	0112      	lsls	r2, r2, #4
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	440b      	add	r3, r1
 800297a:	761a      	strb	r2, [r3, #24]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000e100 	.word	0xe000e100
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f1c3 0307 	rsb	r3, r3, #7
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	bf28      	it	cs
 80029ae:	2304      	movcs	r3, #4
 80029b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2b06      	cmp	r3, #6
 80029b8:	d902      	bls.n	80029c0 <NVIC_EncodePriority+0x30>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3b03      	subs	r3, #3
 80029be:	e000      	b.n	80029c2 <NVIC_EncodePriority+0x32>
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	401a      	ands	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d8:	f04f 31ff 	mov.w	r1, #4294967295
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43d9      	mvns	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	4313      	orrs	r3, r2
         );
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff2b 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a1c:	f7ff ff40 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 8002a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7ff ffb2 	bl	8002990 <NVIC_EncodePriority>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff81 	bl	800293c <__NVIC_SetPriority>
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff33 	bl	80028bc <__NVIC_EnableIRQ>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff41 	bl	80028f4 <__NVIC_DisableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e043      	b.n	8002b1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_DMA_Init+0xa8>)
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a22      	ldr	r2, [pc, #136]	; (8002b28 <HAL_DMA_Init+0xac>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_DMA_Init+0xb0>)
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ac6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002aca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	bffdfff8 	.word	0xbffdfff8
 8002b28:	cccccccd 	.word	0xcccccccd
 8002b2c:	40020000 	.word	0x40020000

08002b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_DMA_Start_IT+0x20>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e04a      	b.n	8002be6 <HAL_DMA_Start_IT+0xb6>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d13a      	bne.n	8002bd8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f9e8 	bl	8002f5c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 020e 	orr.w	r2, r2, #14
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e00f      	b.n	8002bc6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0204 	bic.w	r2, r2, #4
 8002bb4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 020a 	orr.w	r2, r2, #10
 8002bc4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e005      	b.n	8002be4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d008      	beq.n	8002c16 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2204      	movs	r2, #4
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e020      	b.n	8002c58 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 020e 	bic.w	r2, r2, #14
 8002c24:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f202 	lsl.w	r2, r1, r2
 8002c44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d005      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	e051      	b.n	8002d2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 020e 	bic.w	r2, r2, #14
 8002c94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <HAL_DMA_Abort_IT+0xd0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d029      	beq.n	8002d04 <HAL_DMA_Abort_IT+0xa0>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <HAL_DMA_Abort_IT+0xd4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d022      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x9c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <HAL_DMA_Abort_IT+0xd8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d01a      	beq.n	8002cfa <HAL_DMA_Abort_IT+0x96>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <HAL_DMA_Abort_IT+0xdc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d012      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x90>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_DMA_Abort_IT+0xe0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00a      	beq.n	8002cee <HAL_DMA_Abort_IT+0x8a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_DMA_Abort_IT+0xe4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d102      	bne.n	8002ce8 <HAL_DMA_Abort_IT+0x84>
 8002ce2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ce6:	e00e      	b.n	8002d06 <HAL_DMA_Abort_IT+0xa2>
 8002ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cec:	e00b      	b.n	8002d06 <HAL_DMA_Abort_IT+0xa2>
 8002cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cf2:	e008      	b.n	8002d06 <HAL_DMA_Abort_IT+0xa2>
 8002cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf8:	e005      	b.n	8002d06 <HAL_DMA_Abort_IT+0xa2>
 8002cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfe:	e002      	b.n	8002d06 <HAL_DMA_Abort_IT+0xa2>
 8002d00:	2310      	movs	r3, #16
 8002d02:	e000      	b.n	8002d06 <HAL_DMA_Abort_IT+0xa2>
 8002d04:	2301      	movs	r3, #1
 8002d06:	4a11      	ldr	r2, [pc, #68]	; (8002d4c <HAL_DMA_Abort_IT+0xe8>)
 8002d08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
    } 
  }
  return status;
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40020008 	.word	0x40020008
 8002d38:	4002001c 	.word	0x4002001c
 8002d3c:	40020030 	.word	0x40020030
 8002d40:	40020044 	.word	0x40020044
 8002d44:	40020058 	.word	0x40020058
 8002d48:	4002006c 	.word	0x4002006c
 8002d4c:	40020000 	.word	0x40020000

08002d50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d04f      	beq.n	8002e18 <HAL_DMA_IRQHandler+0xc8>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d04a      	beq.n	8002e18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0204 	bic.w	r2, r2, #4
 8002d9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a66      	ldr	r2, [pc, #408]	; (8002f40 <HAL_DMA_IRQHandler+0x1f0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d029      	beq.n	8002dfe <HAL_DMA_IRQHandler+0xae>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a65      	ldr	r2, [pc, #404]	; (8002f44 <HAL_DMA_IRQHandler+0x1f4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xaa>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a63      	ldr	r2, [pc, #396]	; (8002f48 <HAL_DMA_IRQHandler+0x1f8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01a      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xa4>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a62      	ldr	r2, [pc, #392]	; (8002f4c <HAL_DMA_IRQHandler+0x1fc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d012      	beq.n	8002dee <HAL_DMA_IRQHandler+0x9e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a60      	ldr	r2, [pc, #384]	; (8002f50 <HAL_DMA_IRQHandler+0x200>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00a      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x98>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5f      	ldr	r2, [pc, #380]	; (8002f54 <HAL_DMA_IRQHandler+0x204>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d102      	bne.n	8002de2 <HAL_DMA_IRQHandler+0x92>
 8002ddc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002de0:	e00e      	b.n	8002e00 <HAL_DMA_IRQHandler+0xb0>
 8002de2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002de6:	e00b      	b.n	8002e00 <HAL_DMA_IRQHandler+0xb0>
 8002de8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dec:	e008      	b.n	8002e00 <HAL_DMA_IRQHandler+0xb0>
 8002dee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df2:	e005      	b.n	8002e00 <HAL_DMA_IRQHandler+0xb0>
 8002df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df8:	e002      	b.n	8002e00 <HAL_DMA_IRQHandler+0xb0>
 8002dfa:	2340      	movs	r3, #64	; 0x40
 8002dfc:	e000      	b.n	8002e00 <HAL_DMA_IRQHandler+0xb0>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	4a55      	ldr	r2, [pc, #340]	; (8002f58 <HAL_DMA_IRQHandler+0x208>)
 8002e02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8094 	beq.w	8002f36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e16:	e08e      	b.n	8002f36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d056      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x186>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d051      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10b      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 020a 	bic.w	r2, r2, #10
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <HAL_DMA_IRQHandler+0x1f0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d029      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x166>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a37      	ldr	r2, [pc, #220]	; (8002f44 <HAL_DMA_IRQHandler+0x1f4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x162>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a35      	ldr	r2, [pc, #212]	; (8002f48 <HAL_DMA_IRQHandler+0x1f8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01a      	beq.n	8002eac <HAL_DMA_IRQHandler+0x15c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a34      	ldr	r2, [pc, #208]	; (8002f4c <HAL_DMA_IRQHandler+0x1fc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d012      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x156>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a32      	ldr	r2, [pc, #200]	; (8002f50 <HAL_DMA_IRQHandler+0x200>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00a      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x150>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a31      	ldr	r2, [pc, #196]	; (8002f54 <HAL_DMA_IRQHandler+0x204>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d102      	bne.n	8002e9a <HAL_DMA_IRQHandler+0x14a>
 8002e94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e98:	e00e      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x168>
 8002e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9e:	e00b      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x168>
 8002ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea4:	e008      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x168>
 8002ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eaa:	e005      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x168>
 8002eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb0:	e002      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x168>
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e000      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x168>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <HAL_DMA_IRQHandler+0x208>)
 8002eba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d034      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ed4:	e02f      	b.n	8002f36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2208      	movs	r2, #8
 8002edc:	409a      	lsls	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d028      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x1e8>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d023      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020e 	bic.w	r2, r2, #14
 8002efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
    }
  }
  return;
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
}
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40020008 	.word	0x40020008
 8002f44:	4002001c 	.word	0x4002001c
 8002f48:	40020030 	.word	0x40020030
 8002f4c:	40020044 	.word	0x40020044
 8002f50:	40020058 	.word	0x40020058
 8002f54:	4002006c 	.word	0x4002006c
 8002f58:	40020000 	.word	0x40020000

08002f5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f202 	lsl.w	r2, r1, r2
 8002f78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d108      	bne.n	8002f9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f9a:	e007      	b.n	8002fac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b08b      	sub	sp, #44	; 0x2c
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fca:	e169      	b.n	80032a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fcc:	2201      	movs	r2, #1
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	f040 8158 	bne.w	800329a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a9a      	ldr	r2, [pc, #616]	; (8003258 <HAL_GPIO_Init+0x2a0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d05e      	beq.n	80030b2 <HAL_GPIO_Init+0xfa>
 8002ff4:	4a98      	ldr	r2, [pc, #608]	; (8003258 <HAL_GPIO_Init+0x2a0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d875      	bhi.n	80030e6 <HAL_GPIO_Init+0x12e>
 8002ffa:	4a98      	ldr	r2, [pc, #608]	; (800325c <HAL_GPIO_Init+0x2a4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d058      	beq.n	80030b2 <HAL_GPIO_Init+0xfa>
 8003000:	4a96      	ldr	r2, [pc, #600]	; (800325c <HAL_GPIO_Init+0x2a4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d86f      	bhi.n	80030e6 <HAL_GPIO_Init+0x12e>
 8003006:	4a96      	ldr	r2, [pc, #600]	; (8003260 <HAL_GPIO_Init+0x2a8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d052      	beq.n	80030b2 <HAL_GPIO_Init+0xfa>
 800300c:	4a94      	ldr	r2, [pc, #592]	; (8003260 <HAL_GPIO_Init+0x2a8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d869      	bhi.n	80030e6 <HAL_GPIO_Init+0x12e>
 8003012:	4a94      	ldr	r2, [pc, #592]	; (8003264 <HAL_GPIO_Init+0x2ac>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d04c      	beq.n	80030b2 <HAL_GPIO_Init+0xfa>
 8003018:	4a92      	ldr	r2, [pc, #584]	; (8003264 <HAL_GPIO_Init+0x2ac>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d863      	bhi.n	80030e6 <HAL_GPIO_Init+0x12e>
 800301e:	4a92      	ldr	r2, [pc, #584]	; (8003268 <HAL_GPIO_Init+0x2b0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d046      	beq.n	80030b2 <HAL_GPIO_Init+0xfa>
 8003024:	4a90      	ldr	r2, [pc, #576]	; (8003268 <HAL_GPIO_Init+0x2b0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d85d      	bhi.n	80030e6 <HAL_GPIO_Init+0x12e>
 800302a:	2b12      	cmp	r3, #18
 800302c:	d82a      	bhi.n	8003084 <HAL_GPIO_Init+0xcc>
 800302e:	2b12      	cmp	r3, #18
 8003030:	d859      	bhi.n	80030e6 <HAL_GPIO_Init+0x12e>
 8003032:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <HAL_GPIO_Init+0x80>)
 8003034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003038:	080030b3 	.word	0x080030b3
 800303c:	0800308d 	.word	0x0800308d
 8003040:	0800309f 	.word	0x0800309f
 8003044:	080030e1 	.word	0x080030e1
 8003048:	080030e7 	.word	0x080030e7
 800304c:	080030e7 	.word	0x080030e7
 8003050:	080030e7 	.word	0x080030e7
 8003054:	080030e7 	.word	0x080030e7
 8003058:	080030e7 	.word	0x080030e7
 800305c:	080030e7 	.word	0x080030e7
 8003060:	080030e7 	.word	0x080030e7
 8003064:	080030e7 	.word	0x080030e7
 8003068:	080030e7 	.word	0x080030e7
 800306c:	080030e7 	.word	0x080030e7
 8003070:	080030e7 	.word	0x080030e7
 8003074:	080030e7 	.word	0x080030e7
 8003078:	080030e7 	.word	0x080030e7
 800307c:	08003095 	.word	0x08003095
 8003080:	080030a9 	.word	0x080030a9
 8003084:	4a79      	ldr	r2, [pc, #484]	; (800326c <HAL_GPIO_Init+0x2b4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800308a:	e02c      	b.n	80030e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	623b      	str	r3, [r7, #32]
          break;
 8003092:	e029      	b.n	80030e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	623b      	str	r3, [r7, #32]
          break;
 800309c:	e024      	b.n	80030e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	3308      	adds	r3, #8
 80030a4:	623b      	str	r3, [r7, #32]
          break;
 80030a6:	e01f      	b.n	80030e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	330c      	adds	r3, #12
 80030ae:	623b      	str	r3, [r7, #32]
          break;
 80030b0:	e01a      	b.n	80030e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ba:	2304      	movs	r3, #4
 80030bc:	623b      	str	r3, [r7, #32]
          break;
 80030be:	e013      	b.n	80030e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c8:	2308      	movs	r3, #8
 80030ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	611a      	str	r2, [r3, #16]
          break;
 80030d2:	e009      	b.n	80030e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d4:	2308      	movs	r3, #8
 80030d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	615a      	str	r2, [r3, #20]
          break;
 80030de:	e003      	b.n	80030e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
          break;
 80030e4:	e000      	b.n	80030e8 <HAL_GPIO_Init+0x130>
          break;
 80030e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2bff      	cmp	r3, #255	; 0xff
 80030ec:	d801      	bhi.n	80030f2 <HAL_GPIO_Init+0x13a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	e001      	b.n	80030f6 <HAL_GPIO_Init+0x13e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	d802      	bhi.n	8003104 <HAL_GPIO_Init+0x14c>
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	e002      	b.n	800310a <HAL_GPIO_Init+0x152>
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	3b08      	subs	r3, #8
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	210f      	movs	r1, #15
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	401a      	ands	r2, r3
 800311c:	6a39      	ldr	r1, [r7, #32]
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	431a      	orrs	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80b1 	beq.w	800329a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003138:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	4a4c      	ldr	r2, [pc, #304]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6193      	str	r3, [r2, #24]
 8003144:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <HAL_GPIO_Init+0x2b8>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003150:	4a48      	ldr	r2, [pc, #288]	; (8003274 <HAL_GPIO_Init+0x2bc>)
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	3302      	adds	r3, #2
 8003158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	220f      	movs	r2, #15
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a40      	ldr	r2, [pc, #256]	; (8003278 <HAL_GPIO_Init+0x2c0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d013      	beq.n	80031a4 <HAL_GPIO_Init+0x1ec>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3f      	ldr	r2, [pc, #252]	; (800327c <HAL_GPIO_Init+0x2c4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00d      	beq.n	80031a0 <HAL_GPIO_Init+0x1e8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a3e      	ldr	r2, [pc, #248]	; (8003280 <HAL_GPIO_Init+0x2c8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d007      	beq.n	800319c <HAL_GPIO_Init+0x1e4>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3d      	ldr	r2, [pc, #244]	; (8003284 <HAL_GPIO_Init+0x2cc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_GPIO_Init+0x1e0>
 8003194:	2303      	movs	r3, #3
 8003196:	e006      	b.n	80031a6 <HAL_GPIO_Init+0x1ee>
 8003198:	2304      	movs	r3, #4
 800319a:	e004      	b.n	80031a6 <HAL_GPIO_Init+0x1ee>
 800319c:	2302      	movs	r3, #2
 800319e:	e002      	b.n	80031a6 <HAL_GPIO_Init+0x1ee>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_GPIO_Init+0x1ee>
 80031a4:	2300      	movs	r3, #0
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	f002 0203 	and.w	r2, r2, #3
 80031ac:	0092      	lsls	r2, r2, #2
 80031ae:	4093      	lsls	r3, r2
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031b6:	492f      	ldr	r1, [pc, #188]	; (8003274 <HAL_GPIO_Init+0x2bc>)
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031d0:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	492c      	ldr	r1, [pc, #176]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031de:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	4928      	ldr	r1, [pc, #160]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4922      	ldr	r1, [pc, #136]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
 8003204:	e006      	b.n	8003214 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	43db      	mvns	r3, r3
 800320e:	491e      	ldr	r1, [pc, #120]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 8003210:	4013      	ands	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	4918      	ldr	r1, [pc, #96]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800322e:	4b16      	ldr	r3, [pc, #88]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	43db      	mvns	r3, r3
 8003236:	4914      	ldr	r1, [pc, #80]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 8003238:	4013      	ands	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d021      	beq.n	800328c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	490e      	ldr	r1, [pc, #56]	; (8003288 <HAL_GPIO_Init+0x2d0>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	60cb      	str	r3, [r1, #12]
 8003254:	e021      	b.n	800329a <HAL_GPIO_Init+0x2e2>
 8003256:	bf00      	nop
 8003258:	10320000 	.word	0x10320000
 800325c:	10310000 	.word	0x10310000
 8003260:	10220000 	.word	0x10220000
 8003264:	10210000 	.word	0x10210000
 8003268:	10120000 	.word	0x10120000
 800326c:	10110000 	.word	0x10110000
 8003270:	40021000 	.word	0x40021000
 8003274:	40010000 	.word	0x40010000
 8003278:	40010800 	.word	0x40010800
 800327c:	40010c00 	.word	0x40010c00
 8003280:	40011000 	.word	0x40011000
 8003284:	40011400 	.word	0x40011400
 8003288:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_GPIO_Init+0x304>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	43db      	mvns	r3, r3
 8003294:	4909      	ldr	r1, [pc, #36]	; (80032bc <HAL_GPIO_Init+0x304>)
 8003296:	4013      	ands	r3, r2
 8003298:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	3301      	adds	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f47f ae8e 	bne.w	8002fcc <HAL_GPIO_Init+0x14>
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	372c      	adds	r7, #44	; 0x2c
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	40010400 	.word	0x40010400

080032c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
 80032cc:	4613      	mov	r3, r2
 80032ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032d0:	787b      	ldrb	r3, [r7, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032dc:	e003      	b.n	80032e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	041a      	lsls	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	611a      	str	r2, [r3, #16]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003306:	4a05      	ldr	r2, [pc, #20]	; (800331c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fd0c 	bl	8001d2c <HAL_GPIO_EXTI_Callback>
  }
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40010400 	.word	0x40010400

08003320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e12b      	b.n	800358a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff f850 	bl	80023ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003384:	f001 fba0 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 8003388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4a81      	ldr	r2, [pc, #516]	; (8003594 <HAL_I2C_Init+0x274>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d807      	bhi.n	80033a4 <HAL_I2C_Init+0x84>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a80      	ldr	r2, [pc, #512]	; (8003598 <HAL_I2C_Init+0x278>)
 8003398:	4293      	cmp	r3, r2
 800339a:	bf94      	ite	ls
 800339c:	2301      	movls	r3, #1
 800339e:	2300      	movhi	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e006      	b.n	80033b2 <HAL_I2C_Init+0x92>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a7d      	ldr	r2, [pc, #500]	; (800359c <HAL_I2C_Init+0x27c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	bf94      	ite	ls
 80033ac:	2301      	movls	r3, #1
 80033ae:	2300      	movhi	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e0e7      	b.n	800358a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a78      	ldr	r2, [pc, #480]	; (80035a0 <HAL_I2C_Init+0x280>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	0c9b      	lsrs	r3, r3, #18
 80033c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a6a      	ldr	r2, [pc, #424]	; (8003594 <HAL_I2C_Init+0x274>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d802      	bhi.n	80033f4 <HAL_I2C_Init+0xd4>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	3301      	adds	r3, #1
 80033f2:	e009      	b.n	8003408 <HAL_I2C_Init+0xe8>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	4a69      	ldr	r2, [pc, #420]	; (80035a4 <HAL_I2C_Init+0x284>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	3301      	adds	r3, #1
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	430b      	orrs	r3, r1
 800340e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800341a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	495c      	ldr	r1, [pc, #368]	; (8003594 <HAL_I2C_Init+0x274>)
 8003424:	428b      	cmp	r3, r1
 8003426:	d819      	bhi.n	800345c <HAL_I2C_Init+0x13c>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1e59      	subs	r1, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fbb1 f3f3 	udiv	r3, r1, r3
 8003436:	1c59      	adds	r1, r3, #1
 8003438:	f640 73fc 	movw	r3, #4092	; 0xffc
 800343c:	400b      	ands	r3, r1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_I2C_Init+0x138>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1e59      	subs	r1, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003456:	e051      	b.n	80034fc <HAL_I2C_Init+0x1dc>
 8003458:	2304      	movs	r3, #4
 800345a:	e04f      	b.n	80034fc <HAL_I2C_Init+0x1dc>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d111      	bne.n	8003488 <HAL_I2C_Init+0x168>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1e58      	subs	r0, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e012      	b.n	80034ae <HAL_I2C_Init+0x18e>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1e58      	subs	r0, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	0099      	lsls	r1, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	fbb0 f3f3 	udiv	r3, r0, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Init+0x196>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e022      	b.n	80034fc <HAL_I2C_Init+0x1dc>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10e      	bne.n	80034dc <HAL_I2C_Init+0x1bc>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1e58      	subs	r0, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	440b      	add	r3, r1
 80034cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034da:	e00f      	b.n	80034fc <HAL_I2C_Init+0x1dc>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	0099      	lsls	r1, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	6809      	ldr	r1, [r1, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800352a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6911      	ldr	r1, [r2, #16]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68d2      	ldr	r2, [r2, #12]
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	430b      	orrs	r3, r1
 800353e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	000186a0 	.word	0x000186a0
 8003598:	001e847f 	.word	0x001e847f
 800359c:	003d08ff 	.word	0x003d08ff
 80035a0:	431bde83 	.word	0x431bde83
 80035a4:	10624dd3 	.word	0x10624dd3

080035a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	460b      	mov	r3, r1
 80035bc:	813b      	strh	r3, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035c2:	f7ff f91b 	bl	80027fc <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	f040 80d9 	bne.w	8003788 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2319      	movs	r3, #25
 80035dc:	2201      	movs	r2, #1
 80035de:	496d      	ldr	r1, [pc, #436]	; (8003794 <HAL_I2C_Mem_Write+0x1ec>)
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fcc1 	bl	8003f68 <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0cc      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_I2C_Mem_Write+0x56>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e0c5      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d007      	beq.n	8003624 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003632:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2221      	movs	r2, #33	; 0x21
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a4d      	ldr	r2, [pc, #308]	; (8003798 <HAL_I2C_Mem_Write+0x1f0>)
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003666:	88f8      	ldrh	r0, [r7, #6]
 8003668:	893a      	ldrh	r2, [r7, #8]
 800366a:	8979      	ldrh	r1, [r7, #10]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4603      	mov	r3, r0
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 faf8 	bl	8003c6c <I2C_RequestMemoryWrite>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d052      	beq.n	8003728 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e081      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fd42 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b04      	cmp	r3, #4
 800369c:	d107      	bne.n	80036ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e06b      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d11b      	bne.n	8003728 <HAL_I2C_Mem_Write+0x180>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d017      	beq.n	8003728 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1aa      	bne.n	8003686 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fd2e 	bl	8004196 <I2C_WaitOnBTFFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b04      	cmp	r3, #4
 8003746:	d107      	bne.n	8003758 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003756:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e016      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	00100002 	.word	0x00100002
 8003798:	ffff0000 	.word	0xffff0000

0800379c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	; 0x30
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	4608      	mov	r0, r1
 80037a6:	4611      	mov	r1, r2
 80037a8:	461a      	mov	r2, r3
 80037aa:	4603      	mov	r3, r0
 80037ac:	817b      	strh	r3, [r7, #10]
 80037ae:	460b      	mov	r3, r1
 80037b0:	813b      	strh	r3, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ba:	f7ff f81f 	bl	80027fc <HAL_GetTick>
 80037be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	f040 8244 	bne.w	8003c56 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2319      	movs	r3, #25
 80037d4:	2201      	movs	r2, #1
 80037d6:	4982      	ldr	r1, [pc, #520]	; (80039e0 <HAL_I2C_Mem_Read+0x244>)
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fbc5 	bl	8003f68 <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	e237      	b.n	8003c58 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_I2C_Mem_Read+0x5a>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e230      	b.n	8003c58 <HAL_I2C_Mem_Read+0x4bc>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d007      	beq.n	800381c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2222      	movs	r2, #34	; 0x22
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a62      	ldr	r2, [pc, #392]	; (80039e4 <HAL_I2C_Mem_Read+0x248>)
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800385e:	88f8      	ldrh	r0, [r7, #6]
 8003860:	893a      	ldrh	r2, [r7, #8]
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4603      	mov	r3, r0
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fa92 	bl	8003d98 <I2C_RequestMemoryRead>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1ec      	b.n	8003c58 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d113      	bne.n	80038ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e1c0      	b.n	8003c30 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d11e      	bne.n	80038f4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038c6:	b672      	cpsid	i
}
 80038c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038f0:	b662      	cpsie	i
}
 80038f2:	e035      	b.n	8003960 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d11e      	bne.n	800393a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800390c:	b672      	cpsid	i
}
 800390e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003934:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003936:	b662      	cpsie	i
}
 8003938:	e012      	b.n	8003960 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003960:	e166      	b.n	8003c30 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	2b03      	cmp	r3, #3
 8003968:	f200 811f 	bhi.w	8003baa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	2b01      	cmp	r3, #1
 8003972:	d123      	bne.n	80039bc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fc4d 	bl	8004218 <I2C_WaitOnRXNEFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e167      	b.n	8003c58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ba:	e139      	b.n	8003c30 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d152      	bne.n	8003a6a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	2200      	movs	r2, #0
 80039cc:	4906      	ldr	r1, [pc, #24]	; (80039e8 <HAL_I2C_Mem_Read+0x24c>)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 faca 	bl	8003f68 <I2C_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e13c      	b.n	8003c58 <HAL_I2C_Mem_Read+0x4bc>
 80039de:	bf00      	nop
 80039e0:	00100002 	.word	0x00100002
 80039e4:	ffff0000 	.word	0xffff0000
 80039e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039ec:	b672      	cpsid	i
}
 80039ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a32:	b662      	cpsie	i
}
 8003a34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a68:	e0e2      	b.n	8003c30 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	2200      	movs	r2, #0
 8003a72:	497b      	ldr	r1, [pc, #492]	; (8003c60 <HAL_I2C_Mem_Read+0x4c4>)
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fa77 	bl	8003f68 <I2C_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0e9      	b.n	8003c58 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a94:	b672      	cpsid	i
}
 8003a96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003aca:	4b66      	ldr	r3, [pc, #408]	; (8003c64 <HAL_I2C_Mem_Read+0x4c8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	4a65      	ldr	r2, [pc, #404]	; (8003c68 <HAL_I2C_Mem_Read+0x4cc>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	0a1a      	lsrs	r2, r3, #8
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00da      	lsls	r2, r3, #3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d118      	bne.n	8003b22 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b12:	b662      	cpsie	i
}
 8003b14:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e09a      	b.n	8003c58 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d1d9      	bne.n	8003ae4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b72:	b662      	cpsie	i
}
 8003b74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ba8:	e042      	b.n	8003c30 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fb32 	bl	8004218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e04c      	b.n	8003c58 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d118      	bne.n	8003c30 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f47f ae94 	bne.w	8003962 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3728      	adds	r7, #40	; 0x28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	00010004 	.word	0x00010004
 8003c64:	20000000 	.word	0x20000000
 8003c68:	14f8b589 	.word	0x14f8b589

08003c6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	4608      	mov	r0, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	817b      	strh	r3, [r7, #10]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	813b      	strh	r3, [r7, #8]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f960 	bl	8003f68 <I2C_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cbc:	d103      	bne.n	8003cc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e05f      	b.n	8003d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cca:	897b      	ldrh	r3, [r7, #10]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	6a3a      	ldr	r2, [r7, #32]
 8003cde:	492d      	ldr	r1, [pc, #180]	; (8003d94 <I2C_RequestMemoryWrite+0x128>)
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f998 	bl	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e04c      	b.n	8003d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	6a39      	ldr	r1, [r7, #32]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fa02 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d107      	bne.n	8003d2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e02b      	b.n	8003d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d105      	bne.n	8003d44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d38:	893b      	ldrh	r3, [r7, #8]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	e021      	b.n	8003d88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d44:	893b      	ldrh	r3, [r7, #8]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	6a39      	ldr	r1, [r7, #32]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f9dc 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d107      	bne.n	8003d7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e005      	b.n	8003d8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7e:	893b      	ldrh	r3, [r7, #8]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	00010002 	.word	0x00010002

08003d98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]
 8003daa:	460b      	mov	r3, r1
 8003dac:	813b      	strh	r3, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f8c2 	bl	8003f68 <I2C_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00d      	beq.n	8003e06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df8:	d103      	bne.n	8003e02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e0aa      	b.n	8003f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	4952      	ldr	r1, [pc, #328]	; (8003f64 <I2C_RequestMemoryRead+0x1cc>)
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f8fa 	bl	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e097      	b.n	8003f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f964 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d107      	bne.n	8003e6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e076      	b.n	8003f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d105      	bne.n	8003e80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e74:	893b      	ldrh	r3, [r7, #8]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	611a      	str	r2, [r3, #16]
 8003e7e:	e021      	b.n	8003ec4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e80:	893b      	ldrh	r3, [r7, #8]
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	6a39      	ldr	r1, [r7, #32]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f93e 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d107      	bne.n	8003eb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e050      	b.n	8003f5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eba:	893b      	ldrh	r3, [r7, #8]
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec6:	6a39      	ldr	r1, [r7, #32]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f923 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d107      	bne.n	8003eec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e035      	b.n	8003f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f82b 	bl	8003f68 <I2C_WaitOnFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	d103      	bne.n	8003f30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e013      	b.n	8003f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f34:	897b      	ldrh	r3, [r7, #10]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	6a3a      	ldr	r2, [r7, #32]
 8003f48:	4906      	ldr	r1, [pc, #24]	; (8003f64 <I2C_RequestMemoryRead+0x1cc>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f863 	bl	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	00010002 	.word	0x00010002

08003f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f78:	e025      	b.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d021      	beq.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fe fc3b 	bl	80027fc <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d116      	bne.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e023      	b.n	800400e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d10d      	bne.n	8003fec <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf0c      	ite	eq
 8003fe2:	2301      	moveq	r3, #1
 8003fe4:	2300      	movne	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	e00c      	b.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf0c      	ite	eq
 8003ffe:	2301      	moveq	r3, #1
 8004000:	2300      	movne	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	429a      	cmp	r2, r3
 800400a:	d0b6      	beq.n	8003f7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004024:	e051      	b.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004034:	d123      	bne.n	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004044:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800404e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f043 0204 	orr.w	r2, r3, #4
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e046      	b.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d021      	beq.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004086:	f7fe fbb9 	bl	80027fc <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d116      	bne.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e020      	b.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10c      	bne.n	80040ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e00b      	b.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	43da      	mvns	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d18d      	bne.n	8004026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004120:	e02d      	b.n	800417e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f8ce 	bl	80042c4 <I2C_IsAcknowledgeFailed>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e02d      	b.n	800418e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d021      	beq.n	800417e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fe fb5f 	bl	80027fc <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d116      	bne.n	800417e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e007      	b.n	800418e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b80      	cmp	r3, #128	; 0x80
 800418a:	d1ca      	bne.n	8004122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041a2:	e02d      	b.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f88d 	bl	80042c4 <I2C_IsAcknowledgeFailed>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e02d      	b.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d021      	beq.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041bc:	f7fe fb1e 	bl	80027fc <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d116      	bne.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e007      	b.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b04      	cmp	r3, #4
 800420c:	d1ca      	bne.n	80041a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004224:	e042      	b.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b10      	cmp	r3, #16
 8004232:	d119      	bne.n	8004268 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0210 	mvn.w	r2, #16
 800423c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e029      	b.n	80042bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004268:	f7fe fac8 	bl	80027fc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	429a      	cmp	r2, r3
 8004276:	d302      	bcc.n	800427e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d116      	bne.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e007      	b.n	80042bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d1b5      	bne.n	8004226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d11b      	bne.n	8004314 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f043 0204 	orr.w	r2, r3, #4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e272      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8087 	beq.w	800444e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004340:	4b92      	ldr	r3, [pc, #584]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b04      	cmp	r3, #4
 800434a:	d00c      	beq.n	8004366 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800434c:	4b8f      	ldr	r3, [pc, #572]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b08      	cmp	r3, #8
 8004356:	d112      	bne.n	800437e <HAL_RCC_OscConfig+0x5e>
 8004358:	4b8c      	ldr	r3, [pc, #560]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d10b      	bne.n	800437e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004366:	4b89      	ldr	r3, [pc, #548]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d06c      	beq.n	800444c <HAL_RCC_OscConfig+0x12c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d168      	bne.n	800444c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e24c      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x76>
 8004388:	4b80      	ldr	r3, [pc, #512]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a7f      	ldr	r2, [pc, #508]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e02e      	b.n	80043f4 <HAL_RCC_OscConfig+0xd4>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x98>
 800439e:	4b7b      	ldr	r3, [pc, #492]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7a      	ldr	r2, [pc, #488]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b78      	ldr	r3, [pc, #480]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a77      	ldr	r2, [pc, #476]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e01d      	b.n	80043f4 <HAL_RCC_OscConfig+0xd4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0xbc>
 80043c2:	4b72      	ldr	r3, [pc, #456]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a71      	ldr	r2, [pc, #452]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b6f      	ldr	r3, [pc, #444]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6e      	ldr	r2, [pc, #440]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0xd4>
 80043dc:	4b6b      	ldr	r3, [pc, #428]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6a      	ldr	r2, [pc, #424]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b68      	ldr	r3, [pc, #416]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a67      	ldr	r2, [pc, #412]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80043ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fe f9fe 	bl	80027fc <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004404:	f7fe f9fa 	bl	80027fc <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	; 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e200      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b5d      	ldr	r3, [pc, #372]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0xe4>
 8004422:	e014      	b.n	800444e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fe f9ea 	bl	80027fc <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442c:	f7fe f9e6 	bl	80027fc <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e1ec      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	4b53      	ldr	r3, [pc, #332]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x10c>
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d063      	beq.n	8004522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800445a:	4b4c      	ldr	r3, [pc, #304]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004466:	4b49      	ldr	r3, [pc, #292]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b08      	cmp	r3, #8
 8004470:	d11c      	bne.n	80044ac <HAL_RCC_OscConfig+0x18c>
 8004472:	4b46      	ldr	r3, [pc, #280]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d116      	bne.n	80044ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447e:	4b43      	ldr	r3, [pc, #268]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_RCC_OscConfig+0x176>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d001      	beq.n	8004496 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e1c0      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	4b3d      	ldr	r3, [pc, #244]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4939      	ldr	r1, [pc, #228]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	e03a      	b.n	8004522 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b4:	4b36      	ldr	r3, [pc, #216]	; (8004590 <HAL_RCC_OscConfig+0x270>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fe f99f 	bl	80027fc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fe f99b 	bl	80027fc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e1a1      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	4b2d      	ldr	r3, [pc, #180]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e0:	4b2a      	ldr	r3, [pc, #168]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4927      	ldr	r1, [pc, #156]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	600b      	str	r3, [r1, #0]
 80044f4:	e015      	b.n	8004522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f6:	4b26      	ldr	r3, [pc, #152]	; (8004590 <HAL_RCC_OscConfig+0x270>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fe f97e 	bl	80027fc <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004504:	f7fe f97a 	bl	80027fc <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e180      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	4b1d      	ldr	r3, [pc, #116]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d03a      	beq.n	80045a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d019      	beq.n	800456a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004536:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_RCC_OscConfig+0x274>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453c:	f7fe f95e 	bl	80027fc <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004544:	f7fe f95a 	bl	80027fc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e160      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_RCC_OscConfig+0x26c>)
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004562:	2001      	movs	r0, #1
 8004564:	f000 fb08 	bl	8004b78 <RCC_Delay>
 8004568:	e01c      	b.n	80045a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_RCC_OscConfig+0x274>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004570:	f7fe f944 	bl	80027fc <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004576:	e00f      	b.n	8004598 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004578:	f7fe f940 	bl	80027fc <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d908      	bls.n	8004598 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e146      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
 8004590:	42420000 	.word	0x42420000
 8004594:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4b92      	ldr	r3, [pc, #584]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e9      	bne.n	8004578 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80a6 	beq.w	80046fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b6:	4b8b      	ldr	r3, [pc, #556]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10d      	bne.n	80045de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	4b88      	ldr	r3, [pc, #544]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4a87      	ldr	r2, [pc, #540]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045cc:	61d3      	str	r3, [r2, #28]
 80045ce:	4b85      	ldr	r3, [pc, #532]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045de:	4b82      	ldr	r3, [pc, #520]	; (80047e8 <HAL_RCC_OscConfig+0x4c8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d118      	bne.n	800461c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ea:	4b7f      	ldr	r3, [pc, #508]	; (80047e8 <HAL_RCC_OscConfig+0x4c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a7e      	ldr	r2, [pc, #504]	; (80047e8 <HAL_RCC_OscConfig+0x4c8>)
 80045f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f6:	f7fe f901 	bl	80027fc <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fe:	f7fe f8fd 	bl	80027fc <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b64      	cmp	r3, #100	; 0x64
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e103      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004610:	4b75      	ldr	r3, [pc, #468]	; (80047e8 <HAL_RCC_OscConfig+0x4c8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x312>
 8004624:	4b6f      	ldr	r3, [pc, #444]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4a6e      	ldr	r2, [pc, #440]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6213      	str	r3, [r2, #32]
 8004630:	e02d      	b.n	800468e <HAL_RCC_OscConfig+0x36e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10c      	bne.n	8004654 <HAL_RCC_OscConfig+0x334>
 800463a:	4b6a      	ldr	r3, [pc, #424]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4a69      	ldr	r2, [pc, #420]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	6213      	str	r3, [r2, #32]
 8004646:	4b67      	ldr	r3, [pc, #412]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	4a66      	ldr	r2, [pc, #408]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	6213      	str	r3, [r2, #32]
 8004652:	e01c      	b.n	800468e <HAL_RCC_OscConfig+0x36e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b05      	cmp	r3, #5
 800465a:	d10c      	bne.n	8004676 <HAL_RCC_OscConfig+0x356>
 800465c:	4b61      	ldr	r3, [pc, #388]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	4a60      	ldr	r2, [pc, #384]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004662:	f043 0304 	orr.w	r3, r3, #4
 8004666:	6213      	str	r3, [r2, #32]
 8004668:	4b5e      	ldr	r3, [pc, #376]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	4a5d      	ldr	r2, [pc, #372]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	6213      	str	r3, [r2, #32]
 8004674:	e00b      	b.n	800468e <HAL_RCC_OscConfig+0x36e>
 8004676:	4b5b      	ldr	r3, [pc, #364]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	4a5a      	ldr	r2, [pc, #360]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	6213      	str	r3, [r2, #32]
 8004682:	4b58      	ldr	r3, [pc, #352]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	4a57      	ldr	r2, [pc, #348]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d015      	beq.n	80046c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004696:	f7fe f8b1 	bl	80027fc <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fe f8ad 	bl	80027fc <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0b1      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b4:	4b4b      	ldr	r3, [pc, #300]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0ee      	beq.n	800469e <HAL_RCC_OscConfig+0x37e>
 80046c0:	e014      	b.n	80046ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c2:	f7fe f89b 	bl	80027fc <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fe f897 	bl	80027fc <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e09b      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e0:	4b40      	ldr	r3, [pc, #256]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1ee      	bne.n	80046ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f2:	4b3c      	ldr	r3, [pc, #240]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	4a3b      	ldr	r2, [pc, #236]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8087 	beq.w	8004816 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004708:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d061      	beq.n	80047d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d146      	bne.n	80047aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471c:	4b33      	ldr	r3, [pc, #204]	; (80047ec <HAL_RCC_OscConfig+0x4cc>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004722:	f7fe f86b 	bl	80027fc <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472a:	f7fe f867 	bl	80027fc <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e06d      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800473c:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f0      	bne.n	800472a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d108      	bne.n	8004764 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	4921      	ldr	r1, [pc, #132]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004764:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a19      	ldr	r1, [r3, #32]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	430b      	orrs	r3, r1
 8004776:	491b      	ldr	r1, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x4cc>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004782:	f7fe f83b 	bl	80027fc <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478a:	f7fe f837 	bl	80027fc <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e03d      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x46a>
 80047a8:	e035      	b.n	8004816 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_RCC_OscConfig+0x4cc>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fe f824 	bl	80027fc <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fe f820 	bl	80027fc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e026      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x498>
 80047d6:	e01e      	b.n	8004816 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e019      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40007000 	.word	0x40007000
 80047ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <HAL_RCC_OscConfig+0x500>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	429a      	cmp	r2, r3
 8004802:	d106      	bne.n	8004812 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000

08004824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0d0      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d910      	bls.n	8004868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b67      	ldr	r3, [pc, #412]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 0207 	bic.w	r2, r3, #7
 800484e:	4965      	ldr	r1, [pc, #404]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b8      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004880:	4b59      	ldr	r3, [pc, #356]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a58      	ldr	r2, [pc, #352]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800488a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b50      	ldr	r3, [pc, #320]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	494d      	ldr	r1, [pc, #308]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d040      	beq.n	8004944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d115      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07f      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e073      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	4b3d      	ldr	r3, [pc, #244]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e06b      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4936      	ldr	r1, [pc, #216]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004914:	f7fd ff72 	bl	80027fc <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fd ff6e 	bl	80027fc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e053      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004944:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d210      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 0207 	bic.w	r2, r3, #7
 800495a:	4922      	ldr	r1, [pc, #136]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e032      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4916      	ldr	r1, [pc, #88]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490e      	ldr	r1, [pc, #56]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049b2:	f000 f821 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	490a      	ldr	r1, [pc, #40]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <HAL_RCC_ClockConfig+0x1cc>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <HAL_RCC_ClockConfig+0x1d0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd fe10 	bl	80025f8 <HAL_InitTick>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40022000 	.word	0x40022000
 80049e8:	40021000 	.word	0x40021000
 80049ec:	0800952c 	.word	0x0800952c
 80049f0:	20000000 	.word	0x20000000
 80049f4:	20000004 	.word	0x20000004

080049f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	b490      	push	{r4, r7}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049fe:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004a00:	1d3c      	adds	r4, r7, #4
 8004a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a08:	f240 2301 	movw	r3, #513	; 0x201
 8004a0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a22:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d002      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x40>
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d003      	beq.n	8004a3e <HAL_RCC_GetSysClockFreq+0x46>
 8004a36:	e02b      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a38:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a3a:	623b      	str	r3, [r7, #32]
      break;
 8004a3c:	e02b      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	0c9b      	lsrs	r3, r3, #18
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	3328      	adds	r3, #40	; 0x28
 8004a48:	443b      	add	r3, r7
 8004a4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d012      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	0c5b      	lsrs	r3, r3, #17
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	3328      	adds	r3, #40	; 0x28
 8004a66:	443b      	add	r3, r7
 8004a68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a72:	fb03 f202 	mul.w	r2, r3, r2
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	e004      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4a0b      	ldr	r2, [pc, #44]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a84:	fb02 f303 	mul.w	r3, r2, r3
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	623b      	str	r3, [r7, #32]
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a92:	623b      	str	r3, [r7, #32]
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	6a3b      	ldr	r3, [r7, #32]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3728      	adds	r7, #40	; 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc90      	pop	{r4, r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	08009514 	.word	0x08009514
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	007a1200 	.word	0x007a1200
 8004ab0:	003d0900 	.word	0x003d0900

08004ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab8:	4b02      	ldr	r3, [pc, #8]	; (8004ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	20000000 	.word	0x20000000

08004ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004acc:	f7ff fff2 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	0800953c 	.word	0x0800953c

08004af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004af4:	f7ff ffde 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	0adb      	lsrs	r3, r3, #11
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	0800953c 	.word	0x0800953c

08004b18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	220f      	movs	r2, #15
 8004b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b28:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <HAL_RCC_GetClockConfig+0x58>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0203 	and.w	r2, r3, #3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b34:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <HAL_RCC_GetClockConfig+0x58>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_GetClockConfig+0x58>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_RCC_GetClockConfig+0x58>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	08db      	lsrs	r3, r3, #3
 8004b52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCC_GetClockConfig+0x5c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0207 	and.w	r2, r3, #7
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40022000 	.word	0x40022000

08004b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <RCC_Delay+0x34>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <RCC_Delay+0x38>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	0a5b      	lsrs	r3, r3, #9
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b94:	bf00      	nop
  }
  while (Delay --);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1e5a      	subs	r2, r3, #1
 8004b9a:	60fa      	str	r2, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f9      	bne.n	8004b94 <RCC_Delay+0x1c>
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	10624dd3 	.word	0x10624dd3

08004bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e076      	b.n	8004cb4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d108      	bne.n	8004be0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd6:	d009      	beq.n	8004bec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	61da      	str	r2, [r3, #28]
 8004bde:	e005      	b.n	8004bec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fd fc2e 	bl	8002468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	ea42 0103 	orr.w	r1, r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	0c1a      	lsrs	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f002 0204 	and.w	r2, r2, #4
 8004c92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69da      	ldr	r2, [r3, #28]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_SPI_Transmit+0x22>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e126      	b.n	8004f2c <HAL_SPI_Transmit+0x270>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce6:	f7fd fd89 	bl	80027fc <HAL_GetTick>
 8004cea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d00:	e10b      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_SPI_Transmit+0x52>
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d12:	e102      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2203      	movs	r2, #3
 8004d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	88fa      	ldrh	r2, [r7, #6]
 8004d32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5a:	d10f      	bne.n	8004d7c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d007      	beq.n	8004d9a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da2:	d14b      	bne.n	8004e3c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_SPI_Transmit+0xf6>
 8004dac:	8afb      	ldrh	r3, [r7, #22]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d13e      	bne.n	8004e30 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	881a      	ldrh	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	1c9a      	adds	r2, r3, #2
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dd6:	e02b      	b.n	8004e30 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d112      	bne.n	8004e0c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	881a      	ldrh	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	1c9a      	adds	r2, r3, #2
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e0a:	e011      	b.n	8004e30 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e0c:	f7fd fcf6 	bl	80027fc <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d803      	bhi.n	8004e24 <HAL_SPI_Transmit+0x168>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d102      	bne.n	8004e2a <HAL_SPI_Transmit+0x16e>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e2e:	e074      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1ce      	bne.n	8004dd8 <HAL_SPI_Transmit+0x11c>
 8004e3a:	e04c      	b.n	8004ed6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_SPI_Transmit+0x18e>
 8004e44:	8afb      	ldrh	r3, [r7, #22]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d140      	bne.n	8004ecc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	7812      	ldrb	r2, [r2, #0]
 8004e56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e70:	e02c      	b.n	8004ecc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d113      	bne.n	8004ea8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	7812      	ldrb	r2, [r2, #0]
 8004e8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ea6:	e011      	b.n	8004ecc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ea8:	f7fd fca8 	bl	80027fc <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d803      	bhi.n	8004ec0 <HAL_SPI_Transmit+0x204>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d102      	bne.n	8004ec6 <HAL_SPI_Transmit+0x20a>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eca:	e026      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1cd      	bne.n	8004e72 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fbb8 	bl	8005650 <SPI_EndRxTxTransaction>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e000      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f50:	d112      	bne.n	8004f78 <HAL_SPI_Receive+0x44>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10e      	bne.n	8004f78 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f8f1 	bl	8005156 <HAL_SPI_TransmitReceive>
 8004f74:	4603      	mov	r3, r0
 8004f76:	e0ea      	b.n	800514e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_SPI_Receive+0x52>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0e3      	b.n	800514e <HAL_SPI_Receive+0x21a>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f8e:	f7fd fc35 	bl	80027fc <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d002      	beq.n	8004fa6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fa4:	e0ca      	b.n	800513c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_SPI_Receive+0x7e>
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d102      	bne.n	8004fb8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fb6:	e0c1      	b.n	800513c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	88fa      	ldrh	r2, [r7, #6]
 8004fd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	88fa      	ldrh	r2, [r7, #6]
 8004fd6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ffe:	d10f      	bne.n	8005020 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800501e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502a:	2b40      	cmp	r3, #64	; 0x40
 800502c:	d007      	beq.n	800503e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800503c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d162      	bne.n	800510c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005046:	e02e      	b.n	80050a6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b01      	cmp	r3, #1
 8005054:	d115      	bne.n	8005082 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f103 020c 	add.w	r2, r3, #12
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	7812      	ldrb	r2, [r2, #0]
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005080:	e011      	b.n	80050a6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005082:	f7fd fbbb 	bl	80027fc <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d803      	bhi.n	800509a <HAL_SPI_Receive+0x166>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d102      	bne.n	80050a0 <HAL_SPI_Receive+0x16c>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d102      	bne.n	80050a6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050a4:	e04a      	b.n	800513c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1cb      	bne.n	8005048 <HAL_SPI_Receive+0x114>
 80050b0:	e031      	b.n	8005116 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d113      	bne.n	80050e8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	b292      	uxth	r2, r2
 80050cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	1c9a      	adds	r2, r3, #2
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050e6:	e011      	b.n	800510c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e8:	f7fd fb88 	bl	80027fc <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d803      	bhi.n	8005100 <HAL_SPI_Receive+0x1cc>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fe:	d102      	bne.n	8005106 <HAL_SPI_Receive+0x1d2>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	75fb      	strb	r3, [r7, #23]
          goto error;
 800510a:	e017      	b.n	800513c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1cd      	bne.n	80050b2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fa46 	bl	80055ac <SPI_EndRxTransaction>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
 8005138:	e000      	b.n	800513c <HAL_SPI_Receive+0x208>
  }

error :
 800513a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b08c      	sub	sp, #48	; 0x30
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005164:	2301      	movs	r3, #1
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_SPI_TransmitReceive+0x26>
 8005178:	2302      	movs	r3, #2
 800517a:	e18a      	b.n	8005492 <HAL_SPI_TransmitReceive+0x33c>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005184:	f7fd fb3a 	bl	80027fc <HAL_GetTick>
 8005188:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800519e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d00f      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x70>
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ac:	d107      	bne.n	80051be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <HAL_SPI_TransmitReceive+0x68>
 80051b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d003      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80051be:	2302      	movs	r3, #2
 80051c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051c4:	e15b      	b.n	800547e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x82>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x82>
 80051d2:	887b      	ldrh	r3, [r7, #2]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d103      	bne.n	80051e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051de:	e14e      	b.n	800547e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d003      	beq.n	80051f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2205      	movs	r2, #5
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	887a      	ldrh	r2, [r7, #2]
 8005204:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	887a      	ldrh	r2, [r7, #2]
 800520a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	887a      	ldrh	r2, [r7, #2]
 800521c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d007      	beq.n	8005248 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005246:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005250:	d178      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x10a>
 800525a:	8b7b      	ldrh	r3, [r7, #26]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d166      	bne.n	800532e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	881a      	ldrh	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	1c9a      	adds	r2, r3, #2
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005284:	e053      	b.n	800532e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	d11b      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x176>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d016      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x176>
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d113      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	881a      	ldrh	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	1c9a      	adds	r2, r3, #2
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d119      	bne.n	800530e <HAL_SPI_TransmitReceive+0x1b8>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d014      	beq.n	800530e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	b292      	uxth	r2, r2
 80052f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800530a:	2301      	movs	r3, #1
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800530e:	f7fd fa75 	bl	80027fc <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531a:	429a      	cmp	r2, r3
 800531c:	d807      	bhi.n	800532e <HAL_SPI_TransmitReceive+0x1d8>
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d003      	beq.n	800532e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800532c:	e0a7      	b.n	800547e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1a6      	bne.n	8005286 <HAL_SPI_TransmitReceive+0x130>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1a1      	bne.n	8005286 <HAL_SPI_TransmitReceive+0x130>
 8005342:	e07c      	b.n	800543e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x1fc>
 800534c:	8b7b      	ldrh	r3, [r7, #26]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d16b      	bne.n	800542a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	7812      	ldrb	r2, [r2, #0]
 800535e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005378:	e057      	b.n	800542a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d11c      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x26c>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d017      	beq.n	80053c2 <HAL_SPI_TransmitReceive+0x26c>
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d114      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d119      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x2ae>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d014      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005400:	2301      	movs	r3, #1
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005404:	f7fd f9fa 	bl	80027fc <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005410:	429a      	cmp	r2, r3
 8005412:	d803      	bhi.n	800541c <HAL_SPI_TransmitReceive+0x2c6>
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d102      	bne.n	8005422 <HAL_SPI_TransmitReceive+0x2cc>
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005428:	e029      	b.n	800547e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1a2      	bne.n	800537a <HAL_SPI_TransmitReceive+0x224>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d19d      	bne.n	800537a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f904 	bl	8005650 <SPI_EndRxTxTransaction>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d006      	beq.n	800545c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800545a:	e010      	b.n	800547e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10b      	bne.n	800547c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	e000      	b.n	800547e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800547c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800548e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005492:	4618      	mov	r0, r3
 8005494:	3730      	adds	r7, #48	; 0x30
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054ac:	f7fd f9a6 	bl	80027fc <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	4413      	add	r3, r2
 80054ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054bc:	f7fd f99e 	bl	80027fc <HAL_GetTick>
 80054c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054c2:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	015b      	lsls	r3, r3, #5
 80054c8:	0d1b      	lsrs	r3, r3, #20
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	fb02 f303 	mul.w	r3, r2, r3
 80054d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054d2:	e054      	b.n	800557e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d050      	beq.n	800557e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054dc:	f7fd f98e 	bl	80027fc <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d902      	bls.n	80054f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d13d      	bne.n	800556e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550a:	d111      	bne.n	8005530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005514:	d004      	beq.n	8005520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551e:	d107      	bne.n	8005530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800552e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005538:	d10f      	bne.n	800555a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e017      	b.n	800559e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3b01      	subs	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4013      	ands	r3, r2
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	429a      	cmp	r2, r3
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	429a      	cmp	r2, r3
 800559a:	d19b      	bne.n	80054d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000000 	.word	0x20000000

080055ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c0:	d111      	bne.n	80055e6 <SPI_EndRxTransaction+0x3a>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ca:	d004      	beq.n	80055d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d4:	d107      	bne.n	80055e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ee:	d117      	bne.n	8005620 <SPI_EndRxTransaction+0x74>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f8:	d112      	bne.n	8005620 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2200      	movs	r2, #0
 8005602:	2101      	movs	r1, #1
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff ff49 	bl	800549c <SPI_WaitFlagStateUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01a      	beq.n	8005646 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e013      	b.n	8005648 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2200      	movs	r2, #0
 8005628:	2180      	movs	r1, #128	; 0x80
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff ff36 	bl	800549c <SPI_WaitFlagStateUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e000      	b.n	8005648 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2200      	movs	r2, #0
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff ff18 	bl	800549c <SPI_WaitFlagStateUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e000      	b.n	8005684 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e041      	b.n	8005722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f839 	bl	800572a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f000 f9b4 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr

0800573c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d001      	beq.n	8005754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e03a      	b.n	80057ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a18      	ldr	r2, [pc, #96]	; (80057d4 <HAL_TIM_Base_Start_IT+0x98>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00e      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x58>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577e:	d009      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x58>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a14      	ldr	r2, [pc, #80]	; (80057d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x58>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a13      	ldr	r2, [pc, #76]	; (80057dc <HAL_TIM_Base_Start_IT+0xa0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d111      	bne.n	80057b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b06      	cmp	r3, #6
 80057a4:	d010      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0201 	orr.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b6:	e007      	b.n	80057c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800

080057e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0202 	mvn.w	r2, #2
 800580c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8ed 	bl	8005a02 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f8e0 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f8ef 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d122      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0204 	mvn.w	r2, #4
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8c3 	bl	8005a02 <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f8b6 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8c5 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b08      	cmp	r3, #8
 800589c:	d122      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d11b      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0208 	mvn.w	r2, #8
 80058b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f899 	bl	8005a02 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f88c 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f89b 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d122      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d11b      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0210 	mvn.w	r2, #16
 8005908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2208      	movs	r2, #8
 800590e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f86f 	bl	8005a02 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f862 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f871 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0201 	mvn.w	r2, #1
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fc fcf4 	bl	800234c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8bf 	bl	8005b0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f835 	bl	8005a26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d10e      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d107      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0220 	mvn.w	r2, #32
 80059e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f88a 	bl	8005afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr

08005a26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a29      	ldr	r2, [pc, #164]	; (8005af0 <TIM_Base_SetConfig+0xb8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00b      	beq.n	8005a68 <TIM_Base_SetConfig+0x30>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a56:	d007      	beq.n	8005a68 <TIM_Base_SetConfig+0x30>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a26      	ldr	r2, [pc, #152]	; (8005af4 <TIM_Base_SetConfig+0xbc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_Base_SetConfig+0x30>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a25      	ldr	r2, [pc, #148]	; (8005af8 <TIM_Base_SetConfig+0xc0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d108      	bne.n	8005a7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <TIM_Base_SetConfig+0xb8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00b      	beq.n	8005a9a <TIM_Base_SetConfig+0x62>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a88:	d007      	beq.n	8005a9a <TIM_Base_SetConfig+0x62>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <TIM_Base_SetConfig+0xbc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d003      	beq.n	8005a9a <TIM_Base_SetConfig+0x62>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <TIM_Base_SetConfig+0xc0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d108      	bne.n	8005aac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a07      	ldr	r2, [pc, #28]	; (8005af0 <TIM_Base_SetConfig+0xb8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d103      	bne.n	8005ae0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	615a      	str	r2, [r3, #20]
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800

08005afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr

08005b0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e03f      	b.n	8005bb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fc fcd8 	bl	80024fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2224      	movs	r2, #36	; 0x24
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fd9b 	bl	80066a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b08a      	sub	sp, #40	; 0x28
 8005bbe:	af02      	add	r7, sp, #8
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d17c      	bne.n	8005cd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_UART_Transmit+0x2c>
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e075      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Transmit+0x3e>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e06e      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2221      	movs	r2, #33	; 0x21
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c0e:	f7fc fdf5 	bl	80027fc <HAL_GetTick>
 8005c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c28:	d108      	bne.n	8005c3c <HAL_UART_Transmit+0x82>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d104      	bne.n	8005c3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	e003      	b.n	8005c44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c4c:	e02a      	b.n	8005ca4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	2180      	movs	r1, #128	; 0x80
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fb0d 	bl	8006278 <UART_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e036      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	3302      	adds	r3, #2
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	e007      	b.n	8005c96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	781a      	ldrb	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	3301      	adds	r3, #1
 8005c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1cf      	bne.n	8005c4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2140      	movs	r1, #64	; 0x40
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fadd 	bl	8006278 <UART_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e006      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e000      	b.n	8005cd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
  }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b086      	sub	sp, #24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d13c      	bne.n	8005d72 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e035      	b.n	8005d74 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e02e      	b.n	8005d74 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	461a      	mov	r2, r3
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 faee 	bl	800630c <UART_Start_Receive_DMA>
 8005d30:	4603      	mov	r3, r0
 8005d32:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d119      	bne.n	8005d6e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d113      	bne.n	8005d6a <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0210 	orr.w	r2, r2, #16
 8005d66:	60da      	str	r2, [r3, #12]
 8005d68:	e001      	b.n	8005d6e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	e000      	b.n	8005d74 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8005d72:	2302      	movs	r3, #2
  }
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_UART_IRQHandler+0x52>
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fbc0 	bl	800654c <UART_Receive_IT>
      return;
 8005dcc:	e17b      	b.n	80060c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80b1 	beq.w	8005f38 <HAL_UART_IRQHandler+0x1bc>
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <HAL_UART_IRQHandler+0x70>
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80a6 	beq.w	8005f38 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_UART_IRQHandler+0x90>
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	f043 0201 	orr.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_UART_IRQHandler+0xb0>
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	f043 0202 	orr.w	r2, r3, #2
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_UART_IRQHandler+0xd0>
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	f043 0204 	orr.w	r2, r3, #4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00f      	beq.n	8005e76 <HAL_UART_IRQHandler+0xfa>
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <HAL_UART_IRQHandler+0xee>
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f043 0208 	orr.w	r2, r3, #8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 811e 	beq.w	80060bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <HAL_UART_IRQHandler+0x11e>
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fb59 	bl	800654c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x146>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d031      	beq.n	8005f26 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa9b 	bl	80063fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d023      	beq.n	8005f1e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695a      	ldr	r2, [r3, #20]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d013      	beq.n	8005f16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	4a76      	ldr	r2, [pc, #472]	; (80060cc <HAL_UART_IRQHandler+0x350>)
 8005ef4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fc feb2 	bl	8002c64 <HAL_DMA_Abort_IT>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f10:	4610      	mov	r0, r2
 8005f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	e00e      	b.n	8005f34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8f5 	bl	8006106 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e00a      	b.n	8005f34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f8f1 	bl	8006106 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	e006      	b.n	8005f34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8ed 	bl	8006106 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f32:	e0c3      	b.n	80060bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	bf00      	nop
    return;
 8005f36:	e0c1      	b.n	80060bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	f040 80a1 	bne.w	8006084 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 809b 	beq.w	8006084 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8095 	beq.w	8006084 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d04e      	beq.n	800601c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005f88:	8a3b      	ldrh	r3, [r7, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 8098 	beq.w	80060c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f94:	8a3a      	ldrh	r2, [r7, #16]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	f080 8092 	bcs.w	80060c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8a3a      	ldrh	r2, [r7, #16]
 8005fa0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d02b      	beq.n	8006004 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695a      	ldr	r2, [r3, #20]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fda:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0210 	bic.w	r2, r2, #16
 8005ff8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fc fdf5 	bl	8002bee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800600c:	b29b      	uxth	r3, r3
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	b29b      	uxth	r3, r3
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7fb fe55 	bl	8001cc4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800601a:	e051      	b.n	80060c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006024:	b29b      	uxth	r3, r3
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d047      	beq.n	80060c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006034:	8a7b      	ldrh	r3, [r7, #18]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d044      	beq.n	80060c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006048:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695a      	ldr	r2, [r3, #20]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0201 	bic.w	r2, r2, #1
 8006058:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0210 	bic.w	r2, r2, #16
 8006076:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006078:	8a7b      	ldrh	r3, [r7, #18]
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7fb fe21 	bl	8001cc4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006082:	e01f      	b.n	80060c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <HAL_UART_IRQHandler+0x324>
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f9f0 	bl	800647e <UART_Transmit_IT>
    return;
 800609e:	e012      	b.n	80060c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <HAL_UART_IRQHandler+0x34a>
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa31 	bl	800651c <UART_EndTransmit_IT>
    return;
 80060ba:	e004      	b.n	80060c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80060bc:	bf00      	nop
 80060be:	e002      	b.n	80060c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80060c0:	bf00      	nop
 80060c2:	e000      	b.n	80060c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80060c4:	bf00      	nop
  }
}
 80060c6:	3728      	adds	r7, #40	; 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	08006457 	.word	0x08006457

080060d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc80      	pop	{r7}
 80060e0:	4770      	bx	lr

080060e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr

08006106 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d12a      	bne.n	800618a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006148:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0201 	bic.w	r2, r2, #1
 8006158:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006168:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	2b01      	cmp	r3, #1
 8006178:	d107      	bne.n	800618a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0210 	bic.w	r2, r2, #16
 8006188:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	2b01      	cmp	r3, #1
 8006190:	d106      	bne.n	80061a0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006196:	4619      	mov	r1, r3
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7fb fd93 	bl	8001cc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800619e:	e002      	b.n	80061a6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff ff9e 	bl	80060e2 <HAL_UART_RxCpltCallback>
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d108      	bne.n	80061d6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	4619      	mov	r1, r3
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7fb fd78 	bl	8001cc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061d4:	e002      	b.n	80061dc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff ff8c 	bl	80060f4 <HAL_UART_RxHalfCpltCallback>
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006200:	2b00      	cmp	r3, #0
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b21      	cmp	r3, #33	; 0x21
 8006216:	d108      	bne.n	800622a <UART_DMAError+0x46>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2200      	movs	r2, #0
 8006222:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006224:	68b8      	ldr	r0, [r7, #8]
 8006226:	f000 f8d5 	bl	80063d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b22      	cmp	r3, #34	; 0x22
 800624a:	d108      	bne.n	800625e <UART_DMAError+0x7a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2200      	movs	r2, #0
 8006256:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006258:	68b8      	ldr	r0, [r7, #8]
 800625a:	f000 f8d0 	bl	80063fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	f043 0210 	orr.w	r2, r3, #16
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800626a:	68b8      	ldr	r0, [r7, #8]
 800626c:	f7ff ff4b 	bl	8006106 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006288:	e02c      	b.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d028      	beq.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006298:	f7fc fab0 	bl	80027fc <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d21d      	bcs.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e00f      	b.n	8006304 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d0c3      	beq.n	800628a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	88fa      	ldrh	r2, [r7, #6]
 8006324:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2222      	movs	r2, #34	; 0x22
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	4a23      	ldr	r2, [pc, #140]	; (80063c8 <UART_Start_Receive_DMA+0xbc>)
 800633a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	4a22      	ldr	r2, [pc, #136]	; (80063cc <UART_Start_Receive_DMA+0xc0>)
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	4a21      	ldr	r2, [pc, #132]	; (80063d0 <UART_Start_Receive_DMA+0xc4>)
 800634a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	2200      	movs	r2, #0
 8006352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006354:	f107 0308 	add.w	r3, r7, #8
 8006358:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	f7fc fbe0 	bl	8002b30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800639c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695a      	ldr	r2, [r3, #20]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0201 	orr.w	r2, r2, #1
 80063ac:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695a      	ldr	r2, [r3, #20]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063bc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	08006119 	.word	0x08006119
 80063cc:	080061af 	.word	0x080061af
 80063d0:	080061e5 	.word	0x080061e5

080063d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80063ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bc80      	pop	{r7}
 80063fc:	4770      	bx	lr

080063fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006414:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695a      	ldr	r2, [r3, #20]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	2b01      	cmp	r3, #1
 800642c:	d107      	bne.n	800643e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0210 	bic.w	r2, r2, #16
 800643c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	bc80      	pop	{r7}
 8006454:	4770      	bx	lr

08006456 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f7ff fe48 	bl	8006106 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b21      	cmp	r3, #33	; 0x21
 8006490:	d13e      	bne.n	8006510 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649a:	d114      	bne.n	80064c6 <UART_Transmit_IT+0x48>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d110      	bne.n	80064c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	1c9a      	adds	r2, r3, #2
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	621a      	str	r2, [r3, #32]
 80064c4:	e008      	b.n	80064d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	1c59      	adds	r1, r3, #1
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6211      	str	r1, [r2, #32]
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	4619      	mov	r1, r3
 80064e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10f      	bne.n	800650c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800650a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	bc80      	pop	{r7}
 800651a:	4770      	bx	lr

0800651c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006532:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff fdc7 	bl	80060d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b22      	cmp	r3, #34	; 0x22
 800655e:	f040 8099 	bne.w	8006694 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656a:	d117      	bne.n	800659c <UART_Receive_IT+0x50>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d113      	bne.n	800659c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800658a:	b29a      	uxth	r2, r3
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	1c9a      	adds	r2, r3, #2
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	629a      	str	r2, [r3, #40]	; 0x28
 800659a:	e026      	b.n	80065ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	d007      	beq.n	80065c0 <UART_Receive_IT+0x74>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <UART_Receive_IT+0x82>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e008      	b.n	80065e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	4619      	mov	r1, r3
 80065f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d148      	bne.n	8006690 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0220 	bic.w	r2, r2, #32
 800660c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800661c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695a      	ldr	r2, [r3, #20]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0201 	bic.w	r2, r2, #1
 800662c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	2b01      	cmp	r3, #1
 800663c:	d123      	bne.n	8006686 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0210 	bic.w	r2, r2, #16
 8006652:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b10      	cmp	r3, #16
 8006660:	d10a      	bne.n	8006678 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fb fb20 	bl	8001cc4 <HAL_UARTEx_RxEventCallback>
 8006684:	e002      	b.n	800668c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff fd2b 	bl	80060e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e002      	b.n	8006696 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	e000      	b.n	8006696 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006694:	2302      	movs	r3, #2
  }
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80066da:	f023 030c 	bic.w	r3, r3, #12
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	430b      	orrs	r3, r1
 80066e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a2c      	ldr	r2, [pc, #176]	; (80067b4 <UART_SetConfig+0x114>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d103      	bne.n	8006710 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006708:	f7fe f9f2 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	e002      	b.n	8006716 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006710:	f7fe f9da 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 8006714:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009a      	lsls	r2, r3, #2
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	4a22      	ldr	r2, [pc, #136]	; (80067b8 <UART_SetConfig+0x118>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	0119      	lsls	r1, r3, #4
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009a      	lsls	r2, r3, #2
 8006740:	441a      	add	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	fbb2 f2f3 	udiv	r2, r2, r3
 800674c:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <UART_SetConfig+0x118>)
 800674e:	fba3 0302 	umull	r0, r3, r3, r2
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	2064      	movs	r0, #100	; 0x64
 8006756:	fb00 f303 	mul.w	r3, r0, r3
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	3332      	adds	r3, #50	; 0x32
 8006760:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <UART_SetConfig+0x118>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800676c:	4419      	add	r1, r3
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009a      	lsls	r2, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	fbb2 f2f3 	udiv	r2, r2, r3
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <UART_SetConfig+0x118>)
 8006786:	fba3 0302 	umull	r0, r3, r3, r2
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2064      	movs	r0, #100	; 0x64
 800678e:	fb00 f303 	mul.w	r3, r0, r3
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	3332      	adds	r3, #50	; 0x32
 8006798:	4a07      	ldr	r2, [pc, #28]	; (80067b8 <UART_SetConfig+0x118>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	f003 020f 	and.w	r2, r3, #15
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	440a      	add	r2, r1
 80067aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40013800 	.word	0x40013800
 80067b8:	51eb851f 	.word	0x51eb851f

080067bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80067ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067ce:	2b84      	cmp	r3, #132	; 0x84
 80067d0:	d005      	beq.n	80067de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80067d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	3303      	adds	r3, #3
 80067dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80067de:	68fb      	ldr	r3, [r7, #12]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067f0:	f3ef 8305 	mrs	r3, IPSR
 80067f4:	607b      	str	r3, [r7, #4]
  return(result);
 80067f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006810:	f001 fa7c 	bl	8007d0c <vTaskStartScheduler>
  
  return osOK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	bd80      	pop	{r7, pc}

0800681a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800681a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681c:	b089      	sub	sp, #36	; 0x24
 800681e:	af04      	add	r7, sp, #16
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d020      	beq.n	800686e <osThreadCreate+0x54>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01c      	beq.n	800686e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685c      	ldr	r4, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681d      	ldr	r5, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691e      	ldr	r6, [r3, #16]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff ffb8 	bl	80067bc <makeFreeRtosPriority>
 800684c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006856:	9202      	str	r2, [sp, #8]
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	9100      	str	r1, [sp, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	4632      	mov	r2, r6
 8006860:	4629      	mov	r1, r5
 8006862:	4620      	mov	r0, r4
 8006864:	f001 f893 	bl	800798e <xTaskCreateStatic>
 8006868:	4603      	mov	r3, r0
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e01c      	b.n	80068a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685c      	ldr	r4, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800687a:	b29e      	uxth	r6, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff ff9a 	bl	80067bc <makeFreeRtosPriority>
 8006888:	4602      	mov	r2, r0
 800688a:	f107 030c 	add.w	r3, r7, #12
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	9200      	str	r2, [sp, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	4632      	mov	r2, r6
 8006896:	4629      	mov	r1, r5
 8006898:	4620      	mov	r0, r4
 800689a:	f001 f8d4 	bl	8007a46 <xTaskCreate>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d001      	beq.n	80068a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	e000      	b.n	80068aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <osDelay+0x16>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	e000      	b.n	80068ca <osDelay+0x18>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 f9ea 	bl	8007ca4 <vTaskDelay>
  
  return osOK;
 80068d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80068da:	b580      	push	{r7, lr}
 80068dc:	b086      	sub	sp, #24
 80068de:	af02      	add	r7, sp, #8
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00f      	beq.n	800690c <osSemaphoreCreate+0x32>
    if (count == 1) {
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d10a      	bne.n	8006908 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2203      	movs	r2, #3
 80068f8:	9200      	str	r2, [sp, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	2100      	movs	r1, #0
 80068fe:	2001      	movs	r0, #1
 8006900:	f000 f9ba 	bl	8006c78 <xQueueGenericCreateStatic>
 8006904:	4603      	mov	r3, r0
 8006906:	e016      	b.n	8006936 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006908:	2300      	movs	r3, #0
 800690a:	e014      	b.n	8006936 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d110      	bne.n	8006934 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006912:	2203      	movs	r2, #3
 8006914:	2100      	movs	r1, #0
 8006916:	2001      	movs	r0, #1
 8006918:	f000 fa25 	bl	8006d66 <xQueueGenericCreate>
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <osSemaphoreCreate+0x56>
 8006924:	2300      	movs	r3, #0
 8006926:	2200      	movs	r2, #0
 8006928:	2100      	movs	r1, #0
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fa78 	bl	8006e20 <xQueueGenericSend>
      return sema;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	e000      	b.n	8006936 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006934:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800694a:	2300      	movs	r3, #0
 800694c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006954:	2380      	movs	r3, #128	; 0x80
 8006956:	e03a      	b.n	80069ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d103      	bne.n	800696c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006964:	f04f 33ff 	mov.w	r3, #4294967295
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	e009      	b.n	8006980 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d006      	beq.n	8006980 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <osSemaphoreWait+0x40>
      ticks = 1;
 800697c:	2301      	movs	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006980:	f7ff ff33 	bl	80067ea <inHandlerMode>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d017      	beq.n	80069ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800698a:	f107 0308 	add.w	r3, r7, #8
 800698e:	461a      	mov	r2, r3
 8006990:	2100      	movs	r1, #0
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fe54 	bl	8007640 <xQueueReceiveFromISR>
 8006998:	4603      	mov	r3, r0
 800699a:	2b01      	cmp	r3, #1
 800699c:	d001      	beq.n	80069a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800699e:	23ff      	movs	r3, #255	; 0xff
 80069a0:	e015      	b.n	80069ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d011      	beq.n	80069cc <osSemaphoreWait+0x8c>
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <osSemaphoreWait+0x98>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	e008      	b.n	80069cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80069ba:	68f9      	ldr	r1, [r7, #12]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fd33 	bl	8007428 <xQueueSemaphoreTake>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d001      	beq.n	80069cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80069c8:	23ff      	movs	r3, #255	; 0xff
 80069ca:	e000      	b.n	80069ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80069ec:	f7ff fefd 	bl	80067ea <inHandlerMode>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d016      	beq.n	8006a24 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80069f6:	f107 0308 	add.w	r3, r7, #8
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fba5 	bl	800714c <xQueueGiveFromISR>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006a08:	23ff      	movs	r3, #255	; 0xff
 8006a0a:	e017      	b.n	8006a3c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d013      	beq.n	8006a3a <osSemaphoreRelease+0x5e>
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <osSemaphoreRelease+0x68>)
 8006a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	e00a      	b.n	8006a3a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006a24:	2300      	movs	r3, #0
 8006a26:	2200      	movs	r2, #0
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9f8 	bl	8006e20 <xQueueGenericSend>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d001      	beq.n	8006a3a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006a36:	23ff      	movs	r3, #255	; 0xff
 8006a38:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f103 0208 	add.w	r2, r3, #8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f103 0208 	add.w	r2, r3, #8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f103 0208 	add.w	r2, r3, #8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	601a      	str	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d103      	bne.n	8006b04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	e00c      	b.n	8006b1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3308      	adds	r3, #8
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e002      	b.n	8006b12 <vListInsert+0x2e>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d2f6      	bcs.n	8006b0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
}
 8006b4a:	bf00      	nop
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6892      	ldr	r2, [r2, #8]
 8006b6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6852      	ldr	r2, [r2, #4]
 8006b74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d103      	bne.n	8006b88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	1e5a      	subs	r2, r3, #1
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
	...

08006ba8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006bd2:	f001 ffd3 	bl	8008b7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006be2:	fb01 f303 	mul.w	r3, r1, r3
 8006be6:	441a      	add	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c02:	3b01      	subs	r3, #1
 8006c04:	68f9      	ldr	r1, [r7, #12]
 8006c06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c08:	fb01 f303 	mul.w	r3, r1, r3
 8006c0c:	441a      	add	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	22ff      	movs	r2, #255	; 0xff
 8006c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	22ff      	movs	r2, #255	; 0xff
 8006c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d114      	bne.n	8006c52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01a      	beq.n	8006c66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3310      	adds	r3, #16
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 faaf 	bl	8008198 <xTaskRemoveFromEventList>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d012      	beq.n	8006c66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c40:	4b0c      	ldr	r3, [pc, #48]	; (8006c74 <xQueueGenericReset+0xcc>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	e009      	b.n	8006c66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3310      	adds	r3, #16
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fef6 	bl	8006a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3324      	adds	r3, #36	; 0x24
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fef1 	bl	8006a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c66:	f001 ffb9 	bl	8008bdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c6a:	2301      	movs	r3, #1
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	e000ed04 	.word	0xe000ed04

08006c78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08e      	sub	sp, #56	; 0x38
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <xQueueGenericCreateStatic+0x52>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <xQueueGenericCreateStatic+0x56>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <xQueueGenericCreateStatic+0x58>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	623b      	str	r3, [r7, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d102      	bne.n	8006cf6 <xQueueGenericCreateStatic+0x7e>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <xQueueGenericCreateStatic+0x82>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <xQueueGenericCreateStatic+0x84>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	61fb      	str	r3, [r7, #28]
}
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d16:	2348      	movs	r3, #72	; 0x48
 8006d18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b48      	cmp	r3, #72	; 0x48
 8006d1e:	d00a      	beq.n	8006d36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	61bb      	str	r3, [r7, #24]
}
 8006d32:	bf00      	nop
 8006d34:	e7fe      	b.n	8006d34 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00d      	beq.n	8006d5c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f843 	bl	8006de2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3730      	adds	r7, #48	; 0x30
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b08a      	sub	sp, #40	; 0x28
 8006d6a:	af02      	add	r7, sp, #8
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	4613      	mov	r3, r2
 8006d72:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	613b      	str	r3, [r7, #16]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
 8006d9a:	e004      	b.n	8006da6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	fb02 f303 	mul.w	r3, r2, r3
 8006da4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	3348      	adds	r3, #72	; 0x48
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 ffe6 	bl	8008d7c <pvPortMalloc>
 8006db0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00f      	beq.n	8006dd8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	3348      	adds	r3, #72	; 0x48
 8006dbc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dc6:	79fa      	ldrb	r2, [r7, #7]
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f805 	bl	8006de2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
	}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e002      	b.n	8006e04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e10:	2101      	movs	r1, #1
 8006e12:	69b8      	ldr	r0, [r7, #24]
 8006e14:	f7ff fec8 	bl	8006ba8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08e      	sub	sp, #56	; 0x38
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <xQueueGenericSend+0x32>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <xQueueGenericSend+0x40>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <xQueueGenericSend+0x44>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <xQueueGenericSend+0x46>
 8006e64:	2300      	movs	r3, #0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <xQueueGenericSend+0x60>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d103      	bne.n	8006e8e <xQueueGenericSend+0x6e>
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <xQueueGenericSend+0x72>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <xQueueGenericSend+0x74>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xQueueGenericSend+0x8e>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	623b      	str	r3, [r7, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eae:	f001 fb33 	bl	8008518 <xTaskGetSchedulerState>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d102      	bne.n	8006ebe <xQueueGenericSend+0x9e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <xQueueGenericSend+0xa2>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <xQueueGenericSend+0xa4>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <xQueueGenericSend+0xbe>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	61fb      	str	r3, [r7, #28]
}
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ede:	f001 fe4d 	bl	8008b7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d302      	bcc.n	8006ef4 <xQueueGenericSend+0xd4>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d129      	bne.n	8006f48 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006efa:	f000 fc38 	bl	800776e <prvCopyDataToQueue>
 8006efe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d010      	beq.n	8006f2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	3324      	adds	r3, #36	; 0x24
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 f943 	bl	8008198 <xTaskRemoveFromEventList>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d013      	beq.n	8006f40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f18:	4b3f      	ldr	r3, [pc, #252]	; (8007018 <xQueueGenericSend+0x1f8>)
 8006f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	e00a      	b.n	8006f40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f30:	4b39      	ldr	r3, [pc, #228]	; (8007018 <xQueueGenericSend+0x1f8>)
 8006f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f40:	f001 fe4c 	bl	8008bdc <vPortExitCritical>
				return pdPASS;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e063      	b.n	8007010 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d103      	bne.n	8006f56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f4e:	f001 fe45 	bl	8008bdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e05c      	b.n	8007010 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d106      	bne.n	8006f6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f5c:	f107 0314 	add.w	r3, r7, #20
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 f97b 	bl	800825c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f66:	2301      	movs	r3, #1
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f6a:	f001 fe37 	bl	8008bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f6e:	f000 ff2d 	bl	8007dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f72:	f001 fe03 	bl	8008b7c <vPortEnterCritical>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f7c:	b25b      	sxtb	r3, r3
 8006f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f82:	d103      	bne.n	8006f8c <xQueueGenericSend+0x16c>
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f92:	b25b      	sxtb	r3, r3
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d103      	bne.n	8006fa2 <xQueueGenericSend+0x182>
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fa2:	f001 fe1b 	bl	8008bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fa6:	1d3a      	adds	r2, r7, #4
 8006fa8:	f107 0314 	add.w	r3, r7, #20
 8006fac:	4611      	mov	r1, r2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f001 f96a 	bl	8008288 <xTaskCheckForTimeOut>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d124      	bne.n	8007004 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fbc:	f000 fccf 	bl	800795e <prvIsQueueFull>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d018      	beq.n	8006ff8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	3310      	adds	r3, #16
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 f8be 	bl	8008150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fd6:	f000 fc5a 	bl	800788e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fda:	f000 ff05 	bl	8007de8 <xTaskResumeAll>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f47f af7c 	bne.w	8006ede <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <xQueueGenericSend+0x1f8>)
 8006fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	e772      	b.n	8006ede <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ffa:	f000 fc48 	bl	800788e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ffe:	f000 fef3 	bl	8007de8 <xTaskResumeAll>
 8007002:	e76c      	b.n	8006ede <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007006:	f000 fc42 	bl	800788e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800700a:	f000 feed 	bl	8007de8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800700e:	2300      	movs	r3, #0
		}
	}
}
 8007010:	4618      	mov	r0, r3
 8007012:	3738      	adds	r7, #56	; 0x38
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08e      	sub	sp, #56	; 0x38
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <xQueueGenericSendFromISR+0x3c>
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <xQueueGenericSendFromISR+0x40>
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <xQueueGenericSendFromISR+0x42>
 800705c:	2300      	movs	r3, #0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	623b      	str	r3, [r7, #32]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d103      	bne.n	8007086 <xQueueGenericSendFromISR+0x6a>
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <xQueueGenericSendFromISR+0x6e>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <xQueueGenericSendFromISR+0x70>
 800708a:	2300      	movs	r3, #0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	61fb      	str	r3, [r7, #28]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070a6:	f001 fe2b 	bl	8008d00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070aa:	f3ef 8211 	mrs	r2, BASEPRI
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	61ba      	str	r2, [r7, #24]
 80070c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d302      	bcc.n	80070d8 <xQueueGenericSendFromISR+0xbc>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d12c      	bne.n	8007132 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070e8:	f000 fb41 	bl	800776e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d112      	bne.n	800711c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d016      	beq.n	800712c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	3324      	adds	r3, #36	; 0x24
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f848 	bl	8008198 <xTaskRemoveFromEventList>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	e007      	b.n	800712c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800711c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007120:	3301      	adds	r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	b25a      	sxtb	r2, r3
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800712c:	2301      	movs	r3, #1
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007130:	e001      	b.n	8007136 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007132:	2300      	movs	r3, #0
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007140:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007144:	4618      	mov	r0, r3
 8007146:	3738      	adds	r7, #56	; 0x38
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08e      	sub	sp, #56	; 0x38
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	623b      	str	r3, [r7, #32]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <xQueueGiveFromISR+0x48>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	61fb      	str	r3, [r7, #28]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <xQueueGiveFromISR+0x58>
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <xQueueGiveFromISR+0x5c>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <xQueueGiveFromISR+0x5e>
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	61bb      	str	r3, [r7, #24]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071c4:	f001 fd9c 	bl	8008d00 <vPortValidateInterruptPriority>
	__asm volatile
 80071c8:	f3ef 8211 	mrs	r2, BASEPRI
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	617a      	str	r2, [r7, #20]
 80071de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80071e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d22b      	bcs.n	800724c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007206:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d112      	bne.n	8007236 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d016      	beq.n	8007246 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	3324      	adds	r3, #36	; 0x24
 800721c:	4618      	mov	r0, r3
 800721e:	f000 ffbb 	bl	8008198 <xTaskRemoveFromEventList>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00e      	beq.n	8007246 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2201      	movs	r2, #1
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	e007      	b.n	8007246 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800723a:	3301      	adds	r3, #1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	b25a      	sxtb	r2, r3
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007246:	2301      	movs	r3, #1
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
 800724a:	e001      	b.n	8007250 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800724c:	2300      	movs	r3, #0
 800724e:	637b      	str	r3, [r7, #52]	; 0x34
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f383 8811 	msr	BASEPRI, r3
}
 800725a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800725c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800725e:	4618      	mov	r0, r3
 8007260:	3738      	adds	r7, #56	; 0x38
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08c      	sub	sp, #48	; 0x30
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007274:	2300      	movs	r3, #0
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <xQueueReceive+0x30>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	623b      	str	r3, [r7, #32]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <xQueueReceive+0x3e>
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <xQueueReceive+0x42>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <xQueueReceive+0x44>
 80072aa:	2300      	movs	r3, #0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10a      	bne.n	80072c6 <xQueueReceive+0x5e>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	61fb      	str	r3, [r7, #28]
}
 80072c2:	bf00      	nop
 80072c4:	e7fe      	b.n	80072c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072c6:	f001 f927 	bl	8008518 <xTaskGetSchedulerState>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d102      	bne.n	80072d6 <xQueueReceive+0x6e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <xQueueReceive+0x72>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <xQueueReceive+0x74>
 80072da:	2300      	movs	r3, #0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <xQueueReceive+0x8e>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	61bb      	str	r3, [r7, #24]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80072f6:	f001 fc41 	bl	8008b7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01f      	beq.n	8007346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800730a:	f000 fa9a 	bl	8007842 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	1e5a      	subs	r2, r3, #1
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00f      	beq.n	800733e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	3310      	adds	r3, #16
 8007322:	4618      	mov	r0, r3
 8007324:	f000 ff38 	bl	8008198 <xTaskRemoveFromEventList>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800732e:	4b3d      	ldr	r3, [pc, #244]	; (8007424 <xQueueReceive+0x1bc>)
 8007330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800733e:	f001 fc4d 	bl	8008bdc <vPortExitCritical>
				return pdPASS;
 8007342:	2301      	movs	r3, #1
 8007344:	e069      	b.n	800741a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d103      	bne.n	8007354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800734c:	f001 fc46 	bl	8008bdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007350:	2300      	movs	r3, #0
 8007352:	e062      	b.n	800741a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800735a:	f107 0310 	add.w	r3, r7, #16
 800735e:	4618      	mov	r0, r3
 8007360:	f000 ff7c 	bl	800825c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007368:	f001 fc38 	bl	8008bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800736c:	f000 fd2e 	bl	8007dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007370:	f001 fc04 	bl	8008b7c <vPortEnterCritical>
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800737a:	b25b      	sxtb	r3, r3
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007380:	d103      	bne.n	800738a <xQueueReceive+0x122>
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007390:	b25b      	sxtb	r3, r3
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007396:	d103      	bne.n	80073a0 <xQueueReceive+0x138>
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073a0:	f001 fc1c 	bl	8008bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073a4:	1d3a      	adds	r2, r7, #4
 80073a6:	f107 0310 	add.w	r3, r7, #16
 80073aa:	4611      	mov	r1, r2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 ff6b 	bl	8008288 <xTaskCheckForTimeOut>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d123      	bne.n	8007400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ba:	f000 faba 	bl	8007932 <prvIsQueueEmpty>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d017      	beq.n	80073f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	3324      	adds	r3, #36	; 0x24
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4611      	mov	r1, r2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 febf 	bl	8008150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d4:	f000 fa5b 	bl	800788e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073d8:	f000 fd06 	bl	8007de8 <xTaskResumeAll>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d189      	bne.n	80072f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80073e2:	4b10      	ldr	r3, [pc, #64]	; (8007424 <xQueueReceive+0x1bc>)
 80073e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	e780      	b.n	80072f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073f6:	f000 fa4a 	bl	800788e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073fa:	f000 fcf5 	bl	8007de8 <xTaskResumeAll>
 80073fe:	e77a      	b.n	80072f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007402:	f000 fa44 	bl	800788e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007406:	f000 fcef 	bl	8007de8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800740a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800740c:	f000 fa91 	bl	8007932 <prvIsQueueEmpty>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	f43f af6f 	beq.w	80072f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800741a:	4618      	mov	r0, r3
 800741c:	3730      	adds	r7, #48	; 0x30
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	e000ed04 	.word	0xe000ed04

08007428 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	; 0x38
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800743a:	2300      	movs	r3, #0
 800743c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	623b      	str	r3, [r7, #32]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	61fb      	str	r3, [r7, #28]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007478:	f001 f84e 	bl	8008518 <xTaskGetSchedulerState>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <xQueueSemaphoreTake+0x60>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <xQueueSemaphoreTake+0x64>
 8007488:	2301      	movs	r3, #1
 800748a:	e000      	b.n	800748e <xQueueSemaphoreTake+0x66>
 800748c:	2300      	movs	r3, #0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	61bb      	str	r3, [r7, #24]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80074a8:	f001 fb68 	bl	8008b7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d024      	beq.n	8007502 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	1e5a      	subs	r2, r3, #1
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d104      	bne.n	80074d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80074c8:	f001 f9f0 	bl	80088ac <pvTaskIncrementMutexHeldCount>
 80074cc:	4602      	mov	r2, r0
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00f      	beq.n	80074fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	3310      	adds	r3, #16
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fe5a 	bl	8008198 <xTaskRemoveFromEventList>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d007      	beq.n	80074fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074ea:	4b54      	ldr	r3, [pc, #336]	; (800763c <xQueueSemaphoreTake+0x214>)
 80074ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074fa:	f001 fb6f 	bl	8008bdc <vPortExitCritical>
				return pdPASS;
 80074fe:	2301      	movs	r3, #1
 8007500:	e097      	b.n	8007632 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d111      	bne.n	800752c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	617b      	str	r3, [r7, #20]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007524:	f001 fb5a 	bl	8008bdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007528:	2300      	movs	r3, #0
 800752a:	e082      	b.n	8007632 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007532:	f107 030c 	add.w	r3, r7, #12
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fe90 	bl	800825c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800753c:	2301      	movs	r3, #1
 800753e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007540:	f001 fb4c 	bl	8008bdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007544:	f000 fc42 	bl	8007dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007548:	f001 fb18 	bl	8008b7c <vPortEnterCritical>
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007552:	b25b      	sxtb	r3, r3
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007558:	d103      	bne.n	8007562 <xQueueSemaphoreTake+0x13a>
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007568:	b25b      	sxtb	r3, r3
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756e:	d103      	bne.n	8007578 <xQueueSemaphoreTake+0x150>
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007578:	f001 fb30 	bl	8008bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800757c:	463a      	mov	r2, r7
 800757e:	f107 030c 	add.w	r3, r7, #12
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fe7f 	bl	8008288 <xTaskCheckForTimeOut>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d132      	bne.n	80075f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007592:	f000 f9ce 	bl	8007932 <prvIsQueueEmpty>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d026      	beq.n	80075ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d109      	bne.n	80075b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80075a4:	f001 faea 	bl	8008b7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 ffd1 	bl	8008554 <xTaskPriorityInherit>
 80075b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80075b4:	f001 fb12 	bl	8008bdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	3324      	adds	r3, #36	; 0x24
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	4611      	mov	r1, r2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fdc5 	bl	8008150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075c8:	f000 f961 	bl	800788e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075cc:	f000 fc0c 	bl	8007de8 <xTaskResumeAll>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f47f af68 	bne.w	80074a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80075d8:	4b18      	ldr	r3, [pc, #96]	; (800763c <xQueueSemaphoreTake+0x214>)
 80075da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	e75e      	b.n	80074a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80075ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075ec:	f000 f94f 	bl	800788e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075f0:	f000 fbfa 	bl	8007de8 <xTaskResumeAll>
 80075f4:	e758      	b.n	80074a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80075f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075f8:	f000 f949 	bl	800788e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075fc:	f000 fbf4 	bl	8007de8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007602:	f000 f996 	bl	8007932 <prvIsQueueEmpty>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	f43f af4d 	beq.w	80074a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00d      	beq.n	8007630 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007614:	f001 fab2 	bl	8008b7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800761a:	f000 f891 	bl	8007740 <prvGetDisinheritPriorityAfterTimeout>
 800761e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f8a0 	bl	800876c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800762c:	f001 fad6 	bl	8008bdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007632:	4618      	mov	r0, r3
 8007634:	3738      	adds	r7, #56	; 0x38
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	e000ed04 	.word	0xe000ed04

08007640 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08e      	sub	sp, #56	; 0x38
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	623b      	str	r3, [r7, #32]
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <xQueueReceiveFromISR+0x3a>
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <xQueueReceiveFromISR+0x3e>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <xQueueReceiveFromISR+0x40>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	61fb      	str	r3, [r7, #28]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800769a:	f001 fb31 	bl	8008d00 <vPortValidateInterruptPriority>
	__asm volatile
 800769e:	f3ef 8211 	mrs	r2, BASEPRI
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	61ba      	str	r2, [r7, #24]
 80076b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80076b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d02f      	beq.n	8007726 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076d4:	f000 f8b5 	bl	8007842 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	1e5a      	subs	r2, r3, #1
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80076e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e8:	d112      	bne.n	8007710 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d016      	beq.n	8007720 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	3310      	adds	r3, #16
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fd4e 	bl	8008198 <xTaskRemoveFromEventList>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00e      	beq.n	8007720 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	e007      	b.n	8007720 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007714:	3301      	adds	r3, #1
 8007716:	b2db      	uxtb	r3, r3
 8007718:	b25a      	sxtb	r2, r3
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007720:	2301      	movs	r3, #1
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
 8007724:	e001      	b.n	800772a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007726:	2300      	movs	r3, #0
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f383 8811 	msr	BASEPRI, r3
}
 8007734:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007738:	4618      	mov	r0, r3
 800773a:	3738      	adds	r7, #56	; 0x38
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d006      	beq.n	800775e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f1c3 0307 	rsb	r3, r3, #7
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e001      	b.n	8007762 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007762:	68fb      	ldr	r3, [r7, #12]
	}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr

0800776e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b086      	sub	sp, #24
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10d      	bne.n	80077a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d14d      	bne.n	8007830 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 ff61 	bl	8008660 <xTaskPriorityDisinherit>
 800779e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	e043      	b.n	8007830 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d119      	bne.n	80077e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6898      	ldr	r0, [r3, #8]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	461a      	mov	r2, r3
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	f001 fcff 	bl	80091bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	441a      	add	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d32b      	bcc.n	8007830 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	609a      	str	r2, [r3, #8]
 80077e0:	e026      	b.n	8007830 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	68d8      	ldr	r0, [r3, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	461a      	mov	r2, r3
 80077ec:	68b9      	ldr	r1, [r7, #8]
 80077ee:	f001 fce5 	bl	80091bc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	425b      	negs	r3, r3
 80077fc:	441a      	add	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d207      	bcs.n	800781e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	425b      	negs	r3, r3
 8007818:	441a      	add	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d105      	bne.n	8007830 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	3b01      	subs	r3, #1
 800782e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007838:	697b      	ldr	r3, [r7, #20]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d018      	beq.n	8007886 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	441a      	add	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	429a      	cmp	r2, r3
 800786c:	d303      	bcc.n	8007876 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68d9      	ldr	r1, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	461a      	mov	r2, r3
 8007880:	6838      	ldr	r0, [r7, #0]
 8007882:	f001 fc9b 	bl	80091bc <memcpy>
	}
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007896:	f001 f971 	bl	8008b7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078a2:	e011      	b.n	80078c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d012      	beq.n	80078d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3324      	adds	r3, #36	; 0x24
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fc71 	bl	8008198 <xTaskRemoveFromEventList>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078bc:	f000 fd46 	bl	800834c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	dce9      	bgt.n	80078a4 <prvUnlockQueue+0x16>
 80078d0:	e000      	b.n	80078d4 <prvUnlockQueue+0x46>
					break;
 80078d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	22ff      	movs	r2, #255	; 0xff
 80078d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80078dc:	f001 f97e 	bl	8008bdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078e0:	f001 f94c 	bl	8008b7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078ec:	e011      	b.n	8007912 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d012      	beq.n	800791c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3310      	adds	r3, #16
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fc4c 	bl	8008198 <xTaskRemoveFromEventList>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007906:	f000 fd21 	bl	800834c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	3b01      	subs	r3, #1
 800790e:	b2db      	uxtb	r3, r3
 8007910:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	dce9      	bgt.n	80078ee <prvUnlockQueue+0x60>
 800791a:	e000      	b.n	800791e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800791c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	22ff      	movs	r2, #255	; 0xff
 8007922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007926:	f001 f959 	bl	8008bdc <vPortExitCritical>
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800793a:	f001 f91f 	bl	8008b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007946:	2301      	movs	r3, #1
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	e001      	b.n	8007950 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007950:	f001 f944 	bl	8008bdc <vPortExitCritical>

	return xReturn;
 8007954:	68fb      	ldr	r3, [r7, #12]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007966:	f001 f909 	bl	8008b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	429a      	cmp	r2, r3
 8007974:	d102      	bne.n	800797c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e001      	b.n	8007980 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007980:	f001 f92c 	bl	8008bdc <vPortExitCritical>

	return xReturn;
 8007984:	68fb      	ldr	r3, [r7, #12]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800798e:	b580      	push	{r7, lr}
 8007990:	b08e      	sub	sp, #56	; 0x38
 8007992:	af04      	add	r7, sp, #16
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	607a      	str	r2, [r7, #4]
 800799a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800799c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <xTaskCreateStatic+0x2a>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	623b      	str	r3, [r7, #32]
}
 80079b4:	bf00      	nop
 80079b6:	e7fe      	b.n	80079b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10a      	bne.n	80079d4 <xTaskCreateStatic+0x46>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	61fb      	str	r3, [r7, #28]
}
 80079d0:	bf00      	nop
 80079d2:	e7fe      	b.n	80079d2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079d4:	2354      	movs	r3, #84	; 0x54
 80079d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2b54      	cmp	r3, #84	; 0x54
 80079dc:	d00a      	beq.n	80079f4 <xTaskCreateStatic+0x66>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	61bb      	str	r3, [r7, #24]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01e      	beq.n	8007a38 <xTaskCreateStatic+0xaa>
 80079fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01b      	beq.n	8007a38 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a12:	2300      	movs	r3, #0
 8007a14:	9303      	str	r3, [sp, #12]
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	9302      	str	r3, [sp, #8]
 8007a1a:	f107 0314 	add.w	r3, r7, #20
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	68b9      	ldr	r1, [r7, #8]
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 f850 	bl	8007ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a32:	f000 f8cd 	bl	8007bd0 <prvAddNewTaskToReadyList>
 8007a36:	e001      	b.n	8007a3c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a3c:	697b      	ldr	r3, [r7, #20]
	}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3728      	adds	r7, #40	; 0x28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b08c      	sub	sp, #48	; 0x30
 8007a4a:	af04      	add	r7, sp, #16
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	603b      	str	r3, [r7, #0]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f001 f98e 	bl	8008d7c <pvPortMalloc>
 8007a60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00e      	beq.n	8007a86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007a68:	2054      	movs	r0, #84	; 0x54
 8007a6a:	f001 f987 	bl	8008d7c <pvPortMalloc>
 8007a6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8007a7c:	e005      	b.n	8007a8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a7e:	6978      	ldr	r0, [r7, #20]
 8007a80:	f001 fa40 	bl	8008f04 <vPortFree>
 8007a84:	e001      	b.n	8007a8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d017      	beq.n	8007ac0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9303      	str	r3, [sp, #12]
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	9302      	str	r3, [sp, #8]
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f80e 	bl	8007ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ab4:	69f8      	ldr	r0, [r7, #28]
 8007ab6:	f000 f88b 	bl	8007bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007aba:	2301      	movs	r3, #1
 8007abc:	61bb      	str	r3, [r7, #24]
 8007abe:	e002      	b.n	8007ac6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
	}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	617b      	str	r3, [r7, #20]
}
 8007b14:	bf00      	nop
 8007b16:	e7fe      	b.n	8007b16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61fb      	str	r3, [r7, #28]
 8007b1c:	e012      	b.n	8007b44 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	4413      	add	r3, r2
 8007b24:	7819      	ldrb	r1, [r3, #0]
 8007b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	3334      	adds	r3, #52	; 0x34
 8007b2e:	460a      	mov	r2, r1
 8007b30:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	4413      	add	r3, r2
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d006      	beq.n	8007b4c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	3301      	adds	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2b0f      	cmp	r3, #15
 8007b48:	d9e9      	bls.n	8007b1e <prvInitialiseNewTask+0x4e>
 8007b4a:	e000      	b.n	8007b4e <prvInitialiseNewTask+0x7e>
		{
			break;
 8007b4c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	2b06      	cmp	r3, #6
 8007b5a:	d901      	bls.n	8007b60 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b5c:	2306      	movs	r3, #6
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b6a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	2200      	movs	r2, #0
 8007b70:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	3304      	adds	r3, #4
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe ff85 	bl	8006a86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	3318      	adds	r3, #24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe ff80 	bl	8006a86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	f1c3 0207 	rsb	r2, r3, #7
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	68f9      	ldr	r1, [r7, #12]
 8007bae:	69b8      	ldr	r0, [r7, #24]
 8007bb0:	f000 fef6 	bl	80089a0 <pxPortInitialiseStack>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	3720      	adds	r7, #32
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bd8:	f000 ffd0 	bl	8008b7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007bdc:	4b2a      	ldr	r3, [pc, #168]	; (8007c88 <prvAddNewTaskToReadyList+0xb8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3301      	adds	r3, #1
 8007be2:	4a29      	ldr	r2, [pc, #164]	; (8007c88 <prvAddNewTaskToReadyList+0xb8>)
 8007be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007be6:	4b29      	ldr	r3, [pc, #164]	; (8007c8c <prvAddNewTaskToReadyList+0xbc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bee:	4a27      	ldr	r2, [pc, #156]	; (8007c8c <prvAddNewTaskToReadyList+0xbc>)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007bf4:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <prvAddNewTaskToReadyList+0xb8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d110      	bne.n	8007c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bfc:	f000 fbca 	bl	8008394 <prvInitialiseTaskLists>
 8007c00:	e00d      	b.n	8007c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c02:	4b23      	ldr	r3, [pc, #140]	; (8007c90 <prvAddNewTaskToReadyList+0xc0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d109      	bne.n	8007c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c0a:	4b20      	ldr	r3, [pc, #128]	; (8007c8c <prvAddNewTaskToReadyList+0xbc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d802      	bhi.n	8007c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c18:	4a1c      	ldr	r2, [pc, #112]	; (8007c8c <prvAddNewTaskToReadyList+0xbc>)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <prvAddNewTaskToReadyList+0xc4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3301      	adds	r3, #1
 8007c24:	4a1b      	ldr	r2, [pc, #108]	; (8007c94 <prvAddNewTaskToReadyList+0xc4>)
 8007c26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	409a      	lsls	r2, r3
 8007c30:	4b19      	ldr	r3, [pc, #100]	; (8007c98 <prvAddNewTaskToReadyList+0xc8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	4a18      	ldr	r2, [pc, #96]	; (8007c98 <prvAddNewTaskToReadyList+0xc8>)
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4a15      	ldr	r2, [pc, #84]	; (8007c9c <prvAddNewTaskToReadyList+0xcc>)
 8007c48:	441a      	add	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f7fe ff24 	bl	8006a9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c56:	f000 ffc1 	bl	8008bdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <prvAddNewTaskToReadyList+0xc0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00e      	beq.n	8007c80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c62:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <prvAddNewTaskToReadyList+0xbc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d207      	bcs.n	8007c80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <prvAddNewTaskToReadyList+0xd0>)
 8007c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20000604 	.word	0x20000604
 8007c8c:	20000504 	.word	0x20000504
 8007c90:	20000610 	.word	0x20000610
 8007c94:	20000620 	.word	0x20000620
 8007c98:	2000060c 	.word	0x2000060c
 8007c9c:	20000508 	.word	0x20000508
 8007ca0:	e000ed04 	.word	0xe000ed04

08007ca4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d017      	beq.n	8007ce6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cb6:	4b13      	ldr	r3, [pc, #76]	; (8007d04 <vTaskDelay+0x60>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <vTaskDelay+0x30>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	60bb      	str	r3, [r7, #8]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007cd4:	f000 f87a 	bl	8007dcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cd8:	2100      	movs	r1, #0
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fdfa 	bl	80088d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ce0:	f000 f882 	bl	8007de8 <xTaskResumeAll>
 8007ce4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d107      	bne.n	8007cfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007cec:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <vTaskDelay+0x64>)
 8007cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	2000062c 	.word	0x2000062c
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08a      	sub	sp, #40	; 0x28
 8007d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d1a:	463a      	mov	r2, r7
 8007d1c:	1d39      	adds	r1, r7, #4
 8007d1e:	f107 0308 	add.w	r3, r7, #8
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7f9 fd3e 	bl	80017a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	9202      	str	r2, [sp, #8]
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	2300      	movs	r3, #0
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	2300      	movs	r3, #0
 8007d38:	460a      	mov	r2, r1
 8007d3a:	491e      	ldr	r1, [pc, #120]	; (8007db4 <vTaskStartScheduler+0xa8>)
 8007d3c:	481e      	ldr	r0, [pc, #120]	; (8007db8 <vTaskStartScheduler+0xac>)
 8007d3e:	f7ff fe26 	bl	800798e <xTaskCreateStatic>
 8007d42:	4603      	mov	r3, r0
 8007d44:	4a1d      	ldr	r2, [pc, #116]	; (8007dbc <vTaskStartScheduler+0xb0>)
 8007d46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d48:	4b1c      	ldr	r3, [pc, #112]	; (8007dbc <vTaskStartScheduler+0xb0>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d50:	2301      	movs	r3, #1
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	e001      	b.n	8007d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d116      	bne.n	8007d8e <vTaskStartScheduler+0x82>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	613b      	str	r3, [r7, #16]
}
 8007d72:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d74:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <vTaskStartScheduler+0xb4>)
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d7c:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <vTaskStartScheduler+0xb8>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d82:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <vTaskStartScheduler+0xbc>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d88:	f000 fe86 	bl	8008a98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d8c:	e00e      	b.n	8007dac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d10a      	bne.n	8007dac <vTaskStartScheduler+0xa0>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	60fb      	str	r3, [r7, #12]
}
 8007da8:	bf00      	nop
 8007daa:	e7fe      	b.n	8007daa <vTaskStartScheduler+0x9e>
}
 8007dac:	bf00      	nop
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	08009524 	.word	0x08009524
 8007db8:	08008365 	.word	0x08008365
 8007dbc:	20000628 	.word	0x20000628
 8007dc0:	20000624 	.word	0x20000624
 8007dc4:	20000610 	.word	0x20000610
 8007dc8:	20000608 	.word	0x20000608

08007dcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007dd0:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <vTaskSuspendAll+0x18>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	4a03      	ldr	r2, [pc, #12]	; (8007de4 <vTaskSuspendAll+0x18>)
 8007dd8:	6013      	str	r3, [r2, #0]
}
 8007dda:	bf00      	nop
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	2000062c 	.word	0x2000062c

08007de8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007df6:	4b41      	ldr	r3, [pc, #260]	; (8007efc <xTaskResumeAll+0x114>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <xTaskResumeAll+0x2c>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	603b      	str	r3, [r7, #0]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e14:	f000 feb2 	bl	8008b7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e18:	4b38      	ldr	r3, [pc, #224]	; (8007efc <xTaskResumeAll+0x114>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	4a37      	ldr	r2, [pc, #220]	; (8007efc <xTaskResumeAll+0x114>)
 8007e20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e22:	4b36      	ldr	r3, [pc, #216]	; (8007efc <xTaskResumeAll+0x114>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d161      	bne.n	8007eee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e2a:	4b35      	ldr	r3, [pc, #212]	; (8007f00 <xTaskResumeAll+0x118>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d05d      	beq.n	8007eee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e32:	e02e      	b.n	8007e92 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007e34:	4b33      	ldr	r3, [pc, #204]	; (8007f04 <xTaskResumeAll+0x11c>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3318      	adds	r3, #24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe fe87 	bl	8006b54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fe82 	bl	8006b54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	2201      	movs	r2, #1
 8007e56:	409a      	lsls	r2, r3
 8007e58:	4b2b      	ldr	r3, [pc, #172]	; (8007f08 <xTaskResumeAll+0x120>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	4a2a      	ldr	r2, [pc, #168]	; (8007f08 <xTaskResumeAll+0x120>)
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e66:	4613      	mov	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4a27      	ldr	r2, [pc, #156]	; (8007f0c <xTaskResumeAll+0x124>)
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4619      	mov	r1, r3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	f7fe fe10 	bl	8006a9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e82:	4b23      	ldr	r3, [pc, #140]	; (8007f10 <xTaskResumeAll+0x128>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d302      	bcc.n	8007e92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007e8c:	4b21      	ldr	r3, [pc, #132]	; (8007f14 <xTaskResumeAll+0x12c>)
 8007e8e:	2201      	movs	r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e92:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <xTaskResumeAll+0x11c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1cc      	bne.n	8007e34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ea0:	f000 fb16 	bl	80084d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007ea4:	4b1c      	ldr	r3, [pc, #112]	; (8007f18 <xTaskResumeAll+0x130>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d010      	beq.n	8007ed2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007eb0:	f000 f836 	bl	8007f20 <xTaskIncrementTick>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007eba:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <xTaskResumeAll+0x12c>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1f1      	bne.n	8007eb0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007ecc:	4b12      	ldr	r3, [pc, #72]	; (8007f18 <xTaskResumeAll+0x130>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ed2:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <xTaskResumeAll+0x12c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007eda:	2301      	movs	r3, #1
 8007edc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <xTaskResumeAll+0x134>)
 8007ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eee:	f000 fe75 	bl	8008bdc <vPortExitCritical>

	return xAlreadyYielded;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	2000062c 	.word	0x2000062c
 8007f00:	20000604 	.word	0x20000604
 8007f04:	200005c4 	.word	0x200005c4
 8007f08:	2000060c 	.word	0x2000060c
 8007f0c:	20000508 	.word	0x20000508
 8007f10:	20000504 	.word	0x20000504
 8007f14:	20000618 	.word	0x20000618
 8007f18:	20000614 	.word	0x20000614
 8007f1c:	e000ed04 	.word	0xe000ed04

08007f20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f2a:	4b51      	ldr	r3, [pc, #324]	; (8008070 <xTaskIncrementTick+0x150>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f040 808d 	bne.w	800804e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f34:	4b4f      	ldr	r3, [pc, #316]	; (8008074 <xTaskIncrementTick+0x154>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f3c:	4a4d      	ldr	r2, [pc, #308]	; (8008074 <xTaskIncrementTick+0x154>)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d120      	bne.n	8007f8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f48:	4b4b      	ldr	r3, [pc, #300]	; (8008078 <xTaskIncrementTick+0x158>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	603b      	str	r3, [r7, #0]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <xTaskIncrementTick+0x46>
 8007f68:	4b43      	ldr	r3, [pc, #268]	; (8008078 <xTaskIncrementTick+0x158>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	4b43      	ldr	r3, [pc, #268]	; (800807c <xTaskIncrementTick+0x15c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a41      	ldr	r2, [pc, #260]	; (8008078 <xTaskIncrementTick+0x158>)
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	4a41      	ldr	r2, [pc, #260]	; (800807c <xTaskIncrementTick+0x15c>)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	4b40      	ldr	r3, [pc, #256]	; (8008080 <xTaskIncrementTick+0x160>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3301      	adds	r3, #1
 8007f82:	4a3f      	ldr	r2, [pc, #252]	; (8008080 <xTaskIncrementTick+0x160>)
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	f000 faa3 	bl	80084d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f8a:	4b3e      	ldr	r3, [pc, #248]	; (8008084 <xTaskIncrementTick+0x164>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d34d      	bcc.n	8008030 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f94:	4b38      	ldr	r3, [pc, #224]	; (8008078 <xTaskIncrementTick+0x158>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <xTaskIncrementTick+0x82>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e000      	b.n	8007fa4 <xTaskIncrementTick+0x84>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa8:	4b36      	ldr	r3, [pc, #216]	; (8008084 <xTaskIncrementTick+0x164>)
 8007faa:	f04f 32ff 	mov.w	r2, #4294967295
 8007fae:	601a      	str	r2, [r3, #0]
					break;
 8007fb0:	e03e      	b.n	8008030 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fb2:	4b31      	ldr	r3, [pc, #196]	; (8008078 <xTaskIncrementTick+0x158>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d203      	bcs.n	8007fd2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fca:	4a2e      	ldr	r2, [pc, #184]	; (8008084 <xTaskIncrementTick+0x164>)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6013      	str	r3, [r2, #0]
						break;
 8007fd0:	e02e      	b.n	8008030 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fdbc 	bl	8006b54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d004      	beq.n	8007fee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	3318      	adds	r3, #24
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fdb3 	bl	8006b54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	409a      	lsls	r2, r3
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <xTaskIncrementTick+0x168>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	4a22      	ldr	r2, [pc, #136]	; (8008088 <xTaskIncrementTick+0x168>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a1f      	ldr	r2, [pc, #124]	; (800808c <xTaskIncrementTick+0x16c>)
 800800e:	441a      	add	r2, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fe fd41 	bl	8006a9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4b1b      	ldr	r3, [pc, #108]	; (8008090 <xTaskIncrementTick+0x170>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	429a      	cmp	r2, r3
 8008028:	d3b4      	bcc.n	8007f94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800802a:	2301      	movs	r3, #1
 800802c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800802e:	e7b1      	b.n	8007f94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008030:	4b17      	ldr	r3, [pc, #92]	; (8008090 <xTaskIncrementTick+0x170>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4915      	ldr	r1, [pc, #84]	; (800808c <xTaskIncrementTick+0x16c>)
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	440b      	add	r3, r1
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d907      	bls.n	8008058 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008048:	2301      	movs	r3, #1
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	e004      	b.n	8008058 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800804e:	4b11      	ldr	r3, [pc, #68]	; (8008094 <xTaskIncrementTick+0x174>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	4a0f      	ldr	r2, [pc, #60]	; (8008094 <xTaskIncrementTick+0x174>)
 8008056:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008058:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <xTaskIncrementTick+0x178>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008060:	2301      	movs	r3, #1
 8008062:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008064:	697b      	ldr	r3, [r7, #20]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	2000062c 	.word	0x2000062c
 8008074:	20000608 	.word	0x20000608
 8008078:	200005bc 	.word	0x200005bc
 800807c:	200005c0 	.word	0x200005c0
 8008080:	2000061c 	.word	0x2000061c
 8008084:	20000624 	.word	0x20000624
 8008088:	2000060c 	.word	0x2000060c
 800808c:	20000508 	.word	0x20000508
 8008090:	20000504 	.word	0x20000504
 8008094:	20000614 	.word	0x20000614
 8008098:	20000618 	.word	0x20000618

0800809c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080a2:	4b26      	ldr	r3, [pc, #152]	; (800813c <vTaskSwitchContext+0xa0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080aa:	4b25      	ldr	r3, [pc, #148]	; (8008140 <vTaskSwitchContext+0xa4>)
 80080ac:	2201      	movs	r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080b0:	e03f      	b.n	8008132 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80080b2:	4b23      	ldr	r3, [pc, #140]	; (8008140 <vTaskSwitchContext+0xa4>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80080b8:	4b22      	ldr	r3, [pc, #136]	; (8008144 <vTaskSwitchContext+0xa8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	fab3 f383 	clz	r3, r3
 80080c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80080c6:	7afb      	ldrb	r3, [r7, #11]
 80080c8:	f1c3 031f 	rsb	r3, r3, #31
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	491e      	ldr	r1, [pc, #120]	; (8008148 <vTaskSwitchContext+0xac>)
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4613      	mov	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	440b      	add	r3, r1
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	607b      	str	r3, [r7, #4]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <vTaskSwitchContext+0x5a>
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4a11      	ldr	r2, [pc, #68]	; (8008148 <vTaskSwitchContext+0xac>)
 8008104:	4413      	add	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	605a      	str	r2, [r3, #4]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	3308      	adds	r3, #8
 800811a:	429a      	cmp	r2, r3
 800811c:	d104      	bne.n	8008128 <vTaskSwitchContext+0x8c>
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	605a      	str	r2, [r3, #4]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	4a07      	ldr	r2, [pc, #28]	; (800814c <vTaskSwitchContext+0xb0>)
 8008130:	6013      	str	r3, [r2, #0]
}
 8008132:	bf00      	nop
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	bc80      	pop	{r7}
 800813a:	4770      	bx	lr
 800813c:	2000062c 	.word	0x2000062c
 8008140:	20000618 	.word	0x20000618
 8008144:	2000060c 	.word	0x2000060c
 8008148:	20000508 	.word	0x20000508
 800814c:	20000504 	.word	0x20000504

08008150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	60fb      	str	r3, [r7, #12]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008176:	4b07      	ldr	r3, [pc, #28]	; (8008194 <vTaskPlaceOnEventList+0x44>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3318      	adds	r3, #24
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fe fcb0 	bl	8006ae4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008184:	2101      	movs	r1, #1
 8008186:	6838      	ldr	r0, [r7, #0]
 8008188:	f000 fba4 	bl	80088d4 <prvAddCurrentTaskToDelayedList>
}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20000504 	.word	0x20000504

08008198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	60fb      	str	r3, [r7, #12]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	3318      	adds	r3, #24
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe fcc3 	bl	8006b54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ce:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <xTaskRemoveFromEventList+0xac>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d11c      	bne.n	8008210 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	3304      	adds	r3, #4
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fcba 	bl	8006b54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	2201      	movs	r2, #1
 80081e6:	409a      	lsls	r2, r3
 80081e8:	4b17      	ldr	r3, [pc, #92]	; (8008248 <xTaskRemoveFromEventList+0xb0>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	4a16      	ldr	r2, [pc, #88]	; (8008248 <xTaskRemoveFromEventList+0xb0>)
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4a13      	ldr	r2, [pc, #76]	; (800824c <xTaskRemoveFromEventList+0xb4>)
 8008200:	441a      	add	r2, r3
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7fe fc48 	bl	8006a9e <vListInsertEnd>
 800820e:	e005      	b.n	800821c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	3318      	adds	r3, #24
 8008214:	4619      	mov	r1, r3
 8008216:	480e      	ldr	r0, [pc, #56]	; (8008250 <xTaskRemoveFromEventList+0xb8>)
 8008218:	f7fe fc41 	bl	8006a9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008220:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <xTaskRemoveFromEventList+0xbc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	429a      	cmp	r2, r3
 8008228:	d905      	bls.n	8008236 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800822a:	2301      	movs	r3, #1
 800822c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800822e:	4b0a      	ldr	r3, [pc, #40]	; (8008258 <xTaskRemoveFromEventList+0xc0>)
 8008230:	2201      	movs	r2, #1
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	e001      	b.n	800823a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008236:	2300      	movs	r3, #0
 8008238:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800823a:	697b      	ldr	r3, [r7, #20]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	2000062c 	.word	0x2000062c
 8008248:	2000060c 	.word	0x2000060c
 800824c:	20000508 	.word	0x20000508
 8008250:	200005c4 	.word	0x200005c4
 8008254:	20000504 	.word	0x20000504
 8008258:	20000618 	.word	0x20000618

0800825c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008264:	4b06      	ldr	r3, [pc, #24]	; (8008280 <vTaskInternalSetTimeOutState+0x24>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <vTaskInternalSetTimeOutState+0x28>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	605a      	str	r2, [r3, #4]
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	bc80      	pop	{r7}
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	2000061c 	.word	0x2000061c
 8008284:	20000608 	.word	0x20000608

08008288 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	613b      	str	r3, [r7, #16]
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	60fb      	str	r3, [r7, #12]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082ca:	f000 fc57 	bl	8008b7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082ce:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <xTaskCheckForTimeOut+0xbc>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e6:	d102      	bne.n	80082ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	e023      	b.n	8008336 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <xTaskCheckForTimeOut+0xc0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d007      	beq.n	800830a <xTaskCheckForTimeOut+0x82>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	429a      	cmp	r2, r3
 8008302:	d302      	bcc.n	800830a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	61fb      	str	r3, [r7, #28]
 8008308:	e015      	b.n	8008336 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	429a      	cmp	r2, r3
 8008312:	d20b      	bcs.n	800832c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	1ad2      	subs	r2, r2, r3
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff ff9b 	bl	800825c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008326:	2300      	movs	r3, #0
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	e004      	b.n	8008336 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008332:	2301      	movs	r3, #1
 8008334:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008336:	f000 fc51 	bl	8008bdc <vPortExitCritical>

	return xReturn;
 800833a:	69fb      	ldr	r3, [r7, #28]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000608 	.word	0x20000608
 8008348:	2000061c 	.word	0x2000061c

0800834c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <vTaskMissedYield+0x14>)
 8008352:	2201      	movs	r2, #1
 8008354:	601a      	str	r2, [r3, #0]
}
 8008356:	bf00      	nop
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20000618 	.word	0x20000618

08008364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800836c:	f000 f852 	bl	8008414 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008370:	4b06      	ldr	r3, [pc, #24]	; (800838c <prvIdleTask+0x28>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d9f9      	bls.n	800836c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008378:	4b05      	ldr	r3, [pc, #20]	; (8008390 <prvIdleTask+0x2c>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008388:	e7f0      	b.n	800836c <prvIdleTask+0x8>
 800838a:	bf00      	nop
 800838c:	20000508 	.word	0x20000508
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800839a:	2300      	movs	r3, #0
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	e00c      	b.n	80083ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4a12      	ldr	r2, [pc, #72]	; (80083f4 <prvInitialiseTaskLists+0x60>)
 80083ac:	4413      	add	r3, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fb4a 	bl	8006a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3301      	adds	r3, #1
 80083b8:	607b      	str	r3, [r7, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b06      	cmp	r3, #6
 80083be:	d9ef      	bls.n	80083a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083c0:	480d      	ldr	r0, [pc, #52]	; (80083f8 <prvInitialiseTaskLists+0x64>)
 80083c2:	f7fe fb41 	bl	8006a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083c6:	480d      	ldr	r0, [pc, #52]	; (80083fc <prvInitialiseTaskLists+0x68>)
 80083c8:	f7fe fb3e 	bl	8006a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083cc:	480c      	ldr	r0, [pc, #48]	; (8008400 <prvInitialiseTaskLists+0x6c>)
 80083ce:	f7fe fb3b 	bl	8006a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083d2:	480c      	ldr	r0, [pc, #48]	; (8008404 <prvInitialiseTaskLists+0x70>)
 80083d4:	f7fe fb38 	bl	8006a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083d8:	480b      	ldr	r0, [pc, #44]	; (8008408 <prvInitialiseTaskLists+0x74>)
 80083da:	f7fe fb35 	bl	8006a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083de:	4b0b      	ldr	r3, [pc, #44]	; (800840c <prvInitialiseTaskLists+0x78>)
 80083e0:	4a05      	ldr	r2, [pc, #20]	; (80083f8 <prvInitialiseTaskLists+0x64>)
 80083e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083e4:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <prvInitialiseTaskLists+0x7c>)
 80083e6:	4a05      	ldr	r2, [pc, #20]	; (80083fc <prvInitialiseTaskLists+0x68>)
 80083e8:	601a      	str	r2, [r3, #0]
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000508 	.word	0x20000508
 80083f8:	20000594 	.word	0x20000594
 80083fc:	200005a8 	.word	0x200005a8
 8008400:	200005c4 	.word	0x200005c4
 8008404:	200005d8 	.word	0x200005d8
 8008408:	200005f0 	.word	0x200005f0
 800840c:	200005bc 	.word	0x200005bc
 8008410:	200005c0 	.word	0x200005c0

08008414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800841a:	e019      	b.n	8008450 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800841c:	f000 fbae 	bl	8008b7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008420:	4b10      	ldr	r3, [pc, #64]	; (8008464 <prvCheckTasksWaitingTermination+0x50>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3304      	adds	r3, #4
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fb91 	bl	8006b54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008432:	4b0d      	ldr	r3, [pc, #52]	; (8008468 <prvCheckTasksWaitingTermination+0x54>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3b01      	subs	r3, #1
 8008438:	4a0b      	ldr	r2, [pc, #44]	; (8008468 <prvCheckTasksWaitingTermination+0x54>)
 800843a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800843c:	4b0b      	ldr	r3, [pc, #44]	; (800846c <prvCheckTasksWaitingTermination+0x58>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3b01      	subs	r3, #1
 8008442:	4a0a      	ldr	r2, [pc, #40]	; (800846c <prvCheckTasksWaitingTermination+0x58>)
 8008444:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008446:	f000 fbc9 	bl	8008bdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f810 	bl	8008470 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <prvCheckTasksWaitingTermination+0x58>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e1      	bne.n	800841c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	200005d8 	.word	0x200005d8
 8008468:	20000604 	.word	0x20000604
 800846c:	200005ec 	.word	0x200005ec

08008470 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800847e:	2b00      	cmp	r3, #0
 8008480:	d108      	bne.n	8008494 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fd3c 	bl	8008f04 <vPortFree>
				vPortFree( pxTCB );
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fd39 	bl	8008f04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008492:	e018      	b.n	80084c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800849a:	2b01      	cmp	r3, #1
 800849c:	d103      	bne.n	80084a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fd30 	bl	8008f04 <vPortFree>
	}
 80084a4:	e00f      	b.n	80084c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d00a      	beq.n	80084c6 <prvDeleteTCB+0x56>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	60fb      	str	r3, [r7, #12]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <prvDeleteTCB+0x54>
	}
 80084c6:	bf00      	nop
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d6:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <prvResetNextTaskUnblockTime+0x40>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <prvResetNextTaskUnblockTime+0x14>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e000      	b.n	80084e6 <prvResetNextTaskUnblockTime+0x16>
 80084e4:	2300      	movs	r3, #0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084ea:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <prvResetNextTaskUnblockTime+0x44>)
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295
 80084f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084f2:	e008      	b.n	8008506 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084f4:	4b06      	ldr	r3, [pc, #24]	; (8008510 <prvResetNextTaskUnblockTime+0x40>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	4a04      	ldr	r2, [pc, #16]	; (8008514 <prvResetNextTaskUnblockTime+0x44>)
 8008504:	6013      	str	r3, [r2, #0]
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr
 8008510:	200005bc 	.word	0x200005bc
 8008514:	20000624 	.word	0x20000624

08008518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <xTaskGetSchedulerState+0x34>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008526:	2301      	movs	r3, #1
 8008528:	607b      	str	r3, [r7, #4]
 800852a:	e008      	b.n	800853e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852c:	4b08      	ldr	r3, [pc, #32]	; (8008550 <xTaskGetSchedulerState+0x38>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008534:	2302      	movs	r3, #2
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	e001      	b.n	800853e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800853a:	2300      	movs	r3, #0
 800853c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800853e:	687b      	ldr	r3, [r7, #4]
	}
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000610 	.word	0x20000610
 8008550:	2000062c 	.word	0x2000062c

08008554 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d06e      	beq.n	8008648 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856e:	4b39      	ldr	r3, [pc, #228]	; (8008654 <xTaskPriorityInherit+0x100>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	429a      	cmp	r2, r3
 8008576:	d25e      	bcs.n	8008636 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	db06      	blt.n	800858e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008580:	4b34      	ldr	r3, [pc, #208]	; (8008654 <xTaskPriorityInherit+0x100>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	f1c3 0207 	rsb	r2, r3, #7
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6959      	ldr	r1, [r3, #20]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4a2e      	ldr	r2, [pc, #184]	; (8008658 <xTaskPriorityInherit+0x104>)
 80085a0:	4413      	add	r3, r2
 80085a2:	4299      	cmp	r1, r3
 80085a4:	d101      	bne.n	80085aa <xTaskPriorityInherit+0x56>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e000      	b.n	80085ac <xTaskPriorityInherit+0x58>
 80085aa:	2300      	movs	r3, #0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d03a      	beq.n	8008626 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe facd 	bl	8006b54 <uxListRemove>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d115      	bne.n	80085ec <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c4:	4924      	ldr	r1, [pc, #144]	; (8008658 <xTaskPriorityInherit+0x104>)
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	440b      	add	r3, r1
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10a      	bne.n	80085ec <xTaskPriorityInherit+0x98>
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	2201      	movs	r2, #1
 80085dc:	fa02 f303 	lsl.w	r3, r2, r3
 80085e0:	43da      	mvns	r2, r3
 80085e2:	4b1e      	ldr	r3, [pc, #120]	; (800865c <xTaskPriorityInherit+0x108>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4013      	ands	r3, r2
 80085e8:	4a1c      	ldr	r2, [pc, #112]	; (800865c <xTaskPriorityInherit+0x108>)
 80085ea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085ec:	4b19      	ldr	r3, [pc, #100]	; (8008654 <xTaskPriorityInherit+0x100>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	2201      	movs	r2, #1
 80085fc:	409a      	lsls	r2, r3
 80085fe:	4b17      	ldr	r3, [pc, #92]	; (800865c <xTaskPriorityInherit+0x108>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4313      	orrs	r3, r2
 8008604:	4a15      	ldr	r2, [pc, #84]	; (800865c <xTaskPriorityInherit+0x108>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4a10      	ldr	r2, [pc, #64]	; (8008658 <xTaskPriorityInherit+0x104>)
 8008616:	441a      	add	r2, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe fa3d 	bl	8006a9e <vListInsertEnd>
 8008624:	e004      	b.n	8008630 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008626:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <xTaskPriorityInherit+0x100>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e008      	b.n	8008648 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800863a:	4b06      	ldr	r3, [pc, #24]	; (8008654 <xTaskPriorityInherit+0x100>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d201      	bcs.n	8008648 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008648:	68fb      	ldr	r3, [r7, #12]
	}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000504 	.word	0x20000504
 8008658:	20000508 	.word	0x20000508
 800865c:	2000060c 	.word	0x2000060c

08008660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800866c:	2300      	movs	r3, #0
 800866e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d06e      	beq.n	8008754 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008676:	4b3a      	ldr	r3, [pc, #232]	; (8008760 <xTaskPriorityDisinherit+0x100>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	429a      	cmp	r2, r3
 800867e:	d00a      	beq.n	8008696 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	60fb      	str	r3, [r7, #12]
}
 8008692:	bf00      	nop
 8008694:	e7fe      	b.n	8008694 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10a      	bne.n	80086b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	60bb      	str	r3, [r7, #8]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d044      	beq.n	8008754 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d140      	bne.n	8008754 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	3304      	adds	r3, #4
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fa3c 	bl	8006b54 <uxListRemove>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d115      	bne.n	800870e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e6:	491f      	ldr	r1, [pc, #124]	; (8008764 <xTaskPriorityDisinherit+0x104>)
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <xTaskPriorityDisinherit+0xae>
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fc:	2201      	movs	r2, #1
 80086fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008702:	43da      	mvns	r2, r3
 8008704:	4b18      	ldr	r3, [pc, #96]	; (8008768 <xTaskPriorityDisinherit+0x108>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4013      	ands	r3, r2
 800870a:	4a17      	ldr	r2, [pc, #92]	; (8008768 <xTaskPriorityDisinherit+0x108>)
 800870c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871a:	f1c3 0207 	rsb	r2, r3, #7
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008726:	2201      	movs	r2, #1
 8008728:	409a      	lsls	r2, r3
 800872a:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <xTaskPriorityDisinherit+0x108>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4313      	orrs	r3, r2
 8008730:	4a0d      	ldr	r2, [pc, #52]	; (8008768 <xTaskPriorityDisinherit+0x108>)
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4a08      	ldr	r2, [pc, #32]	; (8008764 <xTaskPriorityDisinherit+0x104>)
 8008742:	441a      	add	r2, r3
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	3304      	adds	r3, #4
 8008748:	4619      	mov	r1, r3
 800874a:	4610      	mov	r0, r2
 800874c:	f7fe f9a7 	bl	8006a9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008750:	2301      	movs	r3, #1
 8008752:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008754:	697b      	ldr	r3, [r7, #20]
	}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20000504 	.word	0x20000504
 8008764:	20000508 	.word	0x20000508
 8008768:	2000060c 	.word	0x2000060c

0800876c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800876c:	b580      	push	{r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800877a:	2301      	movs	r3, #1
 800877c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 8088 	beq.w	8008896 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10a      	bne.n	80087a4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	60fb      	str	r3, [r7, #12]
}
 80087a0:	bf00      	nop
 80087a2:	e7fe      	b.n	80087a2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d902      	bls.n	80087b4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	61fb      	str	r3, [r7, #28]
 80087b2:	e002      	b.n	80087ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d068      	beq.n	8008896 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d163      	bne.n	8008896 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087ce:	4b34      	ldr	r3, [pc, #208]	; (80088a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d10a      	bne.n	80087ee <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	60bb      	str	r3, [r7, #8]
}
 80087ea:	bf00      	nop
 80087ec:	e7fe      	b.n	80087ec <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	db04      	blt.n	800880c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	f1c3 0207 	rsb	r2, r3, #7
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	6959      	ldr	r1, [r3, #20]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4a22      	ldr	r2, [pc, #136]	; (80088a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800881c:	4413      	add	r3, r2
 800881e:	4299      	cmp	r1, r3
 8008820:	d101      	bne.n	8008826 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8008826:	2300      	movs	r3, #0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d034      	beq.n	8008896 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	3304      	adds	r3, #4
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe f98f 	bl	8006b54 <uxListRemove>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d115      	bne.n	8008868 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008840:	4918      	ldr	r1, [pc, #96]	; (80088a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	2201      	movs	r2, #1
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	43da      	mvns	r2, r3
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4013      	ands	r3, r2
 8008864:	4a10      	ldr	r2, [pc, #64]	; (80088a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008866:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	2201      	movs	r2, #1
 800886e:	409a      	lsls	r2, r3
 8008870:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4313      	orrs	r3, r2
 8008876:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4a07      	ldr	r2, [pc, #28]	; (80088a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008888:	441a      	add	r2, r3
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	3304      	adds	r3, #4
 800888e:	4619      	mov	r1, r3
 8008890:	4610      	mov	r0, r2
 8008892:	f7fe f904 	bl	8006a9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008896:	bf00      	nop
 8008898:	3720      	adds	r7, #32
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20000504 	.word	0x20000504
 80088a4:	20000508 	.word	0x20000508
 80088a8:	2000060c 	.word	0x2000060c

080088ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80088b0:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d004      	beq.n	80088c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80088b8:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088be:	3201      	adds	r2, #1
 80088c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80088c2:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80088c4:	681b      	ldr	r3, [r3, #0]
	}
 80088c6:	4618      	mov	r0, r3
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bc80      	pop	{r7}
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20000504 	.word	0x20000504

080088d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088de:	4b29      	ldr	r3, [pc, #164]	; (8008984 <prvAddCurrentTaskToDelayedList+0xb0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088e4:	4b28      	ldr	r3, [pc, #160]	; (8008988 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe f932 	bl	8006b54 <uxListRemove>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10b      	bne.n	800890e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80088f6:	4b24      	ldr	r3, [pc, #144]	; (8008988 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	2201      	movs	r2, #1
 80088fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008902:	43da      	mvns	r2, r3
 8008904:	4b21      	ldr	r3, [pc, #132]	; (800898c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4013      	ands	r3, r2
 800890a:	4a20      	ldr	r2, [pc, #128]	; (800898c <prvAddCurrentTaskToDelayedList+0xb8>)
 800890c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d10a      	bne.n	800892c <prvAddCurrentTaskToDelayedList+0x58>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d007      	beq.n	800892c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800891c:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <prvAddCurrentTaskToDelayedList+0xb4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3304      	adds	r3, #4
 8008922:	4619      	mov	r1, r3
 8008924:	481a      	ldr	r0, [pc, #104]	; (8008990 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008926:	f7fe f8ba 	bl	8006a9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800892a:	e026      	b.n	800897a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4413      	add	r3, r2
 8008932:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008934:	4b14      	ldr	r3, [pc, #80]	; (8008988 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	429a      	cmp	r2, r3
 8008942:	d209      	bcs.n	8008958 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008944:	4b13      	ldr	r3, [pc, #76]	; (8008994 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <prvAddCurrentTaskToDelayedList+0xb4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3304      	adds	r3, #4
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f7fe f8c7 	bl	8006ae4 <vListInsert>
}
 8008956:	e010      	b.n	800897a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008958:	4b0f      	ldr	r3, [pc, #60]	; (8008998 <prvAddCurrentTaskToDelayedList+0xc4>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <prvAddCurrentTaskToDelayedList+0xb4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3304      	adds	r3, #4
 8008962:	4619      	mov	r1, r3
 8008964:	4610      	mov	r0, r2
 8008966:	f7fe f8bd 	bl	8006ae4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800896a:	4b0c      	ldr	r3, [pc, #48]	; (800899c <prvAddCurrentTaskToDelayedList+0xc8>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	429a      	cmp	r2, r3
 8008972:	d202      	bcs.n	800897a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008974:	4a09      	ldr	r2, [pc, #36]	; (800899c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6013      	str	r3, [r2, #0]
}
 800897a:	bf00      	nop
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000608 	.word	0x20000608
 8008988:	20000504 	.word	0x20000504
 800898c:	2000060c 	.word	0x2000060c
 8008990:	200005f0 	.word	0x200005f0
 8008994:	200005c0 	.word	0x200005c0
 8008998:	200005bc 	.word	0x200005bc
 800899c:	20000624 	.word	0x20000624

080089a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3b04      	subs	r3, #4
 80089b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	3b04      	subs	r3, #4
 80089be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f023 0201 	bic.w	r2, r3, #1
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3b04      	subs	r3, #4
 80089ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089d0:	4a08      	ldr	r2, [pc, #32]	; (80089f4 <pxPortInitialiseStack+0x54>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3b14      	subs	r3, #20
 80089da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3b20      	subs	r3, #32
 80089e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089e8:	68fb      	ldr	r3, [r7, #12]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr
 80089f4:	080089f9 	.word	0x080089f9

080089f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a02:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <prvTaskExitError+0x54>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d00a      	beq.n	8008a22 <prvTaskExitError+0x2a>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	60fb      	str	r3, [r7, #12]
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <prvTaskExitError+0x28>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	60bb      	str	r3, [r7, #8]
}
 8008a34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a36:	bf00      	nop
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0fc      	beq.n	8008a38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a3e:	bf00      	nop
 8008a40:	bf00      	nop
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bc80      	pop	{r7}
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	2000000c 	.word	0x2000000c

08008a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <pxCurrentTCBConst2>)
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	6808      	ldr	r0, [r1, #0]
 8008a56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a5a:	f380 8809 	msr	PSP, r0
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8811 	msr	BASEPRI, r0
 8008a6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a6e:	4770      	bx	lr

08008a70 <pxCurrentTCBConst2>:
 8008a70:	20000504 	.word	0x20000504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a78:	4806      	ldr	r0, [pc, #24]	; (8008a94 <prvPortStartFirstTask+0x1c>)
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	6800      	ldr	r0, [r0, #0]
 8008a7e:	f380 8808 	msr	MSP, r0
 8008a82:	b662      	cpsie	i
 8008a84:	b661      	cpsie	f
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	df00      	svc	0
 8008a90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a92:	bf00      	nop
 8008a94:	e000ed08 	.word	0xe000ed08

08008a98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a9e:	4b32      	ldr	r3, [pc, #200]	; (8008b68 <xPortStartScheduler+0xd0>)
 8008aa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	22ff      	movs	r2, #255	; 0xff
 8008aae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	4b2a      	ldr	r3, [pc, #168]	; (8008b6c <xPortStartScheduler+0xd4>)
 8008ac4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ac6:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <xPortStartScheduler+0xd8>)
 8008ac8:	2207      	movs	r2, #7
 8008aca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008acc:	e009      	b.n	8008ae2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008ace:	4b28      	ldr	r3, [pc, #160]	; (8008b70 <xPortStartScheduler+0xd8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	4a26      	ldr	r2, [pc, #152]	; (8008b70 <xPortStartScheduler+0xd8>)
 8008ad6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aea:	2b80      	cmp	r3, #128	; 0x80
 8008aec:	d0ef      	beq.n	8008ace <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aee:	4b20      	ldr	r3, [pc, #128]	; (8008b70 <xPortStartScheduler+0xd8>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f1c3 0307 	rsb	r3, r3, #7
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d00a      	beq.n	8008b10 <xPortStartScheduler+0x78>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	60bb      	str	r3, [r7, #8]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b10:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <xPortStartScheduler+0xd8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	021b      	lsls	r3, r3, #8
 8008b16:	4a16      	ldr	r2, [pc, #88]	; (8008b70 <xPortStartScheduler+0xd8>)
 8008b18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b1a:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <xPortStartScheduler+0xd8>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b22:	4a13      	ldr	r2, [pc, #76]	; (8008b70 <xPortStartScheduler+0xd8>)
 8008b24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b2e:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <xPortStartScheduler+0xdc>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a10      	ldr	r2, [pc, #64]	; (8008b74 <xPortStartScheduler+0xdc>)
 8008b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b3a:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <xPortStartScheduler+0xdc>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a0d      	ldr	r2, [pc, #52]	; (8008b74 <xPortStartScheduler+0xdc>)
 8008b40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b46:	f000 f8b9 	bl	8008cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b4a:	4b0b      	ldr	r3, [pc, #44]	; (8008b78 <xPortStartScheduler+0xe0>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b50:	f7ff ff92 	bl	8008a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b54:	f7ff faa2 	bl	800809c <vTaskSwitchContext>
	prvTaskExitError();
 8008b58:	f7ff ff4e 	bl	80089f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	e000e400 	.word	0xe000e400
 8008b6c:	20000630 	.word	0x20000630
 8008b70:	20000634 	.word	0x20000634
 8008b74:	e000ed20 	.word	0xe000ed20
 8008b78:	2000000c 	.word	0x2000000c

08008b7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	607b      	str	r3, [r7, #4]
}
 8008b94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b96:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <vPortEnterCritical+0x58>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4a0d      	ldr	r2, [pc, #52]	; (8008bd4 <vPortEnterCritical+0x58>)
 8008b9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ba0:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <vPortEnterCritical+0x58>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d10f      	bne.n	8008bc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ba8:	4b0b      	ldr	r3, [pc, #44]	; (8008bd8 <vPortEnterCritical+0x5c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	603b      	str	r3, [r7, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	e7fe      	b.n	8008bc6 <vPortEnterCritical+0x4a>
	}
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bc80      	pop	{r7}
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	2000000c 	.word	0x2000000c
 8008bd8:	e000ed04 	.word	0xe000ed04

08008bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008be2:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <vPortExitCritical+0x4c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <vPortExitCritical+0x24>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	607b      	str	r3, [r7, #4]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c00:	4b09      	ldr	r3, [pc, #36]	; (8008c28 <vPortExitCritical+0x4c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	4a08      	ldr	r2, [pc, #32]	; (8008c28 <vPortExitCritical+0x4c>)
 8008c08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <vPortExitCritical+0x4c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d105      	bne.n	8008c1e <vPortExitCritical+0x42>
 8008c12:	2300      	movs	r3, #0
 8008c14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	f383 8811 	msr	BASEPRI, r3
}
 8008c1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c1e:	bf00      	nop
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bc80      	pop	{r7}
 8008c26:	4770      	bx	lr
 8008c28:	2000000c 	.word	0x2000000c
 8008c2c:	00000000 	.word	0x00000000

08008c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c30:	f3ef 8009 	mrs	r0, PSP
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <pxCurrentTCBConst>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c40:	6010      	str	r0, [r2, #0]
 8008c42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008c46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c4a:	f380 8811 	msr	BASEPRI, r0
 8008c4e:	f7ff fa25 	bl	800809c <vTaskSwitchContext>
 8008c52:	f04f 0000 	mov.w	r0, #0
 8008c56:	f380 8811 	msr	BASEPRI, r0
 8008c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c5e:	6819      	ldr	r1, [r3, #0]
 8008c60:	6808      	ldr	r0, [r1, #0]
 8008c62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c66:	f380 8809 	msr	PSP, r0
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	4770      	bx	lr

08008c70 <pxCurrentTCBConst>:
 8008c70:	20000504 	.word	0x20000504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
}
 8008c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c92:	f7ff f945 	bl	8007f20 <xTaskIncrementTick>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <SysTick_Handler+0x40>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	f383 8811 	msr	BASEPRI, r3
}
 8008cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cc0:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <vPortSetupTimerInterrupt+0x30>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cc6:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <vPortSetupTimerInterrupt+0x34>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ccc:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <vPortSetupTimerInterrupt+0x38>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a09      	ldr	r2, [pc, #36]	; (8008cf8 <vPortSetupTimerInterrupt+0x3c>)
 8008cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd6:	099b      	lsrs	r3, r3, #6
 8008cd8:	4a08      	ldr	r2, [pc, #32]	; (8008cfc <vPortSetupTimerInterrupt+0x40>)
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cde:	4b03      	ldr	r3, [pc, #12]	; (8008cec <vPortSetupTimerInterrupt+0x30>)
 8008ce0:	2207      	movs	r2, #7
 8008ce2:	601a      	str	r2, [r3, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bc80      	pop	{r7}
 8008cea:	4770      	bx	lr
 8008cec:	e000e010 	.word	0xe000e010
 8008cf0:	e000e018 	.word	0xe000e018
 8008cf4:	20000000 	.word	0x20000000
 8008cf8:	10624dd3 	.word	0x10624dd3
 8008cfc:	e000e014 	.word	0xe000e014

08008d00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d06:	f3ef 8305 	mrs	r3, IPSR
 8008d0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b0f      	cmp	r3, #15
 8008d10:	d914      	bls.n	8008d3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d12:	4a16      	ldr	r2, [pc, #88]	; (8008d6c <vPortValidateInterruptPriority+0x6c>)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d1c:	4b14      	ldr	r3, [pc, #80]	; (8008d70 <vPortValidateInterruptPriority+0x70>)
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	7afa      	ldrb	r2, [r7, #11]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d20a      	bcs.n	8008d3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	607b      	str	r3, [r7, #4]
}
 8008d38:	bf00      	nop
 8008d3a:	e7fe      	b.n	8008d3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d3c:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <vPortValidateInterruptPriority+0x74>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d44:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <vPortValidateInterruptPriority+0x78>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d90a      	bls.n	8008d62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	603b      	str	r3, [r7, #0]
}
 8008d5e:	bf00      	nop
 8008d60:	e7fe      	b.n	8008d60 <vPortValidateInterruptPriority+0x60>
	}
 8008d62:	bf00      	nop
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bc80      	pop	{r7}
 8008d6a:	4770      	bx	lr
 8008d6c:	e000e3f0 	.word	0xe000e3f0
 8008d70:	20000630 	.word	0x20000630
 8008d74:	e000ed0c 	.word	0xe000ed0c
 8008d78:	20000634 	.word	0x20000634

08008d7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08a      	sub	sp, #40	; 0x28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d88:	f7ff f820 	bl	8007dcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d8c:	4b58      	ldr	r3, [pc, #352]	; (8008ef0 <pvPortMalloc+0x174>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d94:	f000 f910 	bl	8008fb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d98:	4b56      	ldr	r3, [pc, #344]	; (8008ef4 <pvPortMalloc+0x178>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4013      	ands	r3, r2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f040 808e 	bne.w	8008ec2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01d      	beq.n	8008de8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008dac:	2208      	movs	r2, #8
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4413      	add	r3, r2
 8008db2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d014      	beq.n	8008de8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f023 0307 	bic.w	r3, r3, #7
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <pvPortMalloc+0x6c>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	617b      	str	r3, [r7, #20]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d069      	beq.n	8008ec2 <pvPortMalloc+0x146>
 8008dee:	4b42      	ldr	r3, [pc, #264]	; (8008ef8 <pvPortMalloc+0x17c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d864      	bhi.n	8008ec2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008df8:	4b40      	ldr	r3, [pc, #256]	; (8008efc <pvPortMalloc+0x180>)
 8008dfa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dfc:	4b3f      	ldr	r3, [pc, #252]	; (8008efc <pvPortMalloc+0x180>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e02:	e004      	b.n	8008e0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d903      	bls.n	8008e20 <pvPortMalloc+0xa4>
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1f1      	bne.n	8008e04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e20:	4b33      	ldr	r3, [pc, #204]	; (8008ef0 <pvPortMalloc+0x174>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d04b      	beq.n	8008ec2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2208      	movs	r2, #8
 8008e30:	4413      	add	r3, r2
 8008e32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	1ad2      	subs	r2, r2, r3
 8008e44:	2308      	movs	r3, #8
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d91f      	bls.n	8008e8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4413      	add	r3, r2
 8008e52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <pvPortMalloc+0xf8>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	613b      	str	r3, [r7, #16]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	1ad2      	subs	r2, r2, r3
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e86:	69b8      	ldr	r0, [r7, #24]
 8008e88:	f000 f8f8 	bl	800907c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e8c:	4b1a      	ldr	r3, [pc, #104]	; (8008ef8 <pvPortMalloc+0x17c>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	4a18      	ldr	r2, [pc, #96]	; (8008ef8 <pvPortMalloc+0x17c>)
 8008e98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e9a:	4b17      	ldr	r3, [pc, #92]	; (8008ef8 <pvPortMalloc+0x17c>)
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	4b18      	ldr	r3, [pc, #96]	; (8008f00 <pvPortMalloc+0x184>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d203      	bcs.n	8008eae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ea6:	4b14      	ldr	r3, [pc, #80]	; (8008ef8 <pvPortMalloc+0x17c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <pvPortMalloc+0x184>)
 8008eac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	4b10      	ldr	r3, [pc, #64]	; (8008ef4 <pvPortMalloc+0x178>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ec2:	f7fe ff91 	bl	8007de8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00a      	beq.n	8008ee6 <pvPortMalloc+0x16a>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60fb      	str	r3, [r7, #12]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <pvPortMalloc+0x168>
	return pvReturn;
 8008ee6:	69fb      	ldr	r3, [r7, #28]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3728      	adds	r7, #40	; 0x28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20001240 	.word	0x20001240
 8008ef4:	2000124c 	.word	0x2000124c
 8008ef8:	20001244 	.word	0x20001244
 8008efc:	20001238 	.word	0x20001238
 8008f00:	20001248 	.word	0x20001248

08008f04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d048      	beq.n	8008fa8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f16:	2308      	movs	r3, #8
 8008f18:	425b      	negs	r3, r3
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	4b21      	ldr	r3, [pc, #132]	; (8008fb0 <vPortFree+0xac>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10a      	bne.n	8008f48 <vPortFree+0x44>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	60fb      	str	r3, [r7, #12]
}
 8008f44:	bf00      	nop
 8008f46:	e7fe      	b.n	8008f46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00a      	beq.n	8008f66 <vPortFree+0x62>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	60bb      	str	r3, [r7, #8]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	4b11      	ldr	r3, [pc, #68]	; (8008fb0 <vPortFree+0xac>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d019      	beq.n	8008fa8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d115      	bne.n	8008fa8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <vPortFree+0xac>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	43db      	mvns	r3, r3
 8008f86:	401a      	ands	r2, r3
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f8c:	f7fe ff1e 	bl	8007dcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	4b07      	ldr	r3, [pc, #28]	; (8008fb4 <vPortFree+0xb0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4413      	add	r3, r2
 8008f9a:	4a06      	ldr	r2, [pc, #24]	; (8008fb4 <vPortFree+0xb0>)
 8008f9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f9e:	6938      	ldr	r0, [r7, #16]
 8008fa0:	f000 f86c 	bl	800907c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008fa4:	f7fe ff20 	bl	8007de8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fa8:	bf00      	nop
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	2000124c 	.word	0x2000124c
 8008fb4:	20001244 	.word	0x20001244

08008fb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008fc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fc4:	4b27      	ldr	r3, [pc, #156]	; (8009064 <prvHeapInit+0xac>)
 8008fc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00c      	beq.n	8008fec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3307      	adds	r3, #7
 8008fd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0307 	bic.w	r3, r3, #7
 8008fde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	4a1f      	ldr	r2, [pc, #124]	; (8009064 <prvHeapInit+0xac>)
 8008fe8:	4413      	add	r3, r2
 8008fea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ff0:	4a1d      	ldr	r2, [pc, #116]	; (8009068 <prvHeapInit+0xb0>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ff6:	4b1c      	ldr	r3, [pc, #112]	; (8009068 <prvHeapInit+0xb0>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	4413      	add	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009004:	2208      	movs	r2, #8
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	1a9b      	subs	r3, r3, r2
 800900a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0307 	bic.w	r3, r3, #7
 8009012:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4a15      	ldr	r2, [pc, #84]	; (800906c <prvHeapInit+0xb4>)
 8009018:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800901a:	4b14      	ldr	r3, [pc, #80]	; (800906c <prvHeapInit+0xb4>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009022:	4b12      	ldr	r3, [pc, #72]	; (800906c <prvHeapInit+0xb4>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	1ad2      	subs	r2, r2, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009038:	4b0c      	ldr	r3, [pc, #48]	; (800906c <prvHeapInit+0xb4>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	4a0a      	ldr	r2, [pc, #40]	; (8009070 <prvHeapInit+0xb8>)
 8009046:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	4a09      	ldr	r2, [pc, #36]	; (8009074 <prvHeapInit+0xbc>)
 800904e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009050:	4b09      	ldr	r3, [pc, #36]	; (8009078 <prvHeapInit+0xc0>)
 8009052:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009056:	601a      	str	r2, [r3, #0]
}
 8009058:	bf00      	nop
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	bc80      	pop	{r7}
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	20000638 	.word	0x20000638
 8009068:	20001238 	.word	0x20001238
 800906c:	20001240 	.word	0x20001240
 8009070:	20001248 	.word	0x20001248
 8009074:	20001244 	.word	0x20001244
 8009078:	2000124c 	.word	0x2000124c

0800907c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009084:	4b27      	ldr	r3, [pc, #156]	; (8009124 <prvInsertBlockIntoFreeList+0xa8>)
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e002      	b.n	8009090 <prvInsertBlockIntoFreeList+0x14>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d8f7      	bhi.n	800908a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	4413      	add	r3, r2
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d108      	bne.n	80090be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	441a      	add	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	441a      	add	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d118      	bne.n	8009104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	4b14      	ldr	r3, [pc, #80]	; (8009128 <prvInsertBlockIntoFreeList+0xac>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d00d      	beq.n	80090fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	441a      	add	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	e008      	b.n	800910c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090fa:	4b0b      	ldr	r3, [pc, #44]	; (8009128 <prvInsertBlockIntoFreeList+0xac>)
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e003      	b.n	800910c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	429a      	cmp	r2, r3
 8009112:	d002      	beq.n	800911a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr
 8009124:	20001238 	.word	0x20001238
 8009128:	20001240 	.word	0x20001240

0800912c <atoi>:
 800912c:	220a      	movs	r2, #10
 800912e:	2100      	movs	r1, #0
 8009130:	f000 b8d6 	b.w	80092e0 <strtol>

08009134 <__errno>:
 8009134:	4b01      	ldr	r3, [pc, #4]	; (800913c <__errno+0x8>)
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20000010 	.word	0x20000010

08009140 <__libc_init_array>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	2600      	movs	r6, #0
 8009144:	4d0c      	ldr	r5, [pc, #48]	; (8009178 <__libc_init_array+0x38>)
 8009146:	4c0d      	ldr	r4, [pc, #52]	; (800917c <__libc_init_array+0x3c>)
 8009148:	1b64      	subs	r4, r4, r5
 800914a:	10a4      	asrs	r4, r4, #2
 800914c:	42a6      	cmp	r6, r4
 800914e:	d109      	bne.n	8009164 <__libc_init_array+0x24>
 8009150:	f000 f912 	bl	8009378 <_init>
 8009154:	2600      	movs	r6, #0
 8009156:	4d0a      	ldr	r5, [pc, #40]	; (8009180 <__libc_init_array+0x40>)
 8009158:	4c0a      	ldr	r4, [pc, #40]	; (8009184 <__libc_init_array+0x44>)
 800915a:	1b64      	subs	r4, r4, r5
 800915c:	10a4      	asrs	r4, r4, #2
 800915e:	42a6      	cmp	r6, r4
 8009160:	d105      	bne.n	800916e <__libc_init_array+0x2e>
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	f855 3b04 	ldr.w	r3, [r5], #4
 8009168:	4798      	blx	r3
 800916a:	3601      	adds	r6, #1
 800916c:	e7ee      	b.n	800914c <__libc_init_array+0xc>
 800916e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009172:	4798      	blx	r3
 8009174:	3601      	adds	r6, #1
 8009176:	e7f2      	b.n	800915e <__libc_init_array+0x1e>
 8009178:	0800966c 	.word	0x0800966c
 800917c:	0800966c 	.word	0x0800966c
 8009180:	0800966c 	.word	0x0800966c
 8009184:	08009670 	.word	0x08009670

08009188 <__itoa>:
 8009188:	1e93      	subs	r3, r2, #2
 800918a:	2b22      	cmp	r3, #34	; 0x22
 800918c:	b510      	push	{r4, lr}
 800918e:	460c      	mov	r4, r1
 8009190:	d904      	bls.n	800919c <__itoa+0x14>
 8009192:	2300      	movs	r3, #0
 8009194:	461c      	mov	r4, r3
 8009196:	700b      	strb	r3, [r1, #0]
 8009198:	4620      	mov	r0, r4
 800919a:	bd10      	pop	{r4, pc}
 800919c:	2a0a      	cmp	r2, #10
 800919e:	d109      	bne.n	80091b4 <__itoa+0x2c>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	da07      	bge.n	80091b4 <__itoa+0x2c>
 80091a4:	232d      	movs	r3, #45	; 0x2d
 80091a6:	700b      	strb	r3, [r1, #0]
 80091a8:	2101      	movs	r1, #1
 80091aa:	4240      	negs	r0, r0
 80091ac:	4421      	add	r1, r4
 80091ae:	f000 f8a1 	bl	80092f4 <__utoa>
 80091b2:	e7f1      	b.n	8009198 <__itoa+0x10>
 80091b4:	2100      	movs	r1, #0
 80091b6:	e7f9      	b.n	80091ac <__itoa+0x24>

080091b8 <itoa>:
 80091b8:	f7ff bfe6 	b.w	8009188 <__itoa>

080091bc <memcpy>:
 80091bc:	440a      	add	r2, r1
 80091be:	4291      	cmp	r1, r2
 80091c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80091c4:	d100      	bne.n	80091c8 <memcpy+0xc>
 80091c6:	4770      	bx	lr
 80091c8:	b510      	push	{r4, lr}
 80091ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ce:	4291      	cmp	r1, r2
 80091d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091d4:	d1f9      	bne.n	80091ca <memcpy+0xe>
 80091d6:	bd10      	pop	{r4, pc}

080091d8 <memset>:
 80091d8:	4603      	mov	r3, r0
 80091da:	4402      	add	r2, r0
 80091dc:	4293      	cmp	r3, r2
 80091de:	d100      	bne.n	80091e2 <memset+0xa>
 80091e0:	4770      	bx	lr
 80091e2:	f803 1b01 	strb.w	r1, [r3], #1
 80091e6:	e7f9      	b.n	80091dc <memset+0x4>

080091e8 <_strtol_l.constprop.0>:
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ee:	4680      	mov	r8, r0
 80091f0:	d001      	beq.n	80091f6 <_strtol_l.constprop.0+0xe>
 80091f2:	2b24      	cmp	r3, #36	; 0x24
 80091f4:	d906      	bls.n	8009204 <_strtol_l.constprop.0+0x1c>
 80091f6:	f7ff ff9d 	bl	8009134 <__errno>
 80091fa:	2316      	movs	r3, #22
 80091fc:	6003      	str	r3, [r0, #0]
 80091fe:	2000      	movs	r0, #0
 8009200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009204:	460d      	mov	r5, r1
 8009206:	4f35      	ldr	r7, [pc, #212]	; (80092dc <_strtol_l.constprop.0+0xf4>)
 8009208:	4628      	mov	r0, r5
 800920a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800920e:	5de6      	ldrb	r6, [r4, r7]
 8009210:	f016 0608 	ands.w	r6, r6, #8
 8009214:	d1f8      	bne.n	8009208 <_strtol_l.constprop.0+0x20>
 8009216:	2c2d      	cmp	r4, #45	; 0x2d
 8009218:	d12f      	bne.n	800927a <_strtol_l.constprop.0+0x92>
 800921a:	2601      	movs	r6, #1
 800921c:	782c      	ldrb	r4, [r5, #0]
 800921e:	1c85      	adds	r5, r0, #2
 8009220:	2b00      	cmp	r3, #0
 8009222:	d057      	beq.n	80092d4 <_strtol_l.constprop.0+0xec>
 8009224:	2b10      	cmp	r3, #16
 8009226:	d109      	bne.n	800923c <_strtol_l.constprop.0+0x54>
 8009228:	2c30      	cmp	r4, #48	; 0x30
 800922a:	d107      	bne.n	800923c <_strtol_l.constprop.0+0x54>
 800922c:	7828      	ldrb	r0, [r5, #0]
 800922e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009232:	2858      	cmp	r0, #88	; 0x58
 8009234:	d149      	bne.n	80092ca <_strtol_l.constprop.0+0xe2>
 8009236:	2310      	movs	r3, #16
 8009238:	786c      	ldrb	r4, [r5, #1]
 800923a:	3502      	adds	r5, #2
 800923c:	2700      	movs	r7, #0
 800923e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009242:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009246:	fbbe f9f3 	udiv	r9, lr, r3
 800924a:	4638      	mov	r0, r7
 800924c:	fb03 ea19 	mls	sl, r3, r9, lr
 8009250:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009254:	f1bc 0f09 	cmp.w	ip, #9
 8009258:	d814      	bhi.n	8009284 <_strtol_l.constprop.0+0x9c>
 800925a:	4664      	mov	r4, ip
 800925c:	42a3      	cmp	r3, r4
 800925e:	dd22      	ble.n	80092a6 <_strtol_l.constprop.0+0xbe>
 8009260:	2f00      	cmp	r7, #0
 8009262:	db1d      	blt.n	80092a0 <_strtol_l.constprop.0+0xb8>
 8009264:	4581      	cmp	r9, r0
 8009266:	d31b      	bcc.n	80092a0 <_strtol_l.constprop.0+0xb8>
 8009268:	d101      	bne.n	800926e <_strtol_l.constprop.0+0x86>
 800926a:	45a2      	cmp	sl, r4
 800926c:	db18      	blt.n	80092a0 <_strtol_l.constprop.0+0xb8>
 800926e:	2701      	movs	r7, #1
 8009270:	fb00 4003 	mla	r0, r0, r3, r4
 8009274:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009278:	e7ea      	b.n	8009250 <_strtol_l.constprop.0+0x68>
 800927a:	2c2b      	cmp	r4, #43	; 0x2b
 800927c:	bf04      	itt	eq
 800927e:	782c      	ldrbeq	r4, [r5, #0]
 8009280:	1c85      	addeq	r5, r0, #2
 8009282:	e7cd      	b.n	8009220 <_strtol_l.constprop.0+0x38>
 8009284:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009288:	f1bc 0f19 	cmp.w	ip, #25
 800928c:	d801      	bhi.n	8009292 <_strtol_l.constprop.0+0xaa>
 800928e:	3c37      	subs	r4, #55	; 0x37
 8009290:	e7e4      	b.n	800925c <_strtol_l.constprop.0+0x74>
 8009292:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009296:	f1bc 0f19 	cmp.w	ip, #25
 800929a:	d804      	bhi.n	80092a6 <_strtol_l.constprop.0+0xbe>
 800929c:	3c57      	subs	r4, #87	; 0x57
 800929e:	e7dd      	b.n	800925c <_strtol_l.constprop.0+0x74>
 80092a0:	f04f 37ff 	mov.w	r7, #4294967295
 80092a4:	e7e6      	b.n	8009274 <_strtol_l.constprop.0+0x8c>
 80092a6:	2f00      	cmp	r7, #0
 80092a8:	da07      	bge.n	80092ba <_strtol_l.constprop.0+0xd2>
 80092aa:	2322      	movs	r3, #34	; 0x22
 80092ac:	4670      	mov	r0, lr
 80092ae:	f8c8 3000 	str.w	r3, [r8]
 80092b2:	2a00      	cmp	r2, #0
 80092b4:	d0a4      	beq.n	8009200 <_strtol_l.constprop.0+0x18>
 80092b6:	1e69      	subs	r1, r5, #1
 80092b8:	e005      	b.n	80092c6 <_strtol_l.constprop.0+0xde>
 80092ba:	b106      	cbz	r6, 80092be <_strtol_l.constprop.0+0xd6>
 80092bc:	4240      	negs	r0, r0
 80092be:	2a00      	cmp	r2, #0
 80092c0:	d09e      	beq.n	8009200 <_strtol_l.constprop.0+0x18>
 80092c2:	2f00      	cmp	r7, #0
 80092c4:	d1f7      	bne.n	80092b6 <_strtol_l.constprop.0+0xce>
 80092c6:	6011      	str	r1, [r2, #0]
 80092c8:	e79a      	b.n	8009200 <_strtol_l.constprop.0+0x18>
 80092ca:	2430      	movs	r4, #48	; 0x30
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1b5      	bne.n	800923c <_strtol_l.constprop.0+0x54>
 80092d0:	2308      	movs	r3, #8
 80092d2:	e7b3      	b.n	800923c <_strtol_l.constprop.0+0x54>
 80092d4:	2c30      	cmp	r4, #48	; 0x30
 80092d6:	d0a9      	beq.n	800922c <_strtol_l.constprop.0+0x44>
 80092d8:	230a      	movs	r3, #10
 80092da:	e7af      	b.n	800923c <_strtol_l.constprop.0+0x54>
 80092dc:	0800956a 	.word	0x0800956a

080092e0 <strtol>:
 80092e0:	4613      	mov	r3, r2
 80092e2:	460a      	mov	r2, r1
 80092e4:	4601      	mov	r1, r0
 80092e6:	4802      	ldr	r0, [pc, #8]	; (80092f0 <strtol+0x10>)
 80092e8:	6800      	ldr	r0, [r0, #0]
 80092ea:	f7ff bf7d 	b.w	80091e8 <_strtol_l.constprop.0>
 80092ee:	bf00      	nop
 80092f0:	20000010 	.word	0x20000010

080092f4 <__utoa>:
 80092f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092f6:	b08b      	sub	sp, #44	; 0x2c
 80092f8:	4605      	mov	r5, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	466e      	mov	r6, sp
 80092fe:	4c1d      	ldr	r4, [pc, #116]	; (8009374 <__utoa+0x80>)
 8009300:	f104 0c20 	add.w	ip, r4, #32
 8009304:	4637      	mov	r7, r6
 8009306:	6820      	ldr	r0, [r4, #0]
 8009308:	6861      	ldr	r1, [r4, #4]
 800930a:	3408      	adds	r4, #8
 800930c:	c703      	stmia	r7!, {r0, r1}
 800930e:	4564      	cmp	r4, ip
 8009310:	463e      	mov	r6, r7
 8009312:	d1f7      	bne.n	8009304 <__utoa+0x10>
 8009314:	7921      	ldrb	r1, [r4, #4]
 8009316:	6820      	ldr	r0, [r4, #0]
 8009318:	7139      	strb	r1, [r7, #4]
 800931a:	1e91      	subs	r1, r2, #2
 800931c:	2922      	cmp	r1, #34	; 0x22
 800931e:	6038      	str	r0, [r7, #0]
 8009320:	f04f 0100 	mov.w	r1, #0
 8009324:	d904      	bls.n	8009330 <__utoa+0x3c>
 8009326:	7019      	strb	r1, [r3, #0]
 8009328:	460b      	mov	r3, r1
 800932a:	4618      	mov	r0, r3
 800932c:	b00b      	add	sp, #44	; 0x2c
 800932e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009330:	1e58      	subs	r0, r3, #1
 8009332:	4684      	mov	ip, r0
 8009334:	fbb5 f7f2 	udiv	r7, r5, r2
 8009338:	fb02 5617 	mls	r6, r2, r7, r5
 800933c:	3628      	adds	r6, #40	; 0x28
 800933e:	446e      	add	r6, sp
 8009340:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009344:	460c      	mov	r4, r1
 8009346:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800934a:	462e      	mov	r6, r5
 800934c:	42b2      	cmp	r2, r6
 800934e:	463d      	mov	r5, r7
 8009350:	f101 0101 	add.w	r1, r1, #1
 8009354:	d9ee      	bls.n	8009334 <__utoa+0x40>
 8009356:	2200      	movs	r2, #0
 8009358:	545a      	strb	r2, [r3, r1]
 800935a:	1919      	adds	r1, r3, r4
 800935c:	1aa5      	subs	r5, r4, r2
 800935e:	42aa      	cmp	r2, r5
 8009360:	dae3      	bge.n	800932a <__utoa+0x36>
 8009362:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009366:	780e      	ldrb	r6, [r1, #0]
 8009368:	3201      	adds	r2, #1
 800936a:	7006      	strb	r6, [r0, #0]
 800936c:	f801 5901 	strb.w	r5, [r1], #-1
 8009370:	e7f4      	b.n	800935c <__utoa+0x68>
 8009372:	bf00      	nop
 8009374:	08009544 	.word	0x08009544

08009378 <_init>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr

08009384 <_fini>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr
