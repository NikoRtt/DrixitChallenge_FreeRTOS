
DrixitChallenge_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009030  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08009140  08009140  00019140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d0  080093d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080093d0  080093d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093d0  080093d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d0  080093d0  000193d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080093d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011dc  20000074  0800944c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001250  0800944c  00021250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001827a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bc  00000000  00000000  00038317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0003bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  0003d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b04d  00000000  00000000  0003e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1c0  00000000  00000000  00059935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989fe  00000000  00000000  00073af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c4f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006750  00000000  00000000  0010c544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08009128 	.word	0x08009128

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08009128 	.word	0x08009128

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_d2f>:
 8000630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000638:	bf24      	itt	cs
 800063a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800063e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000642:	d90d      	bls.n	8000660 <__aeabi_d2f+0x30>
 8000644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800064c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000658:	bf08      	it	eq
 800065a:	f020 0001 	biceq.w	r0, r0, #1
 800065e:	4770      	bx	lr
 8000660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000664:	d121      	bne.n	80006aa <__aeabi_d2f+0x7a>
 8000666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800066a:	bfbc      	itt	lt
 800066c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000670:	4770      	bxlt	lr
 8000672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000676:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800067a:	f1c2 0218 	rsb	r2, r2, #24
 800067e:	f1c2 0c20 	rsb	ip, r2, #32
 8000682:	fa10 f30c 	lsls.w	r3, r0, ip
 8000686:	fa20 f002 	lsr.w	r0, r0, r2
 800068a:	bf18      	it	ne
 800068c:	f040 0001 	orrne.w	r0, r0, #1
 8000690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000698:	fa03 fc0c 	lsl.w	ip, r3, ip
 800069c:	ea40 000c 	orr.w	r0, r0, ip
 80006a0:	fa23 f302 	lsr.w	r3, r3, r2
 80006a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a8:	e7cc      	b.n	8000644 <__aeabi_d2f+0x14>
 80006aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006ae:	d107      	bne.n	80006c0 <__aeabi_d2f+0x90>
 80006b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006b4:	bf1e      	ittt	ne
 80006b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006be:	4770      	bxne	lr
 80006c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <__aeabi_frsub>:
 80006d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006d4:	e002      	b.n	80006dc <__addsf3>
 80006d6:	bf00      	nop

080006d8 <__aeabi_fsub>:
 80006d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006dc <__addsf3>:
 80006dc:	0042      	lsls	r2, r0, #1
 80006de:	bf1f      	itttt	ne
 80006e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006e4:	ea92 0f03 	teqne	r2, r3
 80006e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f0:	d06a      	beq.n	80007c8 <__addsf3+0xec>
 80006f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006fa:	bfc1      	itttt	gt
 80006fc:	18d2      	addgt	r2, r2, r3
 80006fe:	4041      	eorgt	r1, r0
 8000700:	4048      	eorgt	r0, r1
 8000702:	4041      	eorgt	r1, r0
 8000704:	bfb8      	it	lt
 8000706:	425b      	neglt	r3, r3
 8000708:	2b19      	cmp	r3, #25
 800070a:	bf88      	it	hi
 800070c:	4770      	bxhi	lr
 800070e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000712:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000716:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800071a:	bf18      	it	ne
 800071c:	4240      	negne	r0, r0
 800071e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000722:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000726:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800072a:	bf18      	it	ne
 800072c:	4249      	negne	r1, r1
 800072e:	ea92 0f03 	teq	r2, r3
 8000732:	d03f      	beq.n	80007b4 <__addsf3+0xd8>
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	fa41 fc03 	asr.w	ip, r1, r3
 800073c:	eb10 000c 	adds.w	r0, r0, ip
 8000740:	f1c3 0320 	rsb	r3, r3, #32
 8000744:	fa01 f103 	lsl.w	r1, r1, r3
 8000748:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800074c:	d502      	bpl.n	8000754 <__addsf3+0x78>
 800074e:	4249      	negs	r1, r1
 8000750:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000754:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000758:	d313      	bcc.n	8000782 <__addsf3+0xa6>
 800075a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075e:	d306      	bcc.n	800076e <__addsf3+0x92>
 8000760:	0840      	lsrs	r0, r0, #1
 8000762:	ea4f 0131 	mov.w	r1, r1, rrx
 8000766:	f102 0201 	add.w	r2, r2, #1
 800076a:	2afe      	cmp	r2, #254	; 0xfe
 800076c:	d251      	bcs.n	8000812 <__addsf3+0x136>
 800076e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000772:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000776:	bf08      	it	eq
 8000778:	f020 0001 	biceq.w	r0, r0, #1
 800077c:	ea40 0003 	orr.w	r0, r0, r3
 8000780:	4770      	bx	lr
 8000782:	0049      	lsls	r1, r1, #1
 8000784:	eb40 0000 	adc.w	r0, r0, r0
 8000788:	3a01      	subs	r2, #1
 800078a:	bf28      	it	cs
 800078c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000790:	d2ed      	bcs.n	800076e <__addsf3+0x92>
 8000792:	fab0 fc80 	clz	ip, r0
 8000796:	f1ac 0c08 	sub.w	ip, ip, #8
 800079a:	ebb2 020c 	subs.w	r2, r2, ip
 800079e:	fa00 f00c 	lsl.w	r0, r0, ip
 80007a2:	bfaa      	itet	ge
 80007a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007a8:	4252      	neglt	r2, r2
 80007aa:	4318      	orrge	r0, r3
 80007ac:	bfbc      	itt	lt
 80007ae:	40d0      	lsrlt	r0, r2
 80007b0:	4318      	orrlt	r0, r3
 80007b2:	4770      	bx	lr
 80007b4:	f092 0f00 	teq	r2, #0
 80007b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007bc:	bf06      	itte	eq
 80007be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007c2:	3201      	addeq	r2, #1
 80007c4:	3b01      	subne	r3, #1
 80007c6:	e7b5      	b.n	8000734 <__addsf3+0x58>
 80007c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007d0:	bf18      	it	ne
 80007d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007d6:	d021      	beq.n	800081c <__addsf3+0x140>
 80007d8:	ea92 0f03 	teq	r2, r3
 80007dc:	d004      	beq.n	80007e8 <__addsf3+0x10c>
 80007de:	f092 0f00 	teq	r2, #0
 80007e2:	bf08      	it	eq
 80007e4:	4608      	moveq	r0, r1
 80007e6:	4770      	bx	lr
 80007e8:	ea90 0f01 	teq	r0, r1
 80007ec:	bf1c      	itt	ne
 80007ee:	2000      	movne	r0, #0
 80007f0:	4770      	bxne	lr
 80007f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007f6:	d104      	bne.n	8000802 <__addsf3+0x126>
 80007f8:	0040      	lsls	r0, r0, #1
 80007fa:	bf28      	it	cs
 80007fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000800:	4770      	bx	lr
 8000802:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000806:	bf3c      	itt	cc
 8000808:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800080c:	4770      	bxcc	lr
 800080e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000812:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000816:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081a:	4770      	bx	lr
 800081c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000820:	bf16      	itet	ne
 8000822:	4608      	movne	r0, r1
 8000824:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000828:	4601      	movne	r1, r0
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	bf06      	itte	eq
 800082e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000832:	ea90 0f01 	teqeq	r0, r1
 8000836:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800083a:	4770      	bx	lr

0800083c <__aeabi_ui2f>:
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	e004      	b.n	800084c <__aeabi_i2f+0x8>
 8000842:	bf00      	nop

08000844 <__aeabi_i2f>:
 8000844:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000848:	bf48      	it	mi
 800084a:	4240      	negmi	r0, r0
 800084c:	ea5f 0c00 	movs.w	ip, r0
 8000850:	bf08      	it	eq
 8000852:	4770      	bxeq	lr
 8000854:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000858:	4601      	mov	r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	e01c      	b.n	800089a <__aeabi_l2f+0x2a>

08000860 <__aeabi_ul2f>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e00a      	b.n	8000884 <__aeabi_l2f+0x14>
 800086e:	bf00      	nop

08000870 <__aeabi_l2f>:
 8000870:	ea50 0201 	orrs.w	r2, r0, r1
 8000874:	bf08      	it	eq
 8000876:	4770      	bxeq	lr
 8000878:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800087c:	d502      	bpl.n	8000884 <__aeabi_l2f+0x14>
 800087e:	4240      	negs	r0, r0
 8000880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000884:	ea5f 0c01 	movs.w	ip, r1
 8000888:	bf02      	ittt	eq
 800088a:	4684      	moveq	ip, r0
 800088c:	4601      	moveq	r1, r0
 800088e:	2000      	moveq	r0, #0
 8000890:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000894:	bf08      	it	eq
 8000896:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800089a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800089e:	fabc f28c 	clz	r2, ip
 80008a2:	3a08      	subs	r2, #8
 80008a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008a8:	db10      	blt.n	80008cc <__aeabi_l2f+0x5c>
 80008aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80008ae:	4463      	add	r3, ip
 80008b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80008b4:	f1c2 0220 	rsb	r2, r2, #32
 80008b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008bc:	fa20 f202 	lsr.w	r2, r0, r2
 80008c0:	eb43 0002 	adc.w	r0, r3, r2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f102 0220 	add.w	r2, r2, #32
 80008d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80008d4:	f1c2 0220 	rsb	r2, r2, #32
 80008d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008dc:	fa21 f202 	lsr.w	r2, r1, r2
 80008e0:	eb43 0002 	adc.w	r0, r3, r2
 80008e4:	bf08      	it	eq
 80008e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008ea:	4770      	bx	lr

080008ec <__gesf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpsf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__lesf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpsf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpsf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000908:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800090c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000910:	bf18      	it	ne
 8000912:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000916:	d011      	beq.n	800093c <__cmpsf2+0x40>
 8000918:	b001      	add	sp, #4
 800091a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800091e:	bf18      	it	ne
 8000920:	ea90 0f01 	teqne	r0, r1
 8000924:	bf58      	it	pl
 8000926:	ebb2 0003 	subspl.w	r0, r2, r3
 800092a:	bf88      	it	hi
 800092c:	17c8      	asrhi	r0, r1, #31
 800092e:	bf38      	it	cc
 8000930:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000934:	bf18      	it	ne
 8000936:	f040 0001 	orrne.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000940:	d102      	bne.n	8000948 <__cmpsf2+0x4c>
 8000942:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000946:	d105      	bne.n	8000954 <__cmpsf2+0x58>
 8000948:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800094c:	d1e4      	bne.n	8000918 <__cmpsf2+0x1c>
 800094e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000952:	d0e1      	beq.n	8000918 <__cmpsf2+0x1c>
 8000954:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_cfrcmple>:
 800095c:	4684      	mov	ip, r0
 800095e:	4608      	mov	r0, r1
 8000960:	4661      	mov	r1, ip
 8000962:	e7ff      	b.n	8000964 <__aeabi_cfcmpeq>

08000964 <__aeabi_cfcmpeq>:
 8000964:	b50f      	push	{r0, r1, r2, r3, lr}
 8000966:	f7ff ffc9 	bl	80008fc <__cmpsf2>
 800096a:	2800      	cmp	r0, #0
 800096c:	bf48      	it	mi
 800096e:	f110 0f00 	cmnmi.w	r0, #0
 8000972:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000974 <__aeabi_fcmpeq>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff fff4 	bl	8000964 <__aeabi_cfcmpeq>
 800097c:	bf0c      	ite	eq
 800097e:	2001      	moveq	r0, #1
 8000980:	2000      	movne	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_fcmplt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffea 	bl	8000964 <__aeabi_cfcmpeq>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_fcmple>:
 800099c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a0:	f7ff ffe0 	bl	8000964 <__aeabi_cfcmpeq>
 80009a4:	bf94      	ite	ls
 80009a6:	2001      	movls	r0, #1
 80009a8:	2000      	movhi	r0, #0
 80009aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ae:	bf00      	nop

080009b0 <__aeabi_fcmpge>:
 80009b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b4:	f7ff ffd2 	bl	800095c <__aeabi_cfrcmple>
 80009b8:	bf94      	ite	ls
 80009ba:	2001      	movls	r0, #1
 80009bc:	2000      	movhi	r0, #0
 80009be:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c2:	bf00      	nop

080009c4 <__aeabi_fcmpgt>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff ffc8 	bl	800095c <__aeabi_cfrcmple>
 80009cc:	bf34      	ite	cc
 80009ce:	2001      	movcc	r0, #1
 80009d0:	2000      	movcs	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_f2iz>:
 80009d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009e0:	d30f      	bcc.n	8000a02 <__aeabi_f2iz+0x2a>
 80009e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ea:	d90d      	bls.n	8000a08 <__aeabi_f2iz+0x30>
 80009ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f8:	fa23 f002 	lsr.w	r0, r3, r2
 80009fc:	bf18      	it	ne
 80009fe:	4240      	negne	r0, r0
 8000a00:	4770      	bx	lr
 8000a02:	f04f 0000 	mov.w	r0, #0
 8000a06:	4770      	bx	lr
 8000a08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a0c:	d101      	bne.n	8000a12 <__aeabi_f2iz+0x3a>
 8000a0e:	0242      	lsls	r2, r0, #9
 8000a10:	d105      	bne.n	8000a1e <__aeabi_f2iz+0x46>
 8000a12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	bf08      	it	eq
 8000a18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0000 	mov.w	r0, #0
 8000a22:	4770      	bx	lr

08000a24 <lis3mdl_Init>:

/*==================[internal functions definition]==========================*/

/*==================[Initialization functions definition]====================*/

uint8_t lis3mdl_Init ( LIS3MDL_Data_t* dev, I2C_HandleTypeDef *i2cHandle ){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]

	// Set the struct parameters first

	dev->i2cHandle = i2cHandle;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	601a      	str	r2, [r3, #0]
	dev->mag_x = 0.0f;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
	dev->mag_y = 0.0f;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f04f 0200 	mov.w	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
	dev->mag_z = 0.0f;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f04f 0200 	mov.w	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
	dev->temp = 0.0f;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]

	// Variable to accumulate errors to determine how many transaction errors we have.

	uint8_t accumulatedErrors = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]
	uint8_t regValue;
	HAL_StatusTypeDef status;

	// Checking the device ID

	status = lis3mdl_ReadRegister(dev, LIS3MDL_REG_WHO_AM_I, &regValue);
 8000a58:	f107 030d 	add.w	r3, r7, #13
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	210f      	movs	r1, #15
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f94c 	bl	8000cfe <lis3mdl_ReadRegister>
 8000a66:	4603      	mov	r3, r0
 8000a68:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf14      	ite	ne
 8000a70:	2301      	movne	r3, #1
 8000a72:	2300      	moveq	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	73fb      	strb	r3, [r7, #15]

    if (regValue != LIS3MDL_DEVICE_ID) {
 8000a7e:	7b7b      	ldrb	r3, [r7, #13]
 8000a80:	2b3d      	cmp	r3, #61	; 0x3d
 8000a82:	d001      	beq.n	8000a88 <lis3mdl_Init+0x64>

    	return FAIL;
 8000a84:	23ff      	movs	r3, #255	; 0xff
 8000a86:	e057      	b.n	8000b38 <lis3mdl_Init+0x114>
		3. Write 0Ch in CTRL_REG4. Sets UHP mode on the Z-axis.
		4. Write 00h in CTRL_REG3. Sets continuous-measurement mode. */

    // FS = +/-12G

    regValue = dev->scale << 5;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7e1b      	ldrb	r3, [r3, #24]
 8000a8c:	015b      	lsls	r3, r3, #5
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_2, &regValue);
 8000a92:	f107 030d 	add.w	r3, r7, #13
 8000a96:	461a      	mov	r2, r3
 8000a98:	2121      	movs	r1, #33	; 0x21
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f94a 	bl	8000d34 <lis3mdl_WriteRegister>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	73fb      	strb	r3, [r7, #15]

    // Ultra-High performance in X and Y axes, ODR at 80Hz and temperature enable.

    regValue = LIS3MDL_REG_CTL_1_TEMP_EN | (LIS3MDL_PERFORMANCE_ULTRA_HIGH << 5) | (LIS3MDL_DATA_RATE_80_HZ << 2);
 8000ab8:	23fc      	movs	r3, #252	; 0xfc
 8000aba:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_1, &regValue);
 8000abc:	f107 030d 	add.w	r3, r7, #13
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f935 	bl	8000d34 <lis3mdl_WriteRegister>
 8000aca:	4603      	mov	r3, r0
 8000acc:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bf14      	ite	ne
 8000ad4:	2301      	movne	r3, #1
 8000ad6:	2300      	moveq	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4413      	add	r3, r2
 8000ae0:	73fb      	strb	r3, [r7, #15]

    // Ultra-High performance in Z axe.

    regValue = 0x00 | (LIS3MDL_PERFORMANCE_ULTRA_HIGH << 2);
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_4, &regValue);
 8000ae6:	f107 030d 	add.w	r3, r7, #13
 8000aea:	461a      	mov	r2, r3
 8000aec:	2123      	movs	r1, #35	; 0x23
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f920 	bl	8000d34 <lis3mdl_WriteRegister>
 8000af4:	4603      	mov	r3, r0
 8000af6:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000af8:	7bbb      	ldrb	r3, [r7, #14]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	4413      	add	r3, r2
 8000b0a:	73fb      	strb	r3, [r7, #15]

    // Sets continuous-measurement mode.

    regValue = 0x00 | LIS3MDL_MODE_CONTINUOUS_MEASUREMENT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_3, &regValue);
 8000b10:	f107 030d 	add.w	r3, r7, #13
 8000b14:	461a      	mov	r2, r3
 8000b16:	2122      	movs	r1, #34	; 0x22
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f90b 	bl	8000d34 <lis3mdl_WriteRegister>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	4413      	add	r3, r2
 8000b34:	73fb      	strb	r3, [r7, #15]

    return accumulatedErrors;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <lis3mdl_DataReady>:

/*==================[Measurement functions definition]=======================*/

HAL_StatusTypeDef lis3mdl_DataReady ( LIS3MDL_Data_t* dev ){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint8_t regValue;
	HAL_StatusTypeDef status;

	// First we have to know if there is any data ready to read

	status = lis3mdl_ReadRegister(dev, LIS3MDL_REG_STATUS, &regValue);
 8000b48:	f107 030e 	add.w	r3, r7, #14
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	2127      	movs	r1, #39	; 0x27
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f8d4 	bl	8000cfe <lis3mdl_ReadRegister>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73fb      	strb	r3, [r7, #15]

	if(status == HAL_OK){
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <lis3mdl_DataReady+0x24>

		if(!(((regValue & LIS3MDL_STATUS_ZYXDA) >> 3) && ((status & LIS3MDL_STATUS_ZYXOR) >> 7))){

			status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <lis3mdl_ReadMagnetometer>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_ReadMagnetometer ( LIS3MDL_Data_t* dev ){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	uint8_t regValue[6];
	HAL_StatusTypeDef status;

	// Reading the axes registers

	status = lis3mdl_ReadRegisters(dev, LIS3MDL_REG_OUT_TEMP_L, regValue, 6);
 8000b78:	f107 020c 	add.w	r2, r7, #12
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	212e      	movs	r1, #46	; 0x2e
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f8f2 	bl	8000d6a <lis3mdl_ReadRegisters>
 8000b86:	4603      	mov	r3, r0
 8000b88:	74fb      	strb	r3, [r7, #19]

	if(status == HAL_OK){
 8000b8a:	7cfb      	ldrb	r3, [r7, #19]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d154      	bne.n	8000c3a <lis3mdl_ReadMagnetometer+0xca>

		float sensitivity;

		switch(dev->scale){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7e1b      	ldrb	r3, [r3, #24]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d817      	bhi.n	8000bc8 <lis3mdl_ReadMagnetometer+0x58>
 8000b98:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <lis3mdl_ReadMagnetometer+0x30>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bb1 	.word	0x08000bb1
 8000ba4:	08000bb7 	.word	0x08000bb7
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000bc3 	.word	0x08000bc3

			case LIS3MDL_SCALE_4_GAUSS:

				sensitivity = 1.0/6842;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <lis3mdl_ReadMagnetometer+0xd4>)
 8000bb2:	617b      	str	r3, [r7, #20]

				break;
 8000bb4:	e008      	b.n	8000bc8 <lis3mdl_ReadMagnetometer+0x58>

			case LIS3MDL_SCALE_8_GAUSS:

				sensitivity = 1.0/3421;
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <lis3mdl_ReadMagnetometer+0xd8>)
 8000bb8:	617b      	str	r3, [r7, #20]

				break;
 8000bba:	e005      	b.n	8000bc8 <lis3mdl_ReadMagnetometer+0x58>

			case LIS3MDL_SCALE_12_GAUSS:

				sensitivity = 1.0/2281;
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <lis3mdl_ReadMagnetometer+0xdc>)
 8000bbe:	617b      	str	r3, [r7, #20]

				break;
 8000bc0:	e002      	b.n	8000bc8 <lis3mdl_ReadMagnetometer+0x58>

			case LIS3MDL_SCALE_16_GAUSS:

				sensitivity = 1.0/1711;
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <lis3mdl_ReadMagnetometer+0xe0>)
 8000bc4:	617b      	str	r3, [r7, #20]

				break;
 8000bc6:	bf00      	nop
		}

		dev->mag_x = ((int16_t)((regValue[1] << 8) | regValue[0])) * sensitivity;
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	7b3b      	ldrb	r3, [r7, #12]
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe34 	bl	8000844 <__aeabi_i2f>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	6979      	ldr	r1, [r7, #20]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fab5 	bl	8000150 <__aeabi_fmul>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	609a      	str	r2, [r3, #8]

		dev->mag_y = ((int16_t)((regValue[3] << 8) | regValue[2])) * sensitivity;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe21 	bl	8000844 <__aeabi_i2f>
 8000c02:	4603      	mov	r3, r0
 8000c04:	6979      	ldr	r1, [r7, #20]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff faa2 	bl	8000150 <__aeabi_fmul>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60da      	str	r2, [r3, #12]

		dev->mag_z = ((int16_t)((regValue[5] << 8) | regValue[4])) * sensitivity;
 8000c14:	7c7b      	ldrb	r3, [r7, #17]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	7c3b      	ldrb	r3, [r7, #16]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe0e 	bl	8000844 <__aeabi_i2f>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	6979      	ldr	r1, [r7, #20]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fa8f 	bl	8000150 <__aeabi_fmul>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	611a      	str	r2, [r3, #16]
	}

	return status;
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	3919417a 	.word	0x3919417a
 8000c48:	3999417a 	.word	0x3999417a
 8000c4c:	39e5d99e 	.word	0x39e5d99e
 8000c50:	3a193603 	.word	0x3a193603

08000c54 <lis3mdl_ReadTemperature>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_ReadTemperature ( LIS3MDL_Data_t* dev ){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	uint8_t regValue[2];
	HAL_StatusTypeDef status;

	// Reading the temperature registers

	status = lis3mdl_ReadRegisters(dev, LIS3MDL_REG_OUT_TEMP_L, regValue, 2);
 8000c5c:	f107 020c 	add.w	r2, r7, #12
 8000c60:	2302      	movs	r3, #2
 8000c62:	212e      	movs	r1, #46	; 0x2e
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f880 	bl	8000d6a <lis3mdl_ReadRegisters>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]

	if(status == HAL_OK){
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d119      	bne.n	8000ca8 <lis3mdl_ReadTemperature+0x54>

		// From the datasheet, the nominal sensitivity is 8 LSB/°C (>>3) and 0 output means T=25 °C

		dev->temp = (((int16_t)((regValue[1] << 8) | regValue[0])) >> 3) + 25.0;
 8000c74:	7b7b      	ldrb	r3, [r7, #13]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	7b3b      	ldrb	r3, [r7, #12]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	10db      	asrs	r3, r3, #3
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc68 	bl	800055c <__aeabi_i2d>
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <lis3mdl_ReadTemperature+0x60>)
 8000c92:	f7ff fb17 	bl	80002c4 <__adddf3>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f7ff fcc7 	bl	8000630 <__aeabi_d2f>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	615a      	str	r2, [r3, #20]

	}

	return status;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40390000 	.word	0x40390000

08000cb8 <lis3mdl_ConvertToStoreData>:


/*************************************************************/

LIS3MDL_StoreData_t lis3mdl_ConvertToStoreData ( LIS3MDL_Data_t* dev ){
 8000cb8:	b4b0      	push	{r4, r5, r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]

	LIS3MDL_StoreData_t newData;

	newData.mag_x = dev->mag_x;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	60fb      	str	r3, [r7, #12]

	newData.mag_y = dev->mag_y;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	613b      	str	r3, [r7, #16]

	newData.mag_z = dev->mag_z;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	617b      	str	r3, [r7, #20]

	newData.temp = dev->temp;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	61bb      	str	r3, [r7, #24]

	newData.uid = dev->uid;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	889b      	ldrh	r3, [r3, #4]
 8000cde:	813b      	strh	r3, [r7, #8]

	return newData;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f107 0408 	add.w	r4, r7, #8
 8000ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cf0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	3724      	adds	r7, #36	; 0x24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bcb0      	pop	{r4, r5, r7}
 8000cfc:	4770      	bx	lr

08000cfe <lis3mdl_ReadRegister>:

/*==================[low level functions definition]=========================*/

HAL_StatusTypeDef lis3mdl_ReadRegister( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value ){
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b088      	sub	sp, #32
 8000d02:	af04      	add	r7, sp, #16
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	460b      	mov	r3, r1
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, 1, HAL_MAX_DELAY);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	213c      	movs	r1, #60	; 0x3c
 8000d26:	f002 fc95 	bl	8003654 <HAL_I2C_Mem_Read>
 8000d2a:	4603      	mov	r3, r0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <lis3mdl_WriteRegister>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_WriteRegister( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value ){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af04      	add	r7, sp, #16
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, 1, HAL_MAX_DELAY);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	7afb      	ldrb	r3, [r7, #11]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	2301      	movs	r3, #1
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	213c      	movs	r1, #60	; 0x3c
 8000d5c:	f002 fb80 	bl	8003460 <HAL_I2C_Mem_Write>
 8000d60:	4603      	mov	r3, r0

}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <lis3mdl_ReadRegisters>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_ReadRegisters( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value, uint8_t lenght ){
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b088      	sub	sp, #32
 8000d6e:	af04      	add	r7, sp, #16
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	461a      	mov	r2, r3
 8000d76:	460b      	mov	r3, r1
 8000d78:	72fb      	strb	r3, [r7, #11]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, lenght, HAL_MAX_DELAY);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6818      	ldr	r0, [r3, #0]
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	7abb      	ldrb	r3, [r7, #10]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	9102      	str	r1, [sp, #8]
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	213c      	movs	r1, #60	; 0x3c
 8000d9a:	f002 fc5b 	bl	8003654 <HAL_I2C_Mem_Read>
 8000d9e:	4603      	mov	r3, r0

}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <StoreUSARTData>:

static uint8_t BufferUsart1[UART_MAX_RECEIVE_DATA], Escritura_BufferUsart1 = 0, Lectura_BufferUsart1 = 0;

/*==================[internal functions definition]==========================*/

bool_t StoreUSARTData(uint8_t* data, uint16_t size){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]

	bool_t retVal = FALSE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

	uint8_t auxSize = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73bb      	strb	r3, [r7, #14]

	if((Escritura_BufferUsart1 + size) >= UART_MAX_RECEIVE_DATA){
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <StoreUSARTData+0xc4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	2b18      	cmp	r3, #24
 8000dc8:	dd29      	ble.n	8000e1e <StoreUSARTData+0x76>

		auxSize = (Escritura_BufferUsart1 + size) - UART_MAX_RECEIVE_DATA;
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <StoreUSARTData+0xc4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	3b19      	subs	r3, #25
 8000dd8:	73bb      	strb	r3, [r7, #14]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, (size - auxSize));
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <StoreUSARTData+0xc4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <StoreUSARTData+0xc8>)
 8000de2:	18d0      	adds	r0, r2, r3
 8000de4:	887a      	ldrh	r2, [r7, #2]
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	f008 f8bd 	bl	8008f6c <memcpy>

		Escritura_BufferUsart1 = 0;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <StoreUSARTData+0xc4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), (data + (size - auxSize)), auxSize);
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <StoreUSARTData+0xc4>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <StoreUSARTData+0xc8>)
 8000e00:	18d0      	adds	r0, r2, r3
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	7bba      	ldrb	r2, [r7, #14]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f008 f8ab 	bl	8008f6c <memcpy>

		Escritura_BufferUsart1 = auxSize;
 8000e16:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	7013      	strb	r3, [r2, #0]
 8000e1c:	e011      	b.n	8000e42 <StoreUSARTData+0x9a>
	}

	else {

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, size);
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <StoreUSARTData+0xc8>)
 8000e26:	4413      	add	r3, r2
 8000e28:	887a      	ldrh	r2, [r7, #2]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f008 f89d 	bl	8008f6c <memcpy>

		Escritura_BufferUsart1 = Escritura_BufferUsart1 + size;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e40:	701a      	strb	r2, [r3, #0]
	}

	if(BufferUsart1[Escritura_BufferUsart1 - 1] == '\r' || BufferUsart1[Escritura_BufferUsart1 - 1] == '\n'){
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <StoreUSARTData+0xc8>)
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	2b0d      	cmp	r3, #13
 8000e4e:	d006      	beq.n	8000e5e <StoreUSARTData+0xb6>
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <StoreUSARTData+0xc4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <StoreUSARTData+0xc8>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d101      	bne.n	8000e62 <StoreUSARTData+0xba>

		retVal = TRUE;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
	}

	return retVal;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000a9 	.word	0x200000a9
 8000e70:	20000090 	.word	0x20000090

08000e74 <DecodeReceivedData>:

/*************************************************************/

bool_t DecodeReceivedData( uint16_t* NumberReceived ){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

	bool_t retVal = FALSE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t j = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	char DatosRecibidos[UART_MAX_RECEIVE_DATA];

	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 8000e88:	e03f      	b.n	8000f0a <DecodeReceivedData+0x96>

		// I remove the characters that are not information
		// If it is any of these characters, nothing is done.
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000e92:	5c9b      	ldrb	r3, [r3, r2]
 8000e94:	2b0d      	cmp	r3, #13
 8000e96:	d02b      	beq.n	8000ef0 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 8000e98:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000ea0:	5c9b      	ldrb	r3, [r3, r2]
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d024      	beq.n	8000ef0 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000eae:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d01d      	beq.n	8000ef0 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000ebc:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 8000ebe:	2b20      	cmp	r3, #32
 8000ec0:	d016      	beq.n	8000ef0 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == 0xff){}
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 8000ecc:	2bff      	cmp	r3, #255	; 0xff
 8000ece:	d00f      	beq.n	8000ef0 <DecodeReceivedData+0x7c>

		else {

			*(DatosRecibidos + j) = BufferUsart1[Lectura_BufferUsart1];
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eda:	f107 020c 	add.w	r2, r7, #12
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <DecodeReceivedData+0xe0>)
 8000ee2:	5c52      	ldrb	r2, [r2, r1]
 8000ee4:	701a      	strb	r2, [r3, #0]

			j++;
 8000ee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eea:	3301      	adds	r3, #1
 8000eec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		Lectura_BufferUsart1++;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000efa:	701a      	strb	r2, [r3, #0]

		if(Lectura_BufferUsart1 >= UART_MAX_RECEIVE_DATA){
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b18      	cmp	r3, #24
 8000f02:	d902      	bls.n	8000f0a <DecodeReceivedData+0x96>

			Lectura_BufferUsart1 = 0;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <DecodeReceivedData+0xdc>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <DecodeReceivedData+0xe4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d1b9      	bne.n	8000e8a <DecodeReceivedData+0x16>
		}
	}

	*(DatosRecibidos + j) = '\0';
 8000f16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f1a:	f107 020c 	add.w	r2, r7, #12
 8000f1e:	4413      	add	r3, r2
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]

	*NumberReceived = atoi(DatosRecibidos);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 ffd7 	bl	8008edc <atoi>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	801a      	strh	r2, [r3, #0]

	if(*NumberReceived != 0){
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <DecodeReceivedData+0xd0>

		retVal = TRUE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return retVal; //si no recibi nada valido, vuelve por FALSE
 8000f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000aa 	.word	0x200000aa
 8000f54:	20000090 	.word	0x20000090
 8000f58:	200000a9 	.word	0x200000a9

08000f5c <PrintString>:

/*************************************************************/

void PrintString( UART_HandleTypeDef printer, char* string, uint16_t size ){
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	f107 0c08 	add.w	ip, r7, #8
 8000f66:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_UART_Transmit( &printer, (uint8_t*)string, size, HAL_MAX_DELAY );
 8000f6a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f74:	f107 0008 	add.w	r0, r7, #8
 8000f78:	f004 fd7b 	bl	8005a72 <HAL_UART_Transmit>
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr

08000f88 <PrintEnter>:

/*************************************************************/

void PrintEnter( UART_HandleTypeDef printer ){
 8000f88:	b084      	sub	sp, #16
 8000f8a:	b5b0      	push	{r4, r5, r7, lr}
 8000f8c:	b090      	sub	sp, #64	; 0x40
 8000f8e:	af10      	add	r7, sp, #64	; 0x40
 8000f90:	f107 0410 	add.w	r4, r7, #16
 8000f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    PrintString( printer, PRINT_ENTER_STRING, sizeof(PRINT_ENTER_STRING) );
 8000f98:	2303      	movs	r3, #3
 8000f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <PrintEnter+0x44>)
 8000f9e:	930d      	str	r3, [sp, #52]	; 0x34
 8000fa0:	466d      	mov	r5, sp
 8000fa2:	f107 0420 	add.w	r4, r7, #32
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbc:	f7ff ffce 	bl	8000f5c <PrintString>
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fc8:	b004      	add	sp, #16
 8000fca:	4770      	bx	lr
 8000fcc:	08009140 	.word	0x08009140

08000fd0 <PrintFloat>:
	PrintString( printer, DataNumber, sizeof(DataNumber) );
}

/*************************************************************/

void PrintFloat( UART_HandleTypeDef printer, float number, uint8_t afterpoint ){
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	b5b0      	push	{r4, r5, r7, lr}
 8000fd4:	b0a2      	sub	sp, #136	; 0x88
 8000fd6:	af10      	add	r7, sp, #64	; 0x40
 8000fd8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000fdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    char strNumber[65];

    uint16_t sizeStrNumber = floatToString( number, strNumber, afterpoint);
 8000fe0:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000fec:	f000 f820 	bl	8001030 <floatToString>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    PrintString( printer, strNumber, sizeStrNumber);
 8000ff6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000ffa:	930e      	str	r3, [sp, #56]	; 0x38
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	930d      	str	r3, [sp, #52]	; 0x34
 8001000:	466d      	mov	r5, sp
 8001002:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	602b      	str	r3, [r5, #0]
 8001016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800101a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101c:	f7ff ff9e 	bl	8000f5c <PrintString>
}
 8001020:	bf00      	nop
 8001022:	3748      	adds	r7, #72	; 0x48
 8001024:	46bd      	mov	sp, r7
 8001026:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800102a:	b004      	add	sp, #16
 800102c:	4770      	bx	lr
	...

08001030 <floatToString>:

/*************************************************************/

uint16_t floatToString( float number, char* String, uint8_t afterpoint ){
 8001030:	b580      	push	{r7, lr}
 8001032:	b09a      	sub	sp, #104	; 0x68
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	4613      	mov	r3, r2
 800103c:	71fb      	strb	r3, [r7, #7]

    char strNumber[65];

    uint8_t point = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    int32_t ipart = (int32_t)number; // Extract integer part
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f7ff fcc7 	bl	80009d8 <__aeabi_f2iz>
 800104a:	4603      	mov	r3, r0
 800104c:	65bb      	str	r3, [r7, #88]	; 0x58

    itoa(ipart, strNumber, 10); // convert integer part to string
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	220a      	movs	r2, #10
 8001054:	4619      	mov	r1, r3
 8001056:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001058:	f007 ff86 	bl	8008f68 <itoa>

    int32_t aux = ipart;
 800105c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800105e:	663b      	str	r3, [r7, #96]	; 0x60

    if(afterpoint > 0){
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d071      	beq.n	800114a <floatToString+0x11a>

    	if(aux < 0){ point++; } //Sumo un lugar para que entre el menos en el string
 8001066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001068:	2b00      	cmp	r3, #0
 800106a:	da12      	bge.n	8001092 <floatToString+0x62>
 800106c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001070:	3301      	adds	r3, #1
 8001072:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

        while(aux != 0){
 8001076:	e00c      	b.n	8001092 <floatToString+0x62>

            aux = aux/10;
 8001078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800107a:	4a41      	ldr	r2, [pc, #260]	; (8001180 <floatToString+0x150>)
 800107c:	fb82 1203 	smull	r1, r2, r2, r3
 8001080:	1092      	asrs	r2, r2, #2
 8001082:	17db      	asrs	r3, r3, #31
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	663b      	str	r3, [r7, #96]	; 0x60

            point++;
 8001088:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800108c:	3301      	adds	r3, #1
 800108e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        while(aux != 0){
 8001092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1ef      	bne.n	8001078 <floatToString+0x48>
        }

        if(point > 0){
 8001098:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800109c:	2b00      	cmp	r3, #0
 800109e:	d054      	beq.n	800114a <floatToString+0x11a>

            strNumber[point] = '.';  // add dot
 80010a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010a4:	3368      	adds	r3, #104	; 0x68
 80010a6:	443b      	add	r3, r7
 80010a8:	222e      	movs	r2, #46	; 0x2e
 80010aa:	f803 2c58 	strb.w	r2, [r3, #-88]

            float fpart = number - (float)ipart; // Extract floating part
 80010ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010b0:	f7ff fbc8 	bl	8000844 <__aeabi_i2f>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4619      	mov	r1, r3
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f7ff fb0d 	bl	80006d8 <__aeabi_fsub>
 80010be:	4603      	mov	r3, r0
 80010c0:	65fb      	str	r3, [r7, #92]	; 0x5c

            if(fpart < 0){fpart = fpart*(-1); }
 80010c2:	f04f 0100 	mov.w	r1, #0
 80010c6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80010c8:	f7ff fc5e 	bl	8000988 <__aeabi_fcmplt>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <floatToString+0xaa>
 80010d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	65fb      	str	r3, [r7, #92]	; 0x5c

            aux = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	663b      	str	r3, [r7, #96]	; 0x60

            ipart = (int32_t)(fpart*10);
 80010de:	4929      	ldr	r1, [pc, #164]	; (8001184 <floatToString+0x154>)
 80010e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80010e2:	f7ff f835 	bl	8000150 <__aeabi_fmul>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fc75 	bl	80009d8 <__aeabi_f2iz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	65bb      	str	r3, [r7, #88]	; 0x58

            if(ipart == 0){  point++; strNumber[point] = '0'; } // Si el primer decimal despues de la coma es 0 lo cargo a mano.
 80010f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d115      	bne.n	8001124 <floatToString+0xf4>
 80010f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010fc:	3301      	adds	r3, #1
 80010fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001102:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001106:	3368      	adds	r3, #104	; 0x68
 8001108:	443b      	add	r3, r7
 800110a:	2230      	movs	r2, #48	; 0x30
 800110c:	f803 2c58 	strb.w	r2, [r3, #-88]

            while(aux != afterpoint){
 8001110:	e008      	b.n	8001124 <floatToString+0xf4>

                fpart = fpart*10;
 8001112:	491c      	ldr	r1, [pc, #112]	; (8001184 <floatToString+0x154>)
 8001114:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001116:	f7ff f81b 	bl	8000150 <__aeabi_fmul>
 800111a:	4603      	mov	r3, r0
 800111c:	65fb      	str	r3, [r7, #92]	; 0x5c

                aux++;
 800111e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001120:	3301      	adds	r3, #1
 8001122:	663b      	str	r3, [r7, #96]	; 0x60
            while(aux != afterpoint){
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001128:	429a      	cmp	r2, r3
 800112a:	d1f2      	bne.n	8001112 <floatToString+0xe2>
            }

            char * pointer;

            pointer = strNumber;
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	657b      	str	r3, [r7, #84]	; 0x54

            itoa(fpart, (pointer + point + 1), 10); // convert integer part to string
 8001132:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001134:	f7ff fc50 	bl	80009d8 <__aeabi_f2iz>
 8001138:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800113c:	3301      	adds	r3, #1
 800113e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001140:	4413      	add	r3, r2
 8001142:	220a      	movs	r2, #10
 8001144:	4619      	mov	r1, r3
 8001146:	f007 ff0f 	bl	8008f68 <itoa>
        }
    }

    memcpy(String, strNumber, (point + 1 + aux + 1)); //enteros + punto + decimales + fin de string
 800114a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001152:	4413      	add	r3, r2
 8001154:	3301      	adds	r3, #1
 8001156:	461a      	mov	r2, r3
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	68b8      	ldr	r0, [r7, #8]
 8001160:	f007 ff04 	bl	8008f6c <memcpy>

    return (point + 1 + aux + 1);//enteros + punto + decimales + fin de string
 8001164:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001168:	b29a      	uxth	r2, r3
 800116a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800116c:	b29b      	uxth	r3, r3
 800116e:	4413      	add	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	3302      	adds	r3, #2
 8001174:	b29b      	uxth	r3, r3
}
 8001176:	4618      	mov	r0, r3
 8001178:	3768      	adds	r7, #104	; 0x68
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	66666667 	.word	0x66666667
 8001184:	41200000 	.word	0x41200000

08001188 <w25q80dv_SPIRead>:

/*==================[internal functions definition]==========================*/

/*==================[low level functions definition]=========================*/

HAL_StatusTypeDef w25q80dv_SPIRead( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght, uint8_t* value, uint8_t valueLenght ){
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	71fb      	strb	r3, [r7, #7]

	uint8_t retVal;

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_RESET);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6898      	ldr	r0, [r3, #8]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	4619      	mov	r1, r3
 80011a4:	f001 ffe8 	bl	8003178 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(dev->W25Q80DV_SPI, data, dataLenght, HAL_MAX_DELAY);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	f003 fcdd 	bl	8004b74 <HAL_SPI_Transmit>

	retVal = HAL_SPI_Receive(dev->W25Q80DV_SPI, value, valueLenght, HAL_MAX_DELAY);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	f003 fe0f 	bl	8004dec <HAL_SPI_Receive>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_SET);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6898      	ldr	r0, [r3, #8]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	4619      	mov	r1, r3
 80011de:	f001 ffcb 	bl	8003178 <HAL_GPIO_WritePin>

	return retVal;
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <w25q80dv_SPIWrite>:

/*************************************************************/

HAL_StatusTypeDef w25q80dv_SPIWrite( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght ){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	4613      	mov	r3, r2
 80011f8:	71fb      	strb	r3, [r7, #7]

	uint8_t retVal;

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_RESET);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6898      	ldr	r0, [r3, #8]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	889b      	ldrh	r3, [r3, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	f001 ffb7 	bl	8003178 <HAL_GPIO_WritePin>

	retVal = HAL_SPI_Transmit(dev->W25Q80DV_SPI, data, dataLenght, HAL_MAX_DELAY);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	b29a      	uxth	r2, r3
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	f003 fcac 	bl	8004b74 <HAL_SPI_Transmit>
 800121c:	4603      	mov	r3, r0
 800121e:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_SET);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6898      	ldr	r0, [r3, #8]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f001 ffa4 	bl	8003178 <HAL_GPIO_WritePin>

	return retVal;
 8001230:	7dfb      	ldrb	r3, [r7, #23]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <w25q80dv_InstructionReadID>:

/*==================[Instruction functions definition]=======================*/

bool_t w25q80dv_InstructionReadID( W25Q80DV_Data_t* dev ){
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af02      	add	r7, sp, #8
 8001242:	6078      	str	r0, [r7, #4]

	uint8_t instruction[] = {W25Q80DV_DEVID, W25Q80DV_DUMMY_BYTE, W25Q80DV_DUMMY_BYTE, W25Q80DV_DUMMY_BYTE};
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <w25q80dv_InstructionReadID+0x44>)
 8001246:	613b      	str	r3, [r7, #16]

	uint8_t devID = W25Q80DV_ERROR_BYTE;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	73fb      	strb	r3, [r7, #15]

	bool_t retVal = FALSE;
 800124c:	2300      	movs	r3, #0
 800124e:	75fb      	strb	r3, [r7, #23]

	if(w25q80dv_SPIRead(dev, instruction, 4, &devID, 1) == HAL_OK){
 8001250:	f107 030f 	add.w	r3, r7, #15
 8001254:	f107 0110 	add.w	r1, r7, #16
 8001258:	2201      	movs	r2, #1
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	2204      	movs	r2, #4
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff92 	bl	8001188 <w25q80dv_SPIRead>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d104      	bne.n	8001274 <w25q80dv_InstructionReadID+0x38>

		if(devID == W25Q80DV_ID){
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b13      	cmp	r3, #19
 800126e:	d101      	bne.n	8001274 <w25q80dv_InstructionReadID+0x38>

			retVal = TRUE;
 8001270:	2301      	movs	r3, #1
 8001272:	75fb      	strb	r3, [r7, #23]
		}
	}

	return retVal;
 8001274:	7dfb      	ldrb	r3, [r7, #23]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	aaaaaaab 	.word	0xaaaaaaab

08001284 <w25q80dv_InstructionWriteEnable>:

/*************************************************************/

HAL_StatusTypeDef w25q80dv_InstructionWriteEnable( W25Q80DV_Data_t* dev ){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

	uint8_t instruction = W25Q80DV_WRITE_ENABLE;
 800128c:	2306      	movs	r3, #6
 800128e:	73fb      	strb	r3, [r7, #15]

	return w25q80dv_SPIWrite(dev, &instruction, 1);
 8001290:	f107 030f 	add.w	r3, r7, #15
 8001294:	2201      	movs	r2, #1
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffa7 	bl	80011ec <w25q80dv_SPIWrite>
 800129e:	4603      	mov	r3, r0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <w25q80dv_InstructionReadStatusRegister>:
	return w25q80dv_SPIWrite(dev, &instruction, 1);
}

/*************************************************************/

uint8_t w25q80dv_InstructionReadStatusRegister( W25Q80DV_Data_t* dev, uint8_t selectRegister){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]

	uint8_t instruction;

	uint8_t statusRegister = W25Q80DV_ERROR_BYTE;
 80012b4:	23ff      	movs	r3, #255	; 0xff
 80012b6:	73bb      	strb	r3, [r7, #14]

	if (selectRegister == W25Q80DV_STATUSREGISTER_1 ){
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10c      	bne.n	80012d8 <w25q80dv_InstructionReadStatusRegister+0x30>

		instruction = W25Q80DV_READ_SR1;
 80012be:	2305      	movs	r3, #5
 80012c0:	73fb      	strb	r3, [r7, #15]

		w25q80dv_SPIRead(dev, &instruction, 1, &statusRegister, 1);
 80012c2:	f107 030e 	add.w	r3, r7, #14
 80012c6:	f107 010f 	add.w	r1, r7, #15
 80012ca:	2201      	movs	r2, #1
 80012cc:	9200      	str	r2, [sp, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff59 	bl	8001188 <w25q80dv_SPIRead>
 80012d6:	e00e      	b.n	80012f6 <w25q80dv_InstructionReadStatusRegister+0x4e>
	}

	else if (selectRegister == 2){
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d10b      	bne.n	80012f6 <w25q80dv_InstructionReadStatusRegister+0x4e>

		instruction = W25Q80DV_READ_SR2;
 80012de:	2335      	movs	r3, #53	; 0x35
 80012e0:	73fb      	strb	r3, [r7, #15]

		w25q80dv_SPIRead(dev, &instruction, 1, &statusRegister, 1);
 80012e2:	f107 030e 	add.w	r3, r7, #14
 80012e6:	f107 010f 	add.w	r1, r7, #15
 80012ea:	2201      	movs	r2, #1
 80012ec:	9200      	str	r2, [sp, #0]
 80012ee:	2201      	movs	r2, #1
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff49 	bl	8001188 <w25q80dv_SPIRead>
	}

	return statusRegister;
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <w25q80dv_InstructionWaitForWriteEnd>:

/*************************************************************/

void w25q80dv_InstructionWaitForWriteEnd( W25Q80DV_Data_t* dev ){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

	uint8_t statusRegister1;

	do{
		statusRegister1 = w25q80dv_InstructionReadStatusRegister(dev, W25Q80DV_READ_SR1);
 8001308:	2105      	movs	r1, #5
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffcc 	bl	80012a8 <w25q80dv_InstructionReadStatusRegister>
 8001310:	4603      	mov	r3, r0
 8001312:	73fb      	strb	r3, [r7, #15]

		HAL_Delay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f001 f9d7 	bl	80026c8 <HAL_Delay>

	} while ((statusRegister1 & W25Q80DV_WEL_BIT) == W25Q80DV_WEL_ENABLE);
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f1      	bne.n	8001308 <w25q80dv_InstructionWaitForWriteEnd+0x8>
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <w25q80dv_Init>:

/*==================[Initialization functions definition]====================*/

bool_t w25q80dv_Init( W25Q80DV_Data_t* dev, SPI_HandleTypeDef* spi, uint16_t pin, GPIO_TypeDef* port ){
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4613      	mov	r3, r2
 800133c:	80fb      	strh	r3, [r7, #6]

	dev->W25Q80DV_SPI = spi;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	601a      	str	r2, [r3, #0]

	dev->csPort = port;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	609a      	str	r2, [r3, #8]

	dev->csPin = pin;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	809a      	strh	r2, [r3, #4]

	dev->lastPage = 0;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	821a      	strh	r2, [r3, #16]

	dev->lastAddress = W25Q80DV_FIRST_PAGE_ADDRESS;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]

	dev->statusMemInit = FALSE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	749a      	strb	r2, [r3, #18]

	// We make sure that the memory start properly

	uint8_t instruction = W25Q80DV_RELEASE_PD;
 8001362:	23ab      	movs	r3, #171	; 0xab
 8001364:	75fb      	strb	r3, [r7, #23]

	w25q80dv_SPIWrite(dev, &instruction, 1);
 8001366:	f107 0317 	add.w	r3, r7, #23
 800136a:	2201      	movs	r2, #1
 800136c:	4619      	mov	r1, r3
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff ff3c 	bl	80011ec <w25q80dv_SPIWrite>

	// Check the flash memory

	if(w25q80dv_InstructionReadID(dev)){
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f7ff ff61 	bl	800123c <w25q80dv_InstructionReadID>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <w25q80dv_Init+0x58>

		dev->statusMemInit = TRUE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2201      	movs	r2, #1
 8001384:	749a      	strb	r2, [r3, #18]
	}

	return dev->statusMemInit;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	7c9b      	ldrb	r3, [r3, #18]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <w25q80dv_isMemInit>:

/*************************************************************/

bool_t w25q80dv_isMemInit( W25Q80DV_Data_t* dev ){
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]

	uint8_t data[W25Q80DV_INITIALIZE_SIZE];

	w25q80dv_ReadBytesInAddress(dev, W25Q80DV_FIRST_PAGE_ADDRESS, data, W25Q80DV_INITIALIZE_SIZE);
 800139a:	f107 020c 	add.w	r2, r7, #12
 800139e:	2304      	movs	r3, #4
 80013a0:	2100      	movs	r1, #0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f97d 	bl	80016a2 <w25q80dv_ReadBytesInAddress>

	// Check the data of initialization in memory

	bool_t retVal = FALSE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	75fb      	strb	r3, [r7, #23]

	uint32_t resultValue = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 80013ac:	7b3b      	ldrb	r3, [r7, #12]
 80013ae:	061a      	lsls	r2, r3, #24
 80013b0:	7b7b      	ldrb	r3, [r7, #13]
 80013b2:	041b      	lsls	r3, r3, #16
 80013b4:	431a      	orrs	r2, r3
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	4313      	orrs	r3, r2
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]

	if(resultValue == W25Q80DV_INITIALIZE_MEM){
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80013c8:	d101      	bne.n	80013ce <w25q80dv_isMemInit+0x3c>

		retVal = TRUE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
	}

	return retVal;
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <w25q80dv_EraseChip>:

/*==================[Basic functions definition]============================*/

void w25q80dv_EraseChip( W25Q80DV_Data_t* dev ){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

	w25q80dv_InstructionWaitForWriteEnd(dev);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff8d 	bl	8001300 <w25q80dv_InstructionWaitForWriteEnd>

	w25q80dv_InstructionWriteEnable(dev);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff4c 	bl	8001284 <w25q80dv_InstructionWriteEnable>

	uint8_t instruction = W25Q80DV_CHIP_ERASE;
 80013ec:	23c7      	movs	r3, #199	; 0xc7
 80013ee:	73fb      	strb	r3, [r7, #15]

	w25q80dv_SPIWrite(dev, &instruction, 1);
 80013f0:	f107 030f 	add.w	r3, r7, #15
 80013f4:	2201      	movs	r2, #1
 80013f6:	4619      	mov	r1, r3
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fef7 	bl	80011ec <w25q80dv_SPIWrite>

	w25q80dv_InstructionWaitForWriteEnd(dev);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff7e 	bl	8001300 <w25q80dv_InstructionWaitForWriteEnd>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <w25q80dv_WriteBytesInPage>:

/*************************************************************/

void w25q80dv_WriteBytesInPage( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght ){
 800140c:	b580      	push	{r7, lr}
 800140e:	b0c6      	sub	sp, #280	; 0x118
 8001410:	af00      	add	r7, sp, #0
 8001412:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001416:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800141a:	6018      	str	r0, [r3, #0]
 800141c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001420:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001424:	6019      	str	r1, [r3, #0]
 8001426:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800142a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800142e:	701a      	strb	r2, [r3, #0]

	w25q80dv_InstructionWaitForWriteEnd(dev);
 8001430:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001434:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	f7ff ff61 	bl	8001300 <w25q80dv_InstructionWaitForWriteEnd>

	w25q80dv_InstructionWriteEnable(dev);
 800143e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001442:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	f7ff ff1c 	bl	8001284 <w25q80dv_InstructionWriteEnable>

	uint8_t instruction[4 + W25Q80DV_PAGE_SIZE]; // Instruction + 3 byte Address + Data

	instruction[0] = W25Q80DV_PAGE_PROGRAM;
 800144c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001454:	2202      	movs	r2, #2
 8001456:	701a      	strb	r2, [r3, #0]

	instruction[1] = (dev->lastAddress & 0xFF0000) >> 16;
 8001458:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800145c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0c1b      	lsrs	r3, r3, #16
 8001466:	b2da      	uxtb	r2, r3
 8001468:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800146c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001470:	705a      	strb	r2, [r3, #1]

	instruction[2] = (dev->lastAddress & 0xFF00) >> 8;
 8001472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001476:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b2da      	uxtb	r2, r3
 8001482:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800148a:	709a      	strb	r2, [r3, #2]

	instruction[3] = (dev->lastAddress & 0xFF);
 800148c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001490:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800149e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014a2:	70da      	strb	r2, [r3, #3]

	memcpy((instruction + 4), data, dataLenght);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	3304      	adds	r3, #4
 80014aa:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80014ae:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80014b8:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80014bc:	6809      	ldr	r1, [r1, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 fd54 	bl	8008f6c <memcpy>

	w25q80dv_SPIWrite(dev, instruction, 4 + dataLenght);
 80014c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014c8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	3304      	adds	r3, #4
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	f107 0114 	add.w	r1, r7, #20
 80014d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f7ff fe84 	bl	80011ec <w25q80dv_SPIWrite>

	w25q80dv_InstructionWaitForWriteEnd(dev);
 80014e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	f7ff ff07 	bl	8001300 <w25q80dv_InstructionWaitForWriteEnd>

	// Maximum time to write a page
	HAL_Delay(3);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f001 f8e8 	bl	80026c8 <HAL_Delay>

	dev->lastAddress = dev->lastAddress + dataLenght;
 80014f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001508:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	441a      	add	r2, r3
 8001510:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001514:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60da      	str	r2, [r3, #12]
}
 800151c:	bf00      	nop
 800151e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <w25q80dv_WriteBytesInSequence>:

/*************************************************************/

bool_t w25q80dv_WriteBytesInSequence( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght ){
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	4613      	mov	r3, r2
 8001532:	71fb      	strb	r3, [r7, #7]

	bool_t retVal = FALSE;
 8001534:	2300      	movs	r3, #0
 8001536:	75fb      	strb	r3, [r7, #23]

	uint8_t splitData;

	if(w25q80dv_AddressToWrite(dev, dataLenght, splitData)){
 8001538:	7dbb      	ldrb	r3, [r7, #22]
 800153a:	461a      	mov	r2, r3
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4619      	mov	r1, r3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 f8cf 	bl	80016e4 <w25q80dv_AddressToWrite>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d02a      	beq.n	80015a2 <w25q80dv_WriteBytesInSequence+0x7c>

		retVal = TRUE;
 800154c:	2301      	movs	r3, #1
 800154e:	75fb      	strb	r3, [r7, #23]

		if(splitData == 0){
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <w25q80dv_WriteBytesInSequence+0x3e>

			w25q80dv_WriteBytesInPage(dev, data, dataLenght);
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	461a      	mov	r2, r3
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff ff55 	bl	800140c <w25q80dv_WriteBytesInPage>
 8001562:	e01b      	b.n	800159c <w25q80dv_WriteBytesInSequence+0x76>
		}

		else {

			dev->lastPage++;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8a1b      	ldrh	r3, [r3, #16]
 8001568:	3301      	adds	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	821a      	strh	r2, [r3, #16]

			w25q80dv_WriteBytesInPage(dev, data, (dataLenght - splitData));
 8001570:	79fa      	ldrb	r2, [r7, #7]
 8001572:	7dbb      	ldrb	r3, [r7, #22]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff ff45 	bl	800140c <w25q80dv_WriteBytesInPage>

			w25q80dv_WriteBytesInPage(dev, data[dataLenght - splitData], splitData);
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	7dbb      	ldrb	r3, [r7, #22]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	461a      	mov	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	7dbb      	ldrb	r3, [r7, #22]
 8001594:	461a      	mov	r2, r3
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff ff38 	bl	800140c <w25q80dv_WriteBytesInPage>
		}

		w25q80dv_InstructionWaitForWriteEnd(dev);
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f7ff feaf 	bl	8001300 <w25q80dv_InstructionWaitForWriteEnd>
	}

	return retVal;
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <w25q80dv_WriteBytesInAddress>:

/*************************************************************/

void w25q80dv_WriteBytesInAddress( W25Q80DV_Data_t* dev, uint32_t address, uint8_t* data, uint8_t dataLenght ){
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b0c7      	sub	sp, #284	; 0x11c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80015b6:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 80015ba:	6020      	str	r0, [r4, #0]
 80015bc:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80015c0:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 80015c4:	6001      	str	r1, [r0, #0]
 80015c6:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80015ca:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80015ce:	600a      	str	r2, [r1, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015d6:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 80015da:	701a      	strb	r2, [r3, #0]

	w25q80dv_InstructionWaitForWriteEnd(dev);
 80015dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	f7ff fe8b 	bl	8001300 <w25q80dv_InstructionWaitForWriteEnd>

	w25q80dv_InstructionWriteEnable(dev);
 80015ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f7ff fe46 	bl	8001284 <w25q80dv_InstructionWriteEnable>

	uint8_t instruction[4 + W25Q80DV_PAGE_SIZE]; // Instruction + 3 byte Address + Data

	instruction[0] = W25Q80DV_PAGE_PROGRAM;
 80015f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001600:	2202      	movs	r2, #2
 8001602:	701a      	strb	r2, [r3, #0]

	instruction[1] = (address & 0xFF0000) >> 16;
 8001604:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001608:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0c1b      	lsrs	r3, r3, #16
 8001610:	b2da      	uxtb	r2, r3
 8001612:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800161a:	705a      	strb	r2, [r3, #1]

	instruction[2] = (address & 0xFF00) >> 8;
 800161c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001620:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	b2da      	uxtb	r2, r3
 800162a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800162e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001632:	709a      	strb	r2, [r3, #2]

	instruction[3] = (address & 0xFF);
 8001634:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001638:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001648:	70da      	strb	r2, [r3, #3]

	memcpy((instruction + 4), data, dataLenght);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	3304      	adds	r3, #4
 8001650:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001654:	f2a2 1215 	subw	r2, r2, #277	; 0x115
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800165e:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8001662:	6809      	ldr	r1, [r1, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f007 fc81 	bl	8008f6c <memcpy>

	w25q80dv_SPIWrite(dev, instruction, 4 + dataLenght);
 800166a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800166e:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	3304      	adds	r3, #4
 8001676:	b2da      	uxtb	r2, r3
 8001678:	f107 0114 	add.w	r1, r7, #20
 800167c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001680:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	f7ff fdb1 	bl	80011ec <w25q80dv_SPIWrite>

	w25q80dv_InstructionWaitForWriteEnd(dev);
 800168a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800168e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f7ff fe34 	bl	8001300 <w25q80dv_InstructionWaitForWriteEnd>
}
 8001698:	bf00      	nop
 800169a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}

080016a2 <w25q80dv_ReadBytesInAddress>:
	w25q80dv_SPIRead(dev, instruction, 4, data, dataLenght);
}

/*************************************************************/

void w25q80dv_ReadBytesInAddress( W25Q80DV_Data_t* dev, uint32_t address, uint8_t* data, uint8_t dataLenght ){
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b088      	sub	sp, #32
 80016a6:	af02      	add	r7, sp, #8
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	70fb      	strb	r3, [r7, #3]

	uint8_t instruction[4]; // Instruction + 3 byte Address

	instruction[0] = W25Q80DV_READ_DATA;
 80016b0:	2303      	movs	r3, #3
 80016b2:	753b      	strb	r3, [r7, #20]

	instruction[1] = (address & 0xFF0000) >> 16;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	0c1b      	lsrs	r3, r3, #16
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	757b      	strb	r3, [r7, #21]

	instruction[2] = (address & 0xFF00) >> 8;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	75bb      	strb	r3, [r7, #22]

	instruction[3] = (address & 0xFF);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	75fb      	strb	r3, [r7, #23]

	w25q80dv_SPIRead(dev, instruction, 4, data, dataLenght);
 80016ca:	f107 0114 	add.w	r1, r7, #20
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2204      	movs	r2, #4
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f7ff fd56 	bl	8001188 <w25q80dv_SPIRead>
}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <w25q80dv_AddressToWrite>:

/*************************************************************/

bool_t w25q80dv_AddressToWrite( W25Q80DV_Data_t* dev, uint8_t dataLenght, uint8_t* splitDataLenght ){
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	460b      	mov	r3, r1
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	72fb      	strb	r3, [r7, #11]

	bool_t retVal = FALSE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	77fb      	strb	r3, [r7, #31]

	uint32_t nextAddressPageWrite = (dev->lastPage + 1)*W25Q80DV_PAGE_SIZE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8a1b      	ldrh	r3, [r3, #16]
 80016fa:	3301      	adds	r3, #1
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	61bb      	str	r3, [r7, #24]

	if(nextAddressPageWrite <= W25Q80DV_LAST_PAGE_ADDRESS){
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <w25q80dv_AddressToWrite+0x5c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d815      	bhi.n	8001734 <w25q80dv_AddressToWrite+0x50>

		uint32_t offsetNextPage = nextAddressPageWrite - dev->lastAddress;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	617b      	str	r3, [r7, #20]

		if(offsetNextPage > dataLenght){
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	429a      	cmp	r2, r3
 8001718:	d903      	bls.n	8001722 <w25q80dv_AddressToWrite+0x3e>

			*splitDataLenght = 0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e006      	b.n	8001730 <w25q80dv_AddressToWrite+0x4c>
		}

		else {

			*splitDataLenght = dataLenght - offsetNextPage;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	7afa      	ldrb	r2, [r7, #11]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	701a      	strb	r2, [r3, #0]
		}

		retVal = TRUE;
 8001730:	2301      	movs	r3, #1
 8001732:	77fb      	strb	r3, [r7, #31]
	}

	return retVal;
 8001734:	7ffb      	ldrb	r3, [r7, #31]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	000ffff0 	.word	0x000ffff0

08001744 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4a06      	ldr	r2, [pc, #24]	; (800176c <vApplicationGetIdleTaskMemory+0x28>)
 8001754:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	4a05      	ldr	r2, [pc, #20]	; (8001770 <vApplicationGetIdleTaskMemory+0x2c>)
 800175a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	200000ac 	.word	0x200000ac
 8001770:	20000100 	.word	0x20000100

08001774 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	b0b1      	sub	sp, #196	; 0xc4
 8001778:	af10      	add	r7, sp, #64	; 0x40

	// MCU Configuration
	// Reset of all peripherals, Initializes the Flash interface and the Systick.
	HAL_Init();
 800177a:	f000 ff73 	bl	8002664 <HAL_Init>

	// Configure the system clock
	SystemClock_Config();
 800177e:	f000 f8e9 	bl	8001954 <SystemClock_Config>

	// Initialize all configured peripherals
	MX_GPIO_Init();
 8001782:	f000 f9e9 	bl	8001b58 <MX_GPIO_Init>
	MX_DMA_Init();
 8001786:	f000 f9c9 	bl	8001b1c <MX_DMA_Init>
	MX_I2C1_Init();
 800178a:	f000 f929 	bl	80019e0 <MX_I2C1_Init>
	MX_SPI1_Init();
 800178e:	f000 f955 	bl	8001a3c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001792:	f000 f989 	bl	8001aa8 <MX_USART1_UART_Init>

	// First we initialize the memory to recover all the data save(last uid);
	if(w25q80dv_Init(&W25Q80DV_data, &hspi1, SPI1_NCS_Pin, SPI1_NCS_GPIO_Port)){
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <main+0x198>)
 8001798:	2210      	movs	r2, #16
 800179a:	495d      	ldr	r1, [pc, #372]	; (8001910 <main+0x19c>)
 800179c:	485d      	ldr	r0, [pc, #372]	; (8001914 <main+0x1a0>)
 800179e:	f7ff fdc6 	bl	800132e <w25q80dv_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d028      	beq.n	80017fa <main+0x86>
		// If there's no data save in the memory, we must do an erase to start using it.
		if(w25q80dv_isMemInit(&W25Q80DV_data) == FALSE){
 80017a8:	485a      	ldr	r0, [pc, #360]	; (8001914 <main+0x1a0>)
 80017aa:	f7ff fdf2 	bl	8001392 <w25q80dv_isMemInit>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10f      	bne.n	80017d4 <main+0x60>
			
			w25q80dv_EraseChip(&W25Q80DV_data);
 80017b4:	4857      	ldr	r0, [pc, #348]	; (8001914 <main+0x1a0>)
 80017b6:	f7ff fe0f 	bl	80013d8 <w25q80dv_EraseChip>
			
			uint32_t initData = W25Q80DV_INITIALIZE_MEM;
 80017ba:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80017be:	607b      	str	r3, [r7, #4]
			
			w25q80dv_WriteBytesInAddress(&W25Q80DV_data, W25Q80DV_FIRST_PAGE_ADDRESS, (uint8_t*)&initData, W25Q80DV_INITIALIZE_SIZE);
 80017c0:	1d3a      	adds	r2, r7, #4
 80017c2:	2304      	movs	r3, #4
 80017c4:	2100      	movs	r1, #0
 80017c6:	4853      	ldr	r0, [pc, #332]	; (8001914 <main+0x1a0>)
 80017c8:	f7ff fef0 	bl	80015ac <w25q80dv_WriteBytesInAddress>
			
			LIS3MDL_data.uid = 0;
 80017cc:	4b52      	ldr	r3, [pc, #328]	; (8001918 <main+0x1a4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	809a      	strh	r2, [r3, #4]
 80017d2:	e012      	b.n	80017fa <main+0x86>
		// Else we have to read the last ID save in memory to know where to start writting the memory.
		else {
			
			uint16_t lastID;
			
			w25q80dv_ReadBytesInAddress(&W25Q80DV_data, INIT_DATA_ADDRESS, (uint8_t*)&lastID, INIT_DATA_SIZE);
 80017d4:	1cba      	adds	r2, r7, #2
 80017d6:	2302      	movs	r3, #2
 80017d8:	2104      	movs	r1, #4
 80017da:	484e      	ldr	r0, [pc, #312]	; (8001914 <main+0x1a0>)
 80017dc:	f7ff ff61 	bl	80016a2 <w25q80dv_ReadBytesInAddress>
			
			W25Q80DV_data.lastAddress = lastID*(sizeof(LIS3MDL_StoreData_t) - 1) + (INIT_DATA_ADDRESS + INIT_DATA_SIZE);
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	3306      	adds	r3, #6
 80017f0:	4a48      	ldr	r2, [pc, #288]	; (8001914 <main+0x1a0>)
 80017f2:	60d3      	str	r3, [r2, #12]
			
			LIS3MDL_data.uid = lastID;
 80017f4:	887a      	ldrh	r2, [r7, #2]
 80017f6:	4b48      	ldr	r3, [pc, #288]	; (8001918 <main+0x1a4>)
 80017f8:	809a      	strh	r2, [r3, #4]
		}
	}

	/* Create the semaphores(s) */
	/* definition and creation of binarySemaphoreUART */
	osSemaphoreDef(binarySemaphoreUART);
 80017fa:	2300      	movs	r3, #0
 80017fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80017fe:	2300      	movs	r3, #0
 8001800:	67fb      	str	r3, [r7, #124]	; 0x7c
	binarySemaphoreUARTHandle = osSemaphoreCreate(osSemaphore(binarySemaphoreUART), 1);
 8001802:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001806:	2101      	movs	r1, #1
 8001808:	4618      	mov	r0, r3
 800180a:	f004 ffc2 	bl	8006792 <osSemaphoreCreate>
 800180e:	4603      	mov	r3, r0
 8001810:	4a42      	ldr	r2, [pc, #264]	; (800191c <main+0x1a8>)
 8001812:	6013      	str	r3, [r2, #0]
	
	/* Create the queue(s) */
	queueDataProcessing = xQueueCreate(16, sizeof(LIS3MDL_StoreData_t));
 8001814:	2200      	movs	r2, #0
 8001816:	2118      	movs	r1, #24
 8001818:	2010      	movs	r0, #16
 800181a:	f005 f9f2 	bl	8006c02 <xQueueGenericCreate>
 800181e:	4603      	mov	r3, r0
 8001820:	4a3f      	ldr	r2, [pc, #252]	; (8001920 <main+0x1ac>)
 8001822:	6013      	str	r3, [r2, #0]
	queueUsartReception = xQueueCreate(16, sizeof(uint16_t));
 8001824:	2200      	movs	r2, #0
 8001826:	2102      	movs	r1, #2
 8001828:	2010      	movs	r0, #16
 800182a:	f005 f9ea 	bl	8006c02 <xQueueGenericCreate>
 800182e:	4603      	mov	r3, r0
 8001830:	4a3c      	ldr	r2, [pc, #240]	; (8001924 <main+0x1b0>)
 8001832:	6013      	str	r3, [r2, #0]
	queueUsartSender = xQueueCreate(16, sizeof(LIS3MDL_StoreData_t));
 8001834:	2200      	movs	r2, #0
 8001836:	2118      	movs	r1, #24
 8001838:	2010      	movs	r0, #16
 800183a:	f005 f9e2 	bl	8006c02 <xQueueGenericCreate>
 800183e:	4603      	mov	r3, r0
 8001840:	4a39      	ldr	r2, [pc, #228]	; (8001928 <main+0x1b4>)
 8001842:	6013      	str	r3, [r2, #0]
	
	/* Create the thread(s) */
	osThreadDef(sensorTask, measurementFunction, osPriorityNormal, 0, 128);
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <main+0x1b8>)
 8001846:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800184a:	461d      	mov	r5, r3
 800184c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001850:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 8001858:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f004 ff37 	bl	80066d2 <osThreadCreate>
 8001864:	4603      	mov	r3, r0
 8001866:	4a32      	ldr	r2, [pc, #200]	; (8001930 <main+0x1bc>)
 8001868:	6013      	str	r3, [r2, #0]
	osThreadDef(memoryTask, recordingFunction, osPriorityNormal, 0, 128);
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <main+0x1c0>)
 800186c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001870:	461d      	mov	r5, r3
 8001872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001876:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800187a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	memoryTaskHandle = osThreadCreate(osThread(memoryTask), NULL);
 800187e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f004 ff24 	bl	80066d2 <osThreadCreate>
 800188a:	4603      	mov	r3, r0
 800188c:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <main+0x1c4>)
 800188e:	6013      	str	r3, [r2, #0]
	osThreadDef(receiveTask, receptionFunction, osPriorityNormal, 0, 128);
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <main+0x1c8>)
 8001892:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001896:	461d      	mov	r5, r3
 8001898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 80018a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 ff11 	bl	80066d2 <osThreadCreate>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a23      	ldr	r2, [pc, #140]	; (8001940 <main+0x1cc>)
 80018b4:	6013      	str	r3, [r2, #0]
	osThreadDef(sendTask, sendingFunction, osPriorityNormal, 0, 128);
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <main+0x1d0>)
 80018b8:	f107 0408 	add.w	r4, r7, #8
 80018bc:	461d      	mov	r5, r3
 80018be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fefe 	bl	80066d2 <osThreadCreate>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <main+0x1d4>)
 80018da:	6013      	str	r3, [r2, #0]

	PrintString(huart1, "Starting FreeRTOS System\r\n", sizeof("Starting FreeRTOS System\r\n"));
 80018dc:	4e1b      	ldr	r6, [pc, #108]	; (800194c <main+0x1d8>)
 80018de:	231b      	movs	r3, #27
 80018e0:	930e      	str	r3, [sp, #56]	; 0x38
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <main+0x1dc>)
 80018e4:	930d      	str	r3, [sp, #52]	; 0x34
 80018e6:	466d      	mov	r5, sp
 80018e8:	f106 0410 	add.w	r4, r6, #16
 80018ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	602b      	str	r3, [r5, #0]
 80018fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001900:	f7ff fb2c 	bl	8000f5c <PrintString>

	/* Start scheduler */
	osKernelStart();
 8001904:	f004 fede 	bl	80066c4 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1){}
 8001908:	e7fe      	b.n	8001908 <main+0x194>
 800190a:	bf00      	nop
 800190c:	40010800 	.word	0x40010800
 8001910:	20000354 	.word	0x20000354
 8001914:	200004a4 	.word	0x200004a4
 8001918:	20000470 	.word	0x20000470
 800191c:	20000444 	.word	0x20000444
 8001920:	20000448 	.word	0x20000448
 8001924:	2000044c 	.word	0x2000044c
 8001928:	20000450 	.word	0x20000450
 800192c:	08009190 	.word	0x08009190
 8001930:	20000434 	.word	0x20000434
 8001934:	080091ac 	.word	0x080091ac
 8001938:	20000438 	.word	0x20000438
 800193c:	080091c8 	.word	0x080091c8
 8001940:	2000043c 	.word	0x2000043c
 8001944:	080091e4 	.word	0x080091e4
 8001948:	20000440 	.word	0x20000440
 800194c:	200003ac 	.word	0x200003ac
 8001950:	08009174 	.word	0x08009174

08001954 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	b090      	sub	sp, #64	; 0x40
 8001958:	af00      	add	r7, sp, #0
  
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	2228      	movs	r2, #40	; 0x28
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f007 fb10 	bl	8008f88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001976:	2301      	movs	r3, #1
 8001978:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800197a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800197e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001984:	2301      	movs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001988:	2302      	movs	r3, #2
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800198c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001992:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fc1b 	bl	80041d8 <HAL_RCC_OscConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x58>
		Error_Handler();
 80019a8:	f000 fc3e 	bl	8002228 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ac:	230f      	movs	r3, #15
 80019ae:	607b      	str	r3, [r7, #4]
								|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b0:	2302      	movs	r3, #2
 80019b2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK){
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2102      	movs	r1, #2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fe88 	bl	80046dc <HAL_RCC_ClockConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0x82>
		Error_Handler();
 80019d2:	f000 fc29 	bl	8002228 <Error_Handler>
	}
}
 80019d6:	bf00      	nop
 80019d8:	3740      	adds	r7, #64	; 0x40
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_I2C1_Init+0x50>)
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <MX_I2C1_Init+0x54>)
 80019e8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_I2C1_Init+0x50>)
 80019ec:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <MX_I2C1_Init+0x58>)
 80019ee:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_I2C1_Init+0x50>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_I2C1_Init+0x50>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_I2C1_Init+0x50>)
 80019fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a02:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <MX_I2C1_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_I2C1_Init+0x50>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK){
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MX_I2C1_Init+0x50>)
 8001a1e:	f001 fbdb 	bl	80031d8 <HAL_I2C_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001a28:	f000 fbfe 	bl	8002228 <Error_Handler>
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000300 	.word	0x20000300
 8001a34:	40005400 	.word	0x40005400
 8001a38:	000186a0 	.word	0x000186a0

08001a3c <MX_SPI1_Init>:
/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a42:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <MX_SPI1_Init+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a4c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a70:	2208      	movs	r2, #8
 8001a72:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a88:	220a      	movs	r2, #10
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK){
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_SPI1_Init+0x64>)
 8001a8e:	f002 ffed 	bl	8004a6c <HAL_SPI_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_SPI1_Init+0x60>
		Error_Handler();
 8001a98:	f000 fbc6 	bl	8002228 <Error_Handler>
	}
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000354 	.word	0x20000354
 8001aa4:	40013000 	.word	0x40013000

08001aa8 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <MX_USART1_UART_Init+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8001ade:	480b      	ldr	r0, [pc, #44]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001ae0:	f003 ff7a 	bl	80059d8 <HAL_UART_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001aea:	f000 fb9d 	bl	8002228 <Error_Handler>
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 8001aee:	2219      	movs	r2, #25
 8001af0:	4908      	ldr	r1, [pc, #32]	; (8001b14 <MX_USART1_UART_Init+0x6c>)
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_USART1_UART_Init+0x64>)
 8001af4:	f004 f84f 	bl	8005b96 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <MX_USART1_UART_Init+0x70>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART1_UART_Init+0x70>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0204 	bic.w	r2, r2, #4
 8001b06:	601a      	str	r2, [r3, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200003ac 	.word	0x200003ac
 8001b10:	40013800 	.word	0x40013800
 8001b14:	20000454 	.word	0x20000454
 8001b18:	200003f0 	.word	0x200003f0

08001b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_DMA_Init+0x38>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <MX_DMA_Init+0x38>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6153      	str	r3, [r2, #20]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_DMA_Init+0x38>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f000 febf 	bl	80028c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b44:	200f      	movs	r0, #15
 8001b46:	f000 fed8 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000

08001b58 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a37      	ldr	r2, [pc, #220]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001b8a:	f043 0320 	orr.w	r3, r3, #32
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a25      	ldr	r2, [pc, #148]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd2:	4820      	ldr	r0, [pc, #128]	; (8001c54 <MX_GPIO_Init+0xfc>)
 8001bd4:	f001 fad0 	bl	8003178 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, GPIO_PIN_SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2110      	movs	r1, #16
 8001bdc:	481e      	ldr	r0, [pc, #120]	; (8001c58 <MX_GPIO_Init+0x100>)
 8001bde:	f001 facb 	bl	8003178 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4816      	ldr	r0, [pc, #88]	; (8001c54 <MX_GPIO_Init+0xfc>)
 8001bfc:	f001 f938 	bl	8002e70 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_NCS_Pin */
	GPIO_InitStruct.Pin = SPI1_NCS_Pin;
 8001c00:	2310      	movs	r3, #16
 8001c02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4619      	mov	r1, r3
 8001c16:	4810      	ldr	r0, [pc, #64]	; (8001c58 <MX_GPIO_Init+0x100>)
 8001c18:	f001 f92a 	bl	8002e70 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8001c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c20:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_GPIO_Init+0x104>)
 8001c24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480b      	ldr	r0, [pc, #44]	; (8001c60 <MX_GPIO_Init+0x108>)
 8001c32:	f001 f91d 	bl	8002e70 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2105      	movs	r1, #5
 8001c3a:	2028      	movs	r0, #40	; 0x28
 8001c3c:	f000 fe41 	bl	80028c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c40:	2028      	movs	r0, #40	; 0x28
 8001c42:	f000 fe5a 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40011000 	.word	0x40011000
 8001c58:	40010800 	.word	0x40010800
 8001c5c:	10210000 	.word	0x10210000
 8001c60:	40010c00 	.word	0x40010c00

08001c64 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
  
	if (huart->Instance == USART1){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a10      	ldr	r2, [pc, #64]	; (8001cb8 <HAL_UARTEx_RxEventCallback+0x54>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d119      	bne.n	8001cae <HAL_UARTEx_RxEventCallback+0x4a>

		if(StoreUSARTData(Rx_data, size)){
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480f      	ldr	r0, [pc, #60]	; (8001cbc <HAL_UARTEx_RxEventCallback+0x58>)
 8001c80:	f7ff f892 	bl	8000da8 <StoreUSARTData>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d004      	beq.n	8001c94 <HAL_UARTEx_RxEventCallback+0x30>

			osSemaphoreRelease(binarySemaphoreUARTHandle);
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fe00 	bl	8006894 <osSemaphoreRelease>
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 8001c94:	2219      	movs	r2, #25
 8001c96:	4909      	ldr	r1, [pc, #36]	; (8001cbc <HAL_UARTEx_RxEventCallback+0x58>)
 8001c98:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <HAL_UARTEx_RxEventCallback+0x60>)
 8001c9a:	f003 ff7c 	bl	8005b96 <HAL_UARTEx_ReceiveToIdle_DMA>

		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_UARTEx_RxEventCallback+0x64>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_UARTEx_RxEventCallback+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0204 	bic.w	r2, r2, #4
 8001cac:	601a      	str	r2, [r3, #0]
	}
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	20000454 	.word	0x20000454
 8001cc0:	20000444 	.word	0x20000444
 8001cc4:	200003ac 	.word	0x200003ac
 8001cc8:	200003f0 	.word	0x200003f0

08001ccc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ccc:	b5b0      	push	{r4, r5, r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
	
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001cd6:	2028      	movs	r0, #40	; 0x28
 8001cd8:	f000 fe1d 	bl	8002916 <HAL_NVIC_DisableIRQ>

	if(GPIO_Pin == BUTTON_Pin){
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce2:	d117      	bne.n	8001d14 <HAL_GPIO_EXTI_Callback+0x48>

		LIS3MDL_StoreData_t message = LIS3MDL_storedata;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x58>)
 8001ce6:	f107 0410 	add.w	r4, r7, #16
 8001cea:	461d      	mov	r5, r3
 8001cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cf4:	e884 0003 	stmia.w	r4, {r0, r1}

		message.statusData = DATA_READ;
 8001cf8:	2306      	movs	r3, #6
 8001cfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]

		xQueueSendToFrontFromISR(queueUsartSender, &message, &xHigherPriorityTaskWoken);
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	f107 020c 	add.w	r2, r7, #12
 8001d0a:	f107 0110 	add.w	r1, r7, #16
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f005 f8ba 	bl	8006e88 <xQueueGenericSendFromISR>
	}

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d14:	2028      	movs	r0, #40	; 0x28
 8001d16:	f000 fdf0 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bdb0      	pop	{r4, r5, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000048c 	.word	0x2000048c
 8001d28:	20000450 	.word	0x20000450

08001d2c <measurementFunction>:
/**
  * @brief  Function implementing the sensorTask thread.
  * @param  argument: Not used
  * @retval None
  */
void measurementFunction(void const * argument){
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	61f8      	str	r0, [r7, #28]

	LIS3MDL_data.scale = LIS3MDL_SCALE_12_GAUSS;
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <measurementFunction+0x90>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	761a      	strb	r2, [r3, #24]

	lis3mdl_Init(&LIS3MDL_data, &hi2c1);
 8001d3a:	4921      	ldr	r1, [pc, #132]	; (8001dc0 <measurementFunction+0x94>)
 8001d3c:	481f      	ldr	r0, [pc, #124]	; (8001dbc <measurementFunction+0x90>)
 8001d3e:	f7fe fe71 	bl	8000a24 <lis3mdl_Init>

	while(1){

		osDelay(1000);
 8001d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d46:	f004 fd10 	bl	800676a <osDelay>

		if(lis3mdl_DataReady(&LIS3MDL_data) == HAL_OK){
 8001d4a:	481c      	ldr	r0, [pc, #112]	; (8001dbc <measurementFunction+0x90>)
 8001d4c:	f7fe fef8 	bl	8000b40 <lis3mdl_DataReady>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d125      	bne.n	8001da2 <measurementFunction+0x76>

			LIS3MDL_data.uid++;
 8001d56:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <measurementFunction+0x90>)
 8001d58:	889b      	ldrh	r3, [r3, #4]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <measurementFunction+0x90>)
 8001d60:	809a      	strh	r2, [r3, #4]

			lis3mdl_ReadMagnetometer(&LIS3MDL_data);
 8001d62:	4816      	ldr	r0, [pc, #88]	; (8001dbc <measurementFunction+0x90>)
 8001d64:	f7fe ff04 	bl	8000b70 <lis3mdl_ReadMagnetometer>

			lis3mdl_ReadTemperature(&LIS3MDL_data);
 8001d68:	4814      	ldr	r0, [pc, #80]	; (8001dbc <measurementFunction+0x90>)
 8001d6a:	f7fe ff73 	bl	8000c54 <lis3mdl_ReadTemperature>

			LIS3MDL_storedata = lis3mdl_ConvertToStoreData(&LIS3MDL_data);
 8001d6e:	4c15      	ldr	r4, [pc, #84]	; (8001dc4 <measurementFunction+0x98>)
 8001d70:	463b      	mov	r3, r7
 8001d72:	4912      	ldr	r1, [pc, #72]	; (8001dbc <measurementFunction+0x90>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe ff9f 	bl	8000cb8 <lis3mdl_ConvertToStoreData>
 8001d7a:	4625      	mov	r5, r4
 8001d7c:	463c      	mov	r4, r7
 8001d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d86:	e885 0003 	stmia.w	r5, {r0, r1}

			LIS3MDL_storedata.statusData = SAVE_DATA;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <measurementFunction+0x98>)
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	751a      	strb	r2, [r3, #20]

			xQueueSend(queueDataProcessing, &LIS3MDL_storedata, portMAX_DELAY);
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <measurementFunction+0x9c>)
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	2300      	movs	r3, #0
 8001d96:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9a:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <measurementFunction+0x98>)
 8001d9c:	f004 ff8e 	bl	8006cbc <xQueueGenericSend>
 8001da0:	e7cf      	b.n	8001d42 <measurementFunction+0x16>
		}

		else {

			LIS3MDL_storedata.statusData = LIS3MDL_ERROR;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <measurementFunction+0x98>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	751a      	strb	r2, [r3, #20]

			xQueueSend(queueUsartSender, &LIS3MDL_storedata, portMAX_DELAY);
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <measurementFunction+0xa0>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	2300      	movs	r3, #0
 8001dae:	f04f 32ff 	mov.w	r2, #4294967295
 8001db2:	4904      	ldr	r1, [pc, #16]	; (8001dc4 <measurementFunction+0x98>)
 8001db4:	f004 ff82 	bl	8006cbc <xQueueGenericSend>
		osDelay(1000);
 8001db8:	e7c3      	b.n	8001d42 <measurementFunction+0x16>
 8001dba:	bf00      	nop
 8001dbc:	20000470 	.word	0x20000470
 8001dc0:	20000300 	.word	0x20000300
 8001dc4:	2000048c 	.word	0x2000048c
 8001dc8:	20000448 	.word	0x20000448
 8001dcc:	20000450 	.word	0x20000450

08001dd0 <recordingFunction>:
/**
* @brief Function implementing the memoryTask thread.
* @param argument: Not used
* @retval None
*/
void recordingFunction(void const * argument){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

	LIS3MDL_StoreData_t message;

	while(1){

		xQueueReceive(queueDataProcessing, &message, portMAX_DELAY);
 8001dd8:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <recordingFunction+0xfc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f107 010c 	add.w	r1, r7, #12
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	4618      	mov	r0, r3
 8001de6:	f005 f975 	bl	80070d4 <xQueueReceive>

		if(W25Q80DV_data.statusMemInit == TRUE){
 8001dea:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <recordingFunction+0x100>)
 8001dec:	7c9b      	ldrb	r3, [r3, #18]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d15e      	bne.n	8001eb0 <recordingFunction+0xe0>

			if(message.statusData == SAVE_DATA){
 8001df2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d129      	bne.n	8001e4e <recordingFunction+0x7e>

				uint8_t splitData = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	72fb      	strb	r3, [r7, #11]

				if(w25q80dv_AddressToWrite(&W25Q80DV_data, (sizeof(LIS3MDL_StoreData_t) - 1), &splitData)){
 8001dfe:	f107 030b 	add.w	r3, r7, #11
 8001e02:	461a      	mov	r2, r3
 8001e04:	2117      	movs	r1, #23
 8001e06:	4832      	ldr	r0, [pc, #200]	; (8001ed0 <recordingFunction+0x100>)
 8001e08:	f7ff fc6c 	bl	80016e4 <w25q80dv_AddressToWrite>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d011      	beq.n	8001e36 <recordingFunction+0x66>
					// We must save the data in memory
					w25q80dv_WriteBytesInSequence(&W25Q80DV_data, (uint8_t*)&message, (sizeof(LIS3MDL_StoreData_t) - 1));
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	2217      	movs	r2, #23
 8001e18:	4619      	mov	r1, r3
 8001e1a:	482d      	ldr	r0, [pc, #180]	; (8001ed0 <recordingFunction+0x100>)
 8001e1c:	f7ff fb83 	bl	8001526 <w25q80dv_WriteBytesInSequence>
					// We save in the first bytes the last id save in memory, for the next power up
					w25q80dv_WriteBytesInAddress(&W25Q80DV_data, INIT_DATA_ADDRESS, (uint8_t*)&message, INIT_DATA_SIZE);
 8001e20:	f107 020c 	add.w	r2, r7, #12
 8001e24:	2302      	movs	r3, #2
 8001e26:	2104      	movs	r1, #4
 8001e28:	4829      	ldr	r0, [pc, #164]	; (8001ed0 <recordingFunction+0x100>)
 8001e2a:	f7ff fbbf 	bl	80015ac <w25q80dv_WriteBytesInAddress>

					message.statusData = DATA_SAVE;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	f887 3020 	strb.w	r3, [r7, #32]
 8001e34:	e00b      	b.n	8001e4e <recordingFunction+0x7e>
				}

				else {
					// There's no more space in memory, we must adopt a rule, overwrite data starting
					// with the first page or send an alert.
					message.statusData = MEMORY_FULL;
 8001e36:	2307      	movs	r3, #7
 8001e38:	f887 3020 	strb.w	r3, [r7, #32]
					// Send the data to the sendTask
					xQueueSend(queueUsartSender, &message, portMAX_DELAY);
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <recordingFunction+0x104>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	f107 010c 	add.w	r1, r7, #12
 8001e44:	2300      	movs	r3, #0
 8001e46:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4a:	f004 ff37 	bl	8006cbc <xQueueGenericSend>
				}
			}

			if(message.statusData == READ_DATA){
 8001e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d1c0      	bne.n	8001dd8 <recordingFunction+0x8>
				// First we must get the address of that data id
				uint32_t addressAskID = message.uid*(sizeof(LIS3MDL_StoreData_t) - 1) + (INIT_DATA_ADDRESS + INIT_DATA_SIZE);
 8001e56:	89bb      	ldrh	r3, [r7, #12]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	3306      	adds	r3, #6
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24

				if(addressAskID > 0
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d013      	beq.n	8001e96 <recordingFunction+0xc6>
					&& addressAskID <= (W25Q80DV_LAST_ADDRESS - (sizeof(LIS3MDL_StoreData_t) - 1))
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <recordingFunction+0x108>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d80f      	bhi.n	8001e96 <recordingFunction+0xc6>
					&& message.uid <= LIS3MDL_data.uid){
 8001e76:	89ba      	ldrh	r2, [r7, #12]
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <recordingFunction+0x10c>)
 8001e7a:	889b      	ldrh	r3, [r3, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d80a      	bhi.n	8001e96 <recordingFunction+0xc6>
					// We must read the data in memory of the address
					w25q80dv_ReadBytesInAddress(&W25Q80DV_data, addressAskID, (uint8_t*)&message, (sizeof(LIS3MDL_StoreData_t) - 1));
 8001e80:	f107 020c 	add.w	r2, r7, #12
 8001e84:	2317      	movs	r3, #23
 8001e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e88:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <recordingFunction+0x100>)
 8001e8a:	f7ff fc0a 	bl	80016a2 <w25q80dv_ReadBytesInAddress>

					message.statusData = DATA_READ;
 8001e8e:	2306      	movs	r3, #6
 8001e90:	f887 3020 	strb.w	r3, [r7, #32]
 8001e94:	e002      	b.n	8001e9c <recordingFunction+0xcc>
				}

				else {
					// The ID selected is wrong, send error message
					message.statusData = WRONG_ID;
 8001e96:	2308      	movs	r3, #8
 8001e98:	f887 3020 	strb.w	r3, [r7, #32]
				}
				// Send the data to the sendTask
				xQueueSend(queueUsartSender, &message, portMAX_DELAY);
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <recordingFunction+0x104>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f107 010c 	add.w	r1, r7, #12
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	f004 ff07 	bl	8006cbc <xQueueGenericSend>
 8001eae:	e793      	b.n	8001dd8 <recordingFunction+0x8>
		}

		else {

			// The memory is not operative
			message.statusData = MEMORY_ERROR;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f887 3020 	strb.w	r3, [r7, #32]
			// Send the data to the sendTask
			xQueueSend(queueUsartSender, &message, portMAX_DELAY);
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <recordingFunction+0x104>)
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	f107 010c 	add.w	r1, r7, #12
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	f004 fefa 	bl	8006cbc <xQueueGenericSend>
		xQueueReceive(queueDataProcessing, &message, portMAX_DELAY);
 8001ec8:	e786      	b.n	8001dd8 <recordingFunction+0x8>
 8001eca:	bf00      	nop
 8001ecc:	20000448 	.word	0x20000448
 8001ed0:	200004a4 	.word	0x200004a4
 8001ed4:	20000450 	.word	0x20000450
 8001ed8:	000fffe8 	.word	0x000fffe8
 8001edc:	20000470 	.word	0x20000470

08001ee0 <receptionFunction>:
/**
* @brief Function implementing the receiveTask thread.
* @param argument: Not used
* @retval None
*/
void receptionFunction(void const * argument){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

	LIS3MDL_StoreData_t message;

	while(1){
		
		osSemaphoreWait(binarySemaphoreUARTHandle, osWaitForever);
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <receptionFunction+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 fc81 	bl	80067f8 <osSemaphoreWait>
			
		uint16_t measureAsk = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	81fb      	strh	r3, [r7, #14]
			
		if(DecodeReceivedData(&measureAsk)){
 8001efa:	f107 030e 	add.w	r3, r7, #14
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ffb8 	bl	8000e74 <DecodeReceivedData>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00e      	beq.n	8001f28 <receptionFunction+0x48>

			message.uid = measureAsk;
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 8001f0c:	823b      	strh	r3, [r7, #16]

			message.statusData = READ_DATA;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			// Send the data to the sendTask
			xQueueSend(queueDataProcessing, &message, portMAX_DELAY);
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <receptionFunction+0x68>)
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	f107 0110 	add.w	r1, r7, #16
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f22:	f004 fecb 	bl	8006cbc <xQueueGenericSend>
 8001f26:	e7df      	b.n	8001ee8 <receptionFunction+0x8>
		}

		else {

			message.statusData = UNKNOWN_ERROR;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			// Send the data to the sendTask
			xQueueSend(queueUsartSender, &message, portMAX_DELAY);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <receptionFunction+0x6c>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f107 0110 	add.w	r1, r7, #16
 8001f36:	2300      	movs	r3, #0
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	f004 febe 	bl	8006cbc <xQueueGenericSend>
	while(1){
 8001f40:	e7d2      	b.n	8001ee8 <receptionFunction+0x8>
 8001f42:	bf00      	nop
 8001f44:	20000444 	.word	0x20000444
 8001f48:	20000448 	.word	0x20000448
 8001f4c:	20000450 	.word	0x20000450

08001f50 <sendingFunction>:
/**
* @brief Function implementing the sendTask thread.
* @param argument: Not used
* @retval None
*/
void sendingFunction(void const * argument){
 8001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f52:	b099      	sub	sp, #100	; 0x64
 8001f54:	af10      	add	r7, sp, #64	; 0x40
 8001f56:	6078      	str	r0, [r7, #4]

	LIS3MDL_StoreData_t message;

	while(1){

		xQueueReceive(queueUsartSender, &message, portMAX_DELAY);
 8001f58:	4b9f      	ldr	r3, [pc, #636]	; (80021d8 <sendingFunction+0x288>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f107 0108 	add.w	r1, r7, #8
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	4618      	mov	r0, r3
 8001f66:	f005 f8b5 	bl	80070d4 <xQueueReceive>

		switch(message.statusData){
 8001f6a:	7f3b      	ldrb	r3, [r7, #28]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	f200 8121 	bhi.w	80021b4 <sendingFunction+0x264>
 8001f72:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <sendingFunction+0x28>)
 8001f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f78:	08002137 	.word	0x08002137
 8001f7c:	08002161 	.word	0x08002161
 8001f80:	0800218b 	.word	0x0800218b
 8001f84:	080021b5 	.word	0x080021b5
 8001f88:	080021b5 	.word	0x080021b5
 8001f8c:	080021b5 	.word	0x080021b5
 8001f90:	08001ff5 	.word	0x08001ff5
 8001f94:	08001fa1 	.word	0x08001fa1
 8001f98:	08001fcb 	.word	0x08001fcb
 8001f9c:	080021b5 	.word	0x080021b5

			case MEMORY_FULL:

				PrintString(huart1, "Memory full", 11);
 8001fa0:	4e8e      	ldr	r6, [pc, #568]	; (80021dc <sendingFunction+0x28c>)
 8001fa2:	230b      	movs	r3, #11
 8001fa4:	930e      	str	r3, [sp, #56]	; 0x38
 8001fa6:	4b8e      	ldr	r3, [pc, #568]	; (80021e0 <sendingFunction+0x290>)
 8001fa8:	930d      	str	r3, [sp, #52]	; 0x34
 8001faa:	466d      	mov	r5, sp
 8001fac:	f106 0410 	add.w	r4, r6, #16
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	602b      	str	r3, [r5, #0]
 8001fc0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001fc4:	f7fe ffca 	bl	8000f5c <PrintString>

			break;
 8001fc8:	e0f4      	b.n	80021b4 <sendingFunction+0x264>

			case WRONG_ID:

				PrintString(huart1, "Wrong ID", 8);
 8001fca:	4e84      	ldr	r6, [pc, #528]	; (80021dc <sendingFunction+0x28c>)
 8001fcc:	2308      	movs	r3, #8
 8001fce:	930e      	str	r3, [sp, #56]	; 0x38
 8001fd0:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <sendingFunction+0x294>)
 8001fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8001fd4:	466d      	mov	r5, sp
 8001fd6:	f106 0410 	add.w	r4, r6, #16
 8001fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	602b      	str	r3, [r5, #0]
 8001fea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001fee:	f7fe ffb5 	bl	8000f5c <PrintString>

			break;
 8001ff2:	e0df      	b.n	80021b4 <sendingFunction+0x264>

			case DATA_READ:

				PrintString(huart1, "Data sensor -> x:", 15);
 8001ff4:	4e79      	ldr	r6, [pc, #484]	; (80021dc <sendingFunction+0x28c>)
 8001ff6:	230f      	movs	r3, #15
 8001ff8:	930e      	str	r3, [sp, #56]	; 0x38
 8001ffa:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <sendingFunction+0x298>)
 8001ffc:	930d      	str	r3, [sp, #52]	; 0x34
 8001ffe:	466d      	mov	r5, sp
 8002000:	f106 0410 	add.w	r4, r6, #16
 8002004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	602b      	str	r3, [r5, #0]
 8002014:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002018:	f7fe ffa0 	bl	8000f5c <PrintString>

				PrintFloat(huart1, message.mag_x, 4);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4e6f      	ldr	r6, [pc, #444]	; (80021dc <sendingFunction+0x28c>)
 8002020:	2204      	movs	r2, #4
 8002022:	920e      	str	r2, [sp, #56]	; 0x38
 8002024:	930d      	str	r3, [sp, #52]	; 0x34
 8002026:	466d      	mov	r5, sp
 8002028:	f106 0410 	add.w	r4, r6, #16
 800202c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	602b      	str	r3, [r5, #0]
 800203c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002040:	f7fe ffc6 	bl	8000fd0 <PrintFloat>

				PrintString(huart1, " , y: ", 6);
 8002044:	4e65      	ldr	r6, [pc, #404]	; (80021dc <sendingFunction+0x28c>)
 8002046:	2306      	movs	r3, #6
 8002048:	930e      	str	r3, [sp, #56]	; 0x38
 800204a:	4b68      	ldr	r3, [pc, #416]	; (80021ec <sendingFunction+0x29c>)
 800204c:	930d      	str	r3, [sp, #52]	; 0x34
 800204e:	466d      	mov	r5, sp
 8002050:	f106 0410 	add.w	r4, r6, #16
 8002054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	602b      	str	r3, [r5, #0]
 8002064:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002068:	f7fe ff78 	bl	8000f5c <PrintString>

				PrintFloat(huart1, message.mag_y, 4);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4e5b      	ldr	r6, [pc, #364]	; (80021dc <sendingFunction+0x28c>)
 8002070:	2204      	movs	r2, #4
 8002072:	920e      	str	r2, [sp, #56]	; 0x38
 8002074:	930d      	str	r3, [sp, #52]	; 0x34
 8002076:	466d      	mov	r5, sp
 8002078:	f106 0410 	add.w	r4, r6, #16
 800207c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	602b      	str	r3, [r5, #0]
 800208c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002090:	f7fe ff9e 	bl	8000fd0 <PrintFloat>

				PrintString(huart1, " , z: ", 6);
 8002094:	4e51      	ldr	r6, [pc, #324]	; (80021dc <sendingFunction+0x28c>)
 8002096:	2306      	movs	r3, #6
 8002098:	930e      	str	r3, [sp, #56]	; 0x38
 800209a:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <sendingFunction+0x2a0>)
 800209c:	930d      	str	r3, [sp, #52]	; 0x34
 800209e:	466d      	mov	r5, sp
 80020a0:	f106 0410 	add.w	r4, r6, #16
 80020a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	602b      	str	r3, [r5, #0]
 80020b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020b8:	f7fe ff50 	bl	8000f5c <PrintString>

				PrintFloat(huart1, message.mag_z, 4);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	4e47      	ldr	r6, [pc, #284]	; (80021dc <sendingFunction+0x28c>)
 80020c0:	2204      	movs	r2, #4
 80020c2:	920e      	str	r2, [sp, #56]	; 0x38
 80020c4:	930d      	str	r3, [sp, #52]	; 0x34
 80020c6:	466d      	mov	r5, sp
 80020c8:	f106 0410 	add.w	r4, r6, #16
 80020cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	602b      	str	r3, [r5, #0]
 80020dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020e0:	f7fe ff76 	bl	8000fd0 <PrintFloat>

				PrintString(huart1, " , temp: ", 9);
 80020e4:	4e3d      	ldr	r6, [pc, #244]	; (80021dc <sendingFunction+0x28c>)
 80020e6:	2309      	movs	r3, #9
 80020e8:	930e      	str	r3, [sp, #56]	; 0x38
 80020ea:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <sendingFunction+0x2a4>)
 80020ec:	930d      	str	r3, [sp, #52]	; 0x34
 80020ee:	466d      	mov	r5, sp
 80020f0:	f106 0410 	add.w	r4, r6, #16
 80020f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	602b      	str	r3, [r5, #0]
 8002104:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002108:	f7fe ff28 	bl	8000f5c <PrintString>

				PrintFloat(huart1, message.temp, 4);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	4e33      	ldr	r6, [pc, #204]	; (80021dc <sendingFunction+0x28c>)
 8002110:	2204      	movs	r2, #4
 8002112:	920e      	str	r2, [sp, #56]	; 0x38
 8002114:	930d      	str	r3, [sp, #52]	; 0x34
 8002116:	466d      	mov	r5, sp
 8002118:	f106 0410 	add.w	r4, r6, #16
 800211c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	602b      	str	r3, [r5, #0]
 800212c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002130:	f7fe ff4e 	bl	8000fd0 <PrintFloat>

			break;
 8002134:	e03e      	b.n	80021b4 <sendingFunction+0x264>

			case UNKNOWN_ERROR:

				PrintString(huart1, "Unknown error", 13);
 8002136:	4e29      	ldr	r6, [pc, #164]	; (80021dc <sendingFunction+0x28c>)
 8002138:	230d      	movs	r3, #13
 800213a:	930e      	str	r3, [sp, #56]	; 0x38
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <sendingFunction+0x2a8>)
 800213e:	930d      	str	r3, [sp, #52]	; 0x34
 8002140:	466d      	mov	r5, sp
 8002142:	f106 0410 	add.w	r4, r6, #16
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800215a:	f7fe feff 	bl	8000f5c <PrintString>

			break;
 800215e:	e029      	b.n	80021b4 <sendingFunction+0x264>

			case LIS3MDL_ERROR:

				PrintString(huart1, "Lis3mdl error", 13);
 8002160:	4e1e      	ldr	r6, [pc, #120]	; (80021dc <sendingFunction+0x28c>)
 8002162:	230d      	movs	r3, #13
 8002164:	930e      	str	r3, [sp, #56]	; 0x38
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <sendingFunction+0x2ac>)
 8002168:	930d      	str	r3, [sp, #52]	; 0x34
 800216a:	466d      	mov	r5, sp
 800216c:	f106 0410 	add.w	r4, r6, #16
 8002170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	602b      	str	r3, [r5, #0]
 8002180:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002184:	f7fe feea 	bl	8000f5c <PrintString>

			break;
 8002188:	e014      	b.n	80021b4 <sendingFunction+0x264>

			case MEMORY_ERROR:

				PrintString(huart1, "Memory error", 12);
 800218a:	4e14      	ldr	r6, [pc, #80]	; (80021dc <sendingFunction+0x28c>)
 800218c:	230c      	movs	r3, #12
 800218e:	930e      	str	r3, [sp, #56]	; 0x38
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <sendingFunction+0x2b0>)
 8002192:	930d      	str	r3, [sp, #52]	; 0x34
 8002194:	466d      	mov	r5, sp
 8002196:	f106 0410 	add.w	r4, r6, #16
 800219a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800219e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	602b      	str	r3, [r5, #0]
 80021aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021ae:	f7fe fed5 	bl	8000f5c <PrintString>

			break;
 80021b2:	bf00      	nop
			case READ_DATA:
			case SAVE_DATA:
			break;
		}

		PrintEnter(huart1);
 80021b4:	4e09      	ldr	r6, [pc, #36]	; (80021dc <sendingFunction+0x28c>)
 80021b6:	466d      	mov	r5, sp
 80021b8:	f106 0410 	add.w	r4, r6, #16
 80021bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	602b      	str	r3, [r5, #0]
 80021cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021d0:	f7fe feda 	bl	8000f88 <PrintEnter>
		xQueueReceive(queueUsartSender, &message, portMAX_DELAY);
 80021d4:	e6c0      	b.n	8001f58 <sendingFunction+0x8>
 80021d6:	bf00      	nop
 80021d8:	20000450 	.word	0x20000450
 80021dc:	200003ac 	.word	0x200003ac
 80021e0:	08009200 	.word	0x08009200
 80021e4:	0800920c 	.word	0x0800920c
 80021e8:	08009218 	.word	0x08009218
 80021ec:	0800922c 	.word	0x0800922c
 80021f0:	08009234 	.word	0x08009234
 80021f4:	0800923c 	.word	0x0800923c
 80021f8:	08009248 	.word	0x08009248
 80021fc:	08009258 	.word	0x08009258
 8002200:	08009268 	.word	0x08009268

08002204 <HAL_TIM_PeriodElapsedCallback>:
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002216:	f000 fa3b 	bl	8002690 <HAL_IncTick>
	}
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40012c00 	.word	0x40012c00

08002228 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
	__disable_irq();
	while (1){}
 8002230:	e7fe      	b.n	8002230 <Error_Handler+0x8>
	...

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_MspInit+0x68>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_MspInit+0x68>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6193      	str	r3, [r2, #24]
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_MspInit+0x68>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_MspInit+0x68>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_MspInit+0x68>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_MspInit+0x68>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	210f      	movs	r1, #15
 800226e:	f06f 0001 	mvn.w	r0, #1
 8002272:	f000 fb26 	bl	80028c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_MspInit+0x6c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_MspInit+0x6c>)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000

080022a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_I2C_MspInit+0x70>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d123      	bne.n	800230c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_I2C_MspInit+0x74>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <HAL_I2C_MspInit+0x74>)
 80022ca:	f043 0308 	orr.w	r3, r3, #8
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_I2C_MspInit+0x74>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022dc:	23c0      	movs	r3, #192	; 0xc0
 80022de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e0:	2312      	movs	r3, #18
 80022e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	4619      	mov	r1, r3
 80022ee:	480b      	ldr	r0, [pc, #44]	; (800231c <HAL_I2C_MspInit+0x78>)
 80022f0:	f000 fdbe 	bl	8002e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_I2C_MspInit+0x74>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4a07      	ldr	r2, [pc, #28]	; (8002318 <HAL_I2C_MspInit+0x74>)
 80022fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022fe:	61d3      	str	r3, [r2, #28]
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_I2C_MspInit+0x74>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800230c:	bf00      	nop
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40005400 	.word	0x40005400
 8002318:	40021000 	.word	0x40021000
 800231c:	40010c00 	.word	0x40010c00

08002320 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_SPI_MspInit+0x88>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d12f      	bne.n	80023a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <HAL_SPI_MspInit+0x8c>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <HAL_SPI_MspInit+0x8c>)
 8002346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_SPI_MspInit+0x8c>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_SPI_MspInit+0x8c>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a13      	ldr	r2, [pc, #76]	; (80023ac <HAL_SPI_MspInit+0x8c>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_SPI_MspInit+0x8c>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002370:	23a0      	movs	r3, #160	; 0xa0
 8002372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	4619      	mov	r1, r3
 8002382:	480b      	ldr	r0, [pc, #44]	; (80023b0 <HAL_SPI_MspInit+0x90>)
 8002384:	f000 fd74 	bl	8002e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002388:	2340      	movs	r3, #64	; 0x40
 800238a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	4619      	mov	r1, r3
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <HAL_SPI_MspInit+0x90>)
 800239c:	f000 fd68 	bl	8002e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40013000 	.word	0x40013000
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010800 	.word	0x40010800

080023b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a33      	ldr	r2, [pc, #204]	; (800249c <HAL_UART_MspInit+0xe8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d15f      	bne.n	8002494 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <HAL_UART_MspInit+0xec>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <HAL_UART_MspInit+0xec>)
 80023da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_UART_MspInit+0xec>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <HAL_UART_MspInit+0xec>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <HAL_UART_MspInit+0xec>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_UART_MspInit+0xec>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4619      	mov	r1, r3
 8002418:	4822      	ldr	r0, [pc, #136]	; (80024a4 <HAL_UART_MspInit+0xf0>)
 800241a:	f000 fd29 	bl	8002e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800241e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	4619      	mov	r1, r3
 8002432:	481c      	ldr	r0, [pc, #112]	; (80024a4 <HAL_UART_MspInit+0xf0>)
 8002434:	f000 fd1c 	bl	8002e70 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_UART_MspInit+0xf8>)
 800243c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 8002464:	2200      	movs	r2, #0
 8002466:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002468:	480f      	ldr	r0, [pc, #60]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 800246a:	f000 fa63 	bl	8002934 <HAL_DMA_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002474:	f7ff fed8 	bl	8002228 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_UART_MspInit+0xf4>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2105      	movs	r1, #5
 8002488:	2025      	movs	r0, #37	; 0x25
 800248a:	f000 fa1a 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800248e:	2025      	movs	r0, #37	; 0x25
 8002490:	f000 fa33 	bl	80028fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002494:	bf00      	nop
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40013800 	.word	0x40013800
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010800 	.word	0x40010800
 80024a8:	200003f0 	.word	0x200003f0
 80024ac:	40020058 	.word	0x40020058

080024b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024c6:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_InitTick+0xd0>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <HAL_InitTick+0xd0>)
 80024cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024d0:	6193      	str	r3, [r2, #24]
 80024d2:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_InitTick+0xd0>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024de:	f107 020c 	add.w	r2, r7, #12
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fa71 	bl	80049d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024ee:	f002 fa5b 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 80024f2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	4a23      	ldr	r2, [pc, #140]	; (8002584 <HAL_InitTick+0xd4>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	0c9b      	lsrs	r3, r3, #18
 80024fe:	3b01      	subs	r3, #1
 8002500:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002502:	4b21      	ldr	r3, [pc, #132]	; (8002588 <HAL_InitTick+0xd8>)
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <HAL_InitTick+0xdc>)
 8002506:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <HAL_InitTick+0xd8>)
 800250a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800250e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_InitTick+0xd8>)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_InitTick+0xd8>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_InitTick+0xd8>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_InitTick+0xd8>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002528:	4817      	ldr	r0, [pc, #92]	; (8002588 <HAL_InitTick+0xd8>)
 800252a:	f003 f80b 	bl	8005544 <HAL_TIM_Base_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002538:	2b00      	cmp	r3, #0
 800253a:	d11b      	bne.n	8002574 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800253c:	4812      	ldr	r0, [pc, #72]	; (8002588 <HAL_InitTick+0xd8>)
 800253e:	f003 f859 	bl	80055f4 <HAL_TIM_Base_Start_IT>
 8002542:	4603      	mov	r3, r0
 8002544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002548:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002550:	2019      	movs	r0, #25
 8002552:	f000 f9d2 	bl	80028fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d808      	bhi.n	800256e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800255c:	2200      	movs	r2, #0
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	2019      	movs	r0, #25
 8002562:	f000 f9ae 	bl	80028c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_InitTick+0xe0>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e002      	b.n	8002574 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002578:	4618      	mov	r0, r3
 800257a:	3730      	adds	r7, #48	; 0x30
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	431bde83 	.word	0x431bde83
 8002588:	200004b8 	.word	0x200004b8
 800258c:	40012c00 	.word	0x40012c00
 8002590:	20000004 	.word	0x20000004

08002594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <NMI_Handler+0x4>

0800259a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <HardFault_Handler+0x4>

080025a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <MemManage_Handler+0x4>

080025a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025aa:	e7fe      	b.n	80025aa <BusFault_Handler+0x4>

080025ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <UsageFault_Handler+0x4>

080025b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <DMA1_Channel5_IRQHandler+0x10>)
 80025c6:	f000 fb1f 	bl	8002c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200003f0 	.word	0x200003f0

080025d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <TIM1_UP_IRQHandler+0x10>)
 80025da:	f003 f85d 	bl	8005698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200004b8 	.word	0x200004b8

080025e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <USART1_IRQHandler+0x10>)
 80025ee:	f003 fb21 	bl	8005c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200003ac 	.word	0x200003ac

080025fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8002600:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002604:	f000 fdd0 	bl	80031a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800261a:	490d      	ldr	r1, [pc, #52]	; (8002650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800261c:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002620:	e002      	b.n	8002628 <LoopCopyDataInit>

08002622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002626:	3304      	adds	r3, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800262c:	d3f9      	bcc.n	8002622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002630:	4c0a      	ldr	r4, [pc, #40]	; (800265c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002634:	e001      	b.n	800263a <LoopFillZerobss>

08002636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002638:	3204      	adds	r2, #4

0800263a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800263c:	d3fb      	bcc.n	8002636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800263e:	f7ff ffe5 	bl	800260c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002642:	f006 fc55 	bl	8008ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002646:	f7ff f895 	bl	8001774 <main>
  bx lr
 800264a:	4770      	bx	lr
  ldr r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002650:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002654:	080093d8 	.word	0x080093d8
  ldr r2, =_sbss
 8002658:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800265c:	20001250 	.word	0x20001250

08002660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC1_2_IRQHandler>
	...

08002664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_Init+0x28>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_Init+0x28>)
 800266e:	f043 0310 	orr.w	r3, r3, #16
 8002672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002674:	2003      	movs	r0, #3
 8002676:	f000 f919 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff ff18 	bl	80024b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002680:	f7ff fdd8 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000

08002690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_IncTick+0x1c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_IncTick+0x20>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <HAL_IncTick+0x20>)
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000500 	.word	0x20000500

080026b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <HAL_GetTick+0x10>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	20000500 	.word	0x20000500

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fff0 	bl	80026b4 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d005      	beq.n	80026ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_Delay+0x44>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ee:	bf00      	nop
 80026f0:	f7ff ffe0 	bl	80026b4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d8f7      	bhi.n	80026f0 <HAL_Delay+0x28>
  {
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000008 	.word	0x20000008

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4906      	ldr	r1, [pc, #24]	; (80027a8 <__NVIC_EnableIRQ+0x34>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db12      	blt.n	80027e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	490a      	ldr	r1, [pc, #40]	; (80027f0 <__NVIC_DisableIRQ+0x44>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2001      	movs	r0, #1
 80027ce:	fa00 f202 	lsl.w	r2, r0, r2
 80027d2:	3320      	adds	r3, #32
 80027d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027d8:	f3bf 8f4f 	dsb	sy
}
 80027dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027de:	f3bf 8f6f 	isb	sy
}
 80027e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000e100 	.word	0xe000e100

080027f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	6039      	str	r1, [r7, #0]
 80027fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	2b00      	cmp	r3, #0
 8002806:	db0a      	blt.n	800281e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	490c      	ldr	r1, [pc, #48]	; (8002840 <__NVIC_SetPriority+0x4c>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	0112      	lsls	r2, r2, #4
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	440b      	add	r3, r1
 8002818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800281c:	e00a      	b.n	8002834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4908      	ldr	r1, [pc, #32]	; (8002844 <__NVIC_SetPriority+0x50>)
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3b04      	subs	r3, #4
 800282c:	0112      	lsls	r2, r2, #4
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	440b      	add	r3, r1
 8002832:	761a      	strb	r2, [r3, #24]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f1c3 0307 	rsb	r3, r3, #7
 8002862:	2b04      	cmp	r3, #4
 8002864:	bf28      	it	cs
 8002866:	2304      	movcs	r3, #4
 8002868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3304      	adds	r3, #4
 800286e:	2b06      	cmp	r3, #6
 8002870:	d902      	bls.n	8002878 <NVIC_EncodePriority+0x30>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3b03      	subs	r3, #3
 8002876:	e000      	b.n	800287a <NVIC_EncodePriority+0x32>
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	401a      	ands	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002890:	f04f 31ff 	mov.w	r1, #4294967295
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43d9      	mvns	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	4313      	orrs	r3, r2
         );
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff2b 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d4:	f7ff ff40 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7ff ffb2 	bl	8002848 <NVIC_EncodePriority>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff81 	bl	80027f4 <__NVIC_SetPriority>
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff33 	bl	8002774 <__NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff41 	bl	80027ac <__NVIC_DisableIRQ>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e043      	b.n	80029d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_DMA_Init+0xa8>)
 8002952:	4413      	add	r3, r2
 8002954:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <HAL_DMA_Init+0xac>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	009a      	lsls	r2, r3, #2
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <HAL_DMA_Init+0xb0>)
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800297e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002982:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	bffdfff8 	.word	0xbffdfff8
 80029e0:	cccccccd 	.word	0xcccccccd
 80029e4:	40020000 	.word	0x40020000

080029e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_DMA_Start_IT+0x20>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e04a      	b.n	8002a9e <HAL_DMA_Start_IT+0xb6>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d13a      	bne.n	8002a90 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f9e8 	bl	8002e14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 020e 	orr.w	r2, r2, #14
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e00f      	b.n	8002a7e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0204 	bic.w	r2, r2, #4
 8002a6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 020a 	orr.w	r2, r2, #10
 8002a7c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e005      	b.n	8002a9c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d008      	beq.n	8002ace <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e020      	b.n	8002b10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 020e 	bic.w	r2, r2, #14
 8002adc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f202 	lsl.w	r2, r1, r2
 8002afc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d005      	beq.n	8002b3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2204      	movs	r2, #4
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	e051      	b.n	8002be2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 020e 	bic.w	r2, r2, #14
 8002b4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a22      	ldr	r2, [pc, #136]	; (8002bec <HAL_DMA_Abort_IT+0xd0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d029      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xa0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a20      	ldr	r2, [pc, #128]	; (8002bf0 <HAL_DMA_Abort_IT+0xd4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d022      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x9c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <HAL_DMA_Abort_IT+0xd8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d01a      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x96>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_DMA_Abort_IT+0xdc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d012      	beq.n	8002bac <HAL_DMA_Abort_IT+0x90>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <HAL_DMA_Abort_IT+0xe0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_DMA_Abort_IT+0x8a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <HAL_DMA_Abort_IT+0xe4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d102      	bne.n	8002ba0 <HAL_DMA_Abort_IT+0x84>
 8002b9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b9e:	e00e      	b.n	8002bbe <HAL_DMA_Abort_IT+0xa2>
 8002ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba4:	e00b      	b.n	8002bbe <HAL_DMA_Abort_IT+0xa2>
 8002ba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002baa:	e008      	b.n	8002bbe <HAL_DMA_Abort_IT+0xa2>
 8002bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb0:	e005      	b.n	8002bbe <HAL_DMA_Abort_IT+0xa2>
 8002bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb6:	e002      	b.n	8002bbe <HAL_DMA_Abort_IT+0xa2>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	e000      	b.n	8002bbe <HAL_DMA_Abort_IT+0xa2>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	4a11      	ldr	r2, [pc, #68]	; (8002c04 <HAL_DMA_Abort_IT+0xe8>)
 8002bc0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
    } 
  }
  return status;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40020008 	.word	0x40020008
 8002bf0:	4002001c 	.word	0x4002001c
 8002bf4:	40020030 	.word	0x40020030
 8002bf8:	40020044 	.word	0x40020044
 8002bfc:	40020058 	.word	0x40020058
 8002c00:	4002006c 	.word	0x4002006c
 8002c04:	40020000 	.word	0x40020000

08002c08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2204      	movs	r2, #4
 8002c26:	409a      	lsls	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d04f      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0xc8>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d04a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0204 	bic.w	r2, r2, #4
 8002c56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a66      	ldr	r2, [pc, #408]	; (8002df8 <HAL_DMA_IRQHandler+0x1f0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d029      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xae>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_DMA_IRQHandler+0x1f4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xaa>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a63      	ldr	r2, [pc, #396]	; (8002e00 <HAL_DMA_IRQHandler+0x1f8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01a      	beq.n	8002cac <HAL_DMA_IRQHandler+0xa4>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a62      	ldr	r2, [pc, #392]	; (8002e04 <HAL_DMA_IRQHandler+0x1fc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d012      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x9e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a60      	ldr	r2, [pc, #384]	; (8002e08 <HAL_DMA_IRQHandler+0x200>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00a      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x98>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a5f      	ldr	r2, [pc, #380]	; (8002e0c <HAL_DMA_IRQHandler+0x204>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d102      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x92>
 8002c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c98:	e00e      	b.n	8002cb8 <HAL_DMA_IRQHandler+0xb0>
 8002c9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c9e:	e00b      	b.n	8002cb8 <HAL_DMA_IRQHandler+0xb0>
 8002ca0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ca4:	e008      	b.n	8002cb8 <HAL_DMA_IRQHandler+0xb0>
 8002ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002caa:	e005      	b.n	8002cb8 <HAL_DMA_IRQHandler+0xb0>
 8002cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb0:	e002      	b.n	8002cb8 <HAL_DMA_IRQHandler+0xb0>
 8002cb2:	2340      	movs	r3, #64	; 0x40
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_IRQHandler+0xb0>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <HAL_DMA_IRQHandler+0x208>)
 8002cba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8094 	beq.w	8002dee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cce:	e08e      	b.n	8002dee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d056      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x186>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d051      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10b      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 020a 	bic.w	r2, r2, #10
 8002d06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <HAL_DMA_IRQHandler+0x1f0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d029      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x166>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a37      	ldr	r2, [pc, #220]	; (8002dfc <HAL_DMA_IRQHandler+0x1f4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d022      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x162>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a35      	ldr	r2, [pc, #212]	; (8002e00 <HAL_DMA_IRQHandler+0x1f8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x15c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a34      	ldr	r2, [pc, #208]	; (8002e04 <HAL_DMA_IRQHandler+0x1fc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d012      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x156>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a32      	ldr	r2, [pc, #200]	; (8002e08 <HAL_DMA_IRQHandler+0x200>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x150>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_DMA_IRQHandler+0x204>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d102      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x14a>
 8002d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d50:	e00e      	b.n	8002d70 <HAL_DMA_IRQHandler+0x168>
 8002d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d56:	e00b      	b.n	8002d70 <HAL_DMA_IRQHandler+0x168>
 8002d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d5c:	e008      	b.n	8002d70 <HAL_DMA_IRQHandler+0x168>
 8002d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d62:	e005      	b.n	8002d70 <HAL_DMA_IRQHandler+0x168>
 8002d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d68:	e002      	b.n	8002d70 <HAL_DMA_IRQHandler+0x168>
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e000      	b.n	8002d70 <HAL_DMA_IRQHandler+0x168>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_DMA_IRQHandler+0x208>)
 8002d72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d034      	beq.n	8002dee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d8c:	e02f      	b.n	8002dee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2208      	movs	r2, #8
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d028      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x1e8>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d023      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 020e 	bic.w	r2, r2, #14
 8002db6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	4798      	blx	r3
    }
  }
  return;
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
}
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40020008 	.word	0x40020008
 8002dfc:	4002001c 	.word	0x4002001c
 8002e00:	40020030 	.word	0x40020030
 8002e04:	40020044 	.word	0x40020044
 8002e08:	40020058 	.word	0x40020058
 8002e0c:	4002006c 	.word	0x4002006c
 8002e10:	40020000 	.word	0x40020000

08002e14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d108      	bne.n	8002e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e52:	e007      	b.n	8002e64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	60da      	str	r2, [r3, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b08b      	sub	sp, #44	; 0x2c
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e82:	e169      	b.n	8003158 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e84:	2201      	movs	r2, #1
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f040 8158 	bne.w	8003152 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4a9a      	ldr	r2, [pc, #616]	; (8003110 <HAL_GPIO_Init+0x2a0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d05e      	beq.n	8002f6a <HAL_GPIO_Init+0xfa>
 8002eac:	4a98      	ldr	r2, [pc, #608]	; (8003110 <HAL_GPIO_Init+0x2a0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d875      	bhi.n	8002f9e <HAL_GPIO_Init+0x12e>
 8002eb2:	4a98      	ldr	r2, [pc, #608]	; (8003114 <HAL_GPIO_Init+0x2a4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d058      	beq.n	8002f6a <HAL_GPIO_Init+0xfa>
 8002eb8:	4a96      	ldr	r2, [pc, #600]	; (8003114 <HAL_GPIO_Init+0x2a4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d86f      	bhi.n	8002f9e <HAL_GPIO_Init+0x12e>
 8002ebe:	4a96      	ldr	r2, [pc, #600]	; (8003118 <HAL_GPIO_Init+0x2a8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d052      	beq.n	8002f6a <HAL_GPIO_Init+0xfa>
 8002ec4:	4a94      	ldr	r2, [pc, #592]	; (8003118 <HAL_GPIO_Init+0x2a8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d869      	bhi.n	8002f9e <HAL_GPIO_Init+0x12e>
 8002eca:	4a94      	ldr	r2, [pc, #592]	; (800311c <HAL_GPIO_Init+0x2ac>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d04c      	beq.n	8002f6a <HAL_GPIO_Init+0xfa>
 8002ed0:	4a92      	ldr	r2, [pc, #584]	; (800311c <HAL_GPIO_Init+0x2ac>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d863      	bhi.n	8002f9e <HAL_GPIO_Init+0x12e>
 8002ed6:	4a92      	ldr	r2, [pc, #584]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d046      	beq.n	8002f6a <HAL_GPIO_Init+0xfa>
 8002edc:	4a90      	ldr	r2, [pc, #576]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d85d      	bhi.n	8002f9e <HAL_GPIO_Init+0x12e>
 8002ee2:	2b12      	cmp	r3, #18
 8002ee4:	d82a      	bhi.n	8002f3c <HAL_GPIO_Init+0xcc>
 8002ee6:	2b12      	cmp	r3, #18
 8002ee8:	d859      	bhi.n	8002f9e <HAL_GPIO_Init+0x12e>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <HAL_GPIO_Init+0x80>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f6b 	.word	0x08002f6b
 8002ef4:	08002f45 	.word	0x08002f45
 8002ef8:	08002f57 	.word	0x08002f57
 8002efc:	08002f99 	.word	0x08002f99
 8002f00:	08002f9f 	.word	0x08002f9f
 8002f04:	08002f9f 	.word	0x08002f9f
 8002f08:	08002f9f 	.word	0x08002f9f
 8002f0c:	08002f9f 	.word	0x08002f9f
 8002f10:	08002f9f 	.word	0x08002f9f
 8002f14:	08002f9f 	.word	0x08002f9f
 8002f18:	08002f9f 	.word	0x08002f9f
 8002f1c:	08002f9f 	.word	0x08002f9f
 8002f20:	08002f9f 	.word	0x08002f9f
 8002f24:	08002f9f 	.word	0x08002f9f
 8002f28:	08002f9f 	.word	0x08002f9f
 8002f2c:	08002f9f 	.word	0x08002f9f
 8002f30:	08002f9f 	.word	0x08002f9f
 8002f34:	08002f4d 	.word	0x08002f4d
 8002f38:	08002f61 	.word	0x08002f61
 8002f3c:	4a79      	ldr	r2, [pc, #484]	; (8003124 <HAL_GPIO_Init+0x2b4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f42:	e02c      	b.n	8002f9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	623b      	str	r3, [r7, #32]
          break;
 8002f4a:	e029      	b.n	8002fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	3304      	adds	r3, #4
 8002f52:	623b      	str	r3, [r7, #32]
          break;
 8002f54:	e024      	b.n	8002fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	623b      	str	r3, [r7, #32]
          break;
 8002f5e:	e01f      	b.n	8002fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	330c      	adds	r3, #12
 8002f66:	623b      	str	r3, [r7, #32]
          break;
 8002f68:	e01a      	b.n	8002fa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f72:	2304      	movs	r3, #4
 8002f74:	623b      	str	r3, [r7, #32]
          break;
 8002f76:	e013      	b.n	8002fa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f80:	2308      	movs	r3, #8
 8002f82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	611a      	str	r2, [r3, #16]
          break;
 8002f8a:	e009      	b.n	8002fa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	615a      	str	r2, [r3, #20]
          break;
 8002f96:	e003      	b.n	8002fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
          break;
 8002f9c:	e000      	b.n	8002fa0 <HAL_GPIO_Init+0x130>
          break;
 8002f9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2bff      	cmp	r3, #255	; 0xff
 8002fa4:	d801      	bhi.n	8002faa <HAL_GPIO_Init+0x13a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	e001      	b.n	8002fae <HAL_GPIO_Init+0x13e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2bff      	cmp	r3, #255	; 0xff
 8002fb4:	d802      	bhi.n	8002fbc <HAL_GPIO_Init+0x14c>
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	e002      	b.n	8002fc2 <HAL_GPIO_Init+0x152>
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	3b08      	subs	r3, #8
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	210f      	movs	r1, #15
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	6a39      	ldr	r1, [r7, #32]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80b1 	beq.w	8003152 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ff0:	4b4d      	ldr	r3, [pc, #308]	; (8003128 <HAL_GPIO_Init+0x2b8>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	4a4c      	ldr	r2, [pc, #304]	; (8003128 <HAL_GPIO_Init+0x2b8>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6193      	str	r3, [r2, #24]
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_GPIO_Init+0x2b8>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003008:	4a48      	ldr	r2, [pc, #288]	; (800312c <HAL_GPIO_Init+0x2bc>)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	220f      	movs	r2, #15
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4013      	ands	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a40      	ldr	r2, [pc, #256]	; (8003130 <HAL_GPIO_Init+0x2c0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d013      	beq.n	800305c <HAL_GPIO_Init+0x1ec>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3f      	ldr	r2, [pc, #252]	; (8003134 <HAL_GPIO_Init+0x2c4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00d      	beq.n	8003058 <HAL_GPIO_Init+0x1e8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3e      	ldr	r2, [pc, #248]	; (8003138 <HAL_GPIO_Init+0x2c8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d007      	beq.n	8003054 <HAL_GPIO_Init+0x1e4>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a3d      	ldr	r2, [pc, #244]	; (800313c <HAL_GPIO_Init+0x2cc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d101      	bne.n	8003050 <HAL_GPIO_Init+0x1e0>
 800304c:	2303      	movs	r3, #3
 800304e:	e006      	b.n	800305e <HAL_GPIO_Init+0x1ee>
 8003050:	2304      	movs	r3, #4
 8003052:	e004      	b.n	800305e <HAL_GPIO_Init+0x1ee>
 8003054:	2302      	movs	r3, #2
 8003056:	e002      	b.n	800305e <HAL_GPIO_Init+0x1ee>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_GPIO_Init+0x1ee>
 800305c:	2300      	movs	r3, #0
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	f002 0203 	and.w	r2, r2, #3
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	4093      	lsls	r3, r2
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800306e:	492f      	ldr	r1, [pc, #188]	; (800312c <HAL_GPIO_Init+0x2bc>)
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003088:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	492c      	ldr	r1, [pc, #176]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003096:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	43db      	mvns	r3, r3
 800309e:	4928      	ldr	r1, [pc, #160]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4922      	ldr	r1, [pc, #136]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	491e      	ldr	r1, [pc, #120]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4918      	ldr	r1, [pc, #96]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	4914      	ldr	r1, [pc, #80]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d021      	beq.n	8003144 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	490e      	ldr	r1, [pc, #56]	; (8003140 <HAL_GPIO_Init+0x2d0>)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	60cb      	str	r3, [r1, #12]
 800310c:	e021      	b.n	8003152 <HAL_GPIO_Init+0x2e2>
 800310e:	bf00      	nop
 8003110:	10320000 	.word	0x10320000
 8003114:	10310000 	.word	0x10310000
 8003118:	10220000 	.word	0x10220000
 800311c:	10210000 	.word	0x10210000
 8003120:	10120000 	.word	0x10120000
 8003124:	10110000 	.word	0x10110000
 8003128:	40021000 	.word	0x40021000
 800312c:	40010000 	.word	0x40010000
 8003130:	40010800 	.word	0x40010800
 8003134:	40010c00 	.word	0x40010c00
 8003138:	40011000 	.word	0x40011000
 800313c:	40011400 	.word	0x40011400
 8003140:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_GPIO_Init+0x304>)
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	43db      	mvns	r3, r3
 800314c:	4909      	ldr	r1, [pc, #36]	; (8003174 <HAL_GPIO_Init+0x304>)
 800314e:	4013      	ands	r3, r2
 8003150:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	3301      	adds	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	f47f ae8e 	bne.w	8002e84 <HAL_GPIO_Init+0x14>
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	372c      	adds	r7, #44	; 0x2c
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40010400 	.word	0x40010400

08003178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	807b      	strh	r3, [r7, #2]
 8003184:	4613      	mov	r3, r2
 8003186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003188:	787b      	ldrb	r3, [r7, #1]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800318e:	887a      	ldrh	r2, [r7, #2]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003194:	e003      	b.n	800319e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003196:	887b      	ldrh	r3, [r7, #2]
 8003198:	041a      	lsls	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	611a      	str	r2, [r3, #16]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fd80 	bl	8001ccc <HAL_GPIO_EXTI_Callback>
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e12b      	b.n	8003442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff f850 	bl	80022a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800323c:	f001 fba0 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 8003240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a81      	ldr	r2, [pc, #516]	; (800344c <HAL_I2C_Init+0x274>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d807      	bhi.n	800325c <HAL_I2C_Init+0x84>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a80      	ldr	r2, [pc, #512]	; (8003450 <HAL_I2C_Init+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	bf94      	ite	ls
 8003254:	2301      	movls	r3, #1
 8003256:	2300      	movhi	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e006      	b.n	800326a <HAL_I2C_Init+0x92>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a7d      	ldr	r2, [pc, #500]	; (8003454 <HAL_I2C_Init+0x27c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	bf94      	ite	ls
 8003264:	2301      	movls	r3, #1
 8003266:	2300      	movhi	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0e7      	b.n	8003442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a78      	ldr	r2, [pc, #480]	; (8003458 <HAL_I2C_Init+0x280>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0c9b      	lsrs	r3, r3, #18
 800327c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a6a      	ldr	r2, [pc, #424]	; (800344c <HAL_I2C_Init+0x274>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d802      	bhi.n	80032ac <HAL_I2C_Init+0xd4>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	3301      	adds	r3, #1
 80032aa:	e009      	b.n	80032c0 <HAL_I2C_Init+0xe8>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	4a69      	ldr	r2, [pc, #420]	; (800345c <HAL_I2C_Init+0x284>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	3301      	adds	r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	495c      	ldr	r1, [pc, #368]	; (800344c <HAL_I2C_Init+0x274>)
 80032dc:	428b      	cmp	r3, r1
 80032de:	d819      	bhi.n	8003314 <HAL_I2C_Init+0x13c>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e59      	subs	r1, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ee:	1c59      	adds	r1, r3, #1
 80032f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032f4:	400b      	ands	r3, r1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_I2C_Init+0x138>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1e59      	subs	r1, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fbb1 f3f3 	udiv	r3, r1, r3
 8003308:	3301      	adds	r3, #1
 800330a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330e:	e051      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003310:	2304      	movs	r3, #4
 8003312:	e04f      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d111      	bne.n	8003340 <HAL_I2C_Init+0x168>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e012      	b.n	8003366 <HAL_I2C_Init+0x18e>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1e58      	subs	r0, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	0099      	lsls	r1, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Init+0x196>
 800336a:	2301      	movs	r3, #1
 800336c:	e022      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <HAL_I2C_Init+0x1bc>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1e58      	subs	r0, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	440b      	add	r3, r1
 8003384:	fbb0 f3f3 	udiv	r3, r0, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003392:	e00f      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e58      	subs	r0, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	6809      	ldr	r1, [r1, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6911      	ldr	r1, [r2, #16]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68d2      	ldr	r2, [r2, #12]
 80033ee:	4311      	orrs	r1, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	000186a0 	.word	0x000186a0
 8003450:	001e847f 	.word	0x001e847f
 8003454:	003d08ff 	.word	0x003d08ff
 8003458:	431bde83 	.word	0x431bde83
 800345c:	10624dd3 	.word	0x10624dd3

08003460 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800347a:	f7ff f91b 	bl	80026b4 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b20      	cmp	r3, #32
 800348a:	f040 80d9 	bne.w	8003640 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2319      	movs	r3, #25
 8003494:	2201      	movs	r2, #1
 8003496:	496d      	ldr	r1, [pc, #436]	; (800364c <HAL_I2C_Mem_Write+0x1ec>)
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fcc1 	bl	8003e20 <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
 80034a6:	e0cc      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2C_Mem_Write+0x56>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e0c5      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d007      	beq.n	80034dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2221      	movs	r2, #33	; 0x21
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2240      	movs	r2, #64	; 0x40
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800350c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a4d      	ldr	r2, [pc, #308]	; (8003650 <HAL_I2C_Mem_Write+0x1f0>)
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800351e:	88f8      	ldrh	r0, [r7, #6]
 8003520:	893a      	ldrh	r2, [r7, #8]
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4603      	mov	r3, r0
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 faf8 	bl	8003b24 <I2C_RequestMemoryWrite>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d052      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e081      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fd42 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b04      	cmp	r3, #4
 8003554:	d107      	bne.n	8003566 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06b      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d11b      	bne.n	80035e0 <HAL_I2C_Mem_Write+0x180>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d017      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1aa      	bne.n	800353e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fd2e 	bl	800404e <I2C_WaitOnBTFFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d107      	bne.n	8003610 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e016      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	00100002 	.word	0x00100002
 8003650:	ffff0000 	.word	0xffff0000

08003654 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	; 0x30
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4603      	mov	r3, r0
 8003664:	817b      	strh	r3, [r7, #10]
 8003666:	460b      	mov	r3, r1
 8003668:	813b      	strh	r3, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003672:	f7ff f81f 	bl	80026b4 <HAL_GetTick>
 8003676:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b20      	cmp	r3, #32
 8003682:	f040 8244 	bne.w	8003b0e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2319      	movs	r3, #25
 800368c:	2201      	movs	r2, #1
 800368e:	4982      	ldr	r1, [pc, #520]	; (8003898 <HAL_I2C_Mem_Read+0x244>)
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fbc5 	bl	8003e20 <I2C_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
 800369e:	e237      	b.n	8003b10 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_I2C_Mem_Read+0x5a>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e230      	b.n	8003b10 <HAL_I2C_Mem_Read+0x4bc>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d007      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2222      	movs	r2, #34	; 0x22
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2240      	movs	r2, #64	; 0x40
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003704:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4a62      	ldr	r2, [pc, #392]	; (800389c <HAL_I2C_Mem_Read+0x248>)
 8003714:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003716:	88f8      	ldrh	r0, [r7, #6]
 8003718:	893a      	ldrh	r2, [r7, #8]
 800371a:	8979      	ldrh	r1, [r7, #10]
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	4603      	mov	r3, r0
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fa92 	bl	8003c50 <I2C_RequestMemoryRead>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e1ec      	b.n	8003b10 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d113      	bne.n	8003766 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e1c0      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376a:	2b01      	cmp	r3, #1
 800376c:	d11e      	bne.n	80037ac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800377e:	b672      	cpsid	i
}
 8003780:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037a8:	b662      	cpsie	i
}
 80037aa:	e035      	b.n	8003818 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d11e      	bne.n	80037f2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037c4:	b672      	cpsid	i
}
 80037c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037ee:	b662      	cpsie	i
}
 80037f0:	e012      	b.n	8003818 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003800:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003818:	e166      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	2b03      	cmp	r3, #3
 8003820:	f200 811f 	bhi.w	8003a62 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	2b01      	cmp	r3, #1
 800382a:	d123      	bne.n	8003874 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fc4d 	bl	80040d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e167      	b.n	8003b10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003872:	e139      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	2b02      	cmp	r3, #2
 800387a:	d152      	bne.n	8003922 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	2200      	movs	r2, #0
 8003884:	4906      	ldr	r1, [pc, #24]	; (80038a0 <HAL_I2C_Mem_Read+0x24c>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 faca 	bl	8003e20 <I2C_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e13c      	b.n	8003b10 <HAL_I2C_Mem_Read+0x4bc>
 8003896:	bf00      	nop
 8003898:	00100002 	.word	0x00100002
 800389c:	ffff0000 	.word	0xffff0000
 80038a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038a4:	b672      	cpsid	i
}
 80038a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038ea:	b662      	cpsie	i
}
 80038ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003920:	e0e2      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	2200      	movs	r2, #0
 800392a:	497b      	ldr	r1, [pc, #492]	; (8003b18 <HAL_I2C_Mem_Read+0x4c4>)
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fa77 	bl	8003e20 <I2C_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0e9      	b.n	8003b10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800394c:	b672      	cpsid	i
}
 800394e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003982:	4b66      	ldr	r3, [pc, #408]	; (8003b1c <HAL_I2C_Mem_Read+0x4c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	08db      	lsrs	r3, r3, #3
 8003988:	4a65      	ldr	r2, [pc, #404]	; (8003b20 <HAL_I2C_Mem_Read+0x4cc>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0a1a      	lsrs	r2, r3, #8
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00da      	lsls	r2, r3, #3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	3b01      	subs	r3, #1
 80039a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d118      	bne.n	80039da <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80039ca:	b662      	cpsie	i
}
 80039cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e09a      	b.n	8003b10 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d1d9      	bne.n	800399c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a2a:	b662      	cpsie	i
}
 8003a2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a60:	e042      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fb32 	bl	80040d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e04c      	b.n	8003b10 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d118      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f47f ae94 	bne.w	800381a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3728      	adds	r7, #40	; 0x28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	00010004 	.word	0x00010004
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	14f8b589 	.word	0x14f8b589

08003b24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	461a      	mov	r2, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	817b      	strh	r3, [r7, #10]
 8003b36:	460b      	mov	r3, r1
 8003b38:	813b      	strh	r3, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f960 	bl	8003e20 <I2C_WaitOnFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00d      	beq.n	8003b82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b74:	d103      	bne.n	8003b7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e05f      	b.n	8003c42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	6a3a      	ldr	r2, [r7, #32]
 8003b96:	492d      	ldr	r1, [pc, #180]	; (8003c4c <I2C_RequestMemoryWrite+0x128>)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f998 	bl	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e04c      	b.n	8003c42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	6a39      	ldr	r1, [r7, #32]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fa02 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00d      	beq.n	8003bea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d107      	bne.n	8003be6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e02b      	b.n	8003c42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf0:	893b      	ldrh	r3, [r7, #8]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	611a      	str	r2, [r3, #16]
 8003bfa:	e021      	b.n	8003c40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bfc:	893b      	ldrh	r3, [r7, #8]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0c:	6a39      	ldr	r1, [r7, #32]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f9dc 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00d      	beq.n	8003c36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d107      	bne.n	8003c32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e005      	b.n	8003c42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c36:	893b      	ldrh	r3, [r7, #8]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	00010002 	.word	0x00010002

08003c50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	817b      	strh	r3, [r7, #10]
 8003c62:	460b      	mov	r3, r1
 8003c64:	813b      	strh	r3, [r7, #8]
 8003c66:	4613      	mov	r3, r2
 8003c68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f8c2 	bl	8003e20 <I2C_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb0:	d103      	bne.n	8003cba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0aa      	b.n	8003e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cbe:	897b      	ldrh	r3, [r7, #10]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ccc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	4952      	ldr	r1, [pc, #328]	; (8003e1c <I2C_RequestMemoryRead+0x1cc>)
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f8fa 	bl	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e097      	b.n	8003e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfc:	6a39      	ldr	r1, [r7, #32]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f964 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d107      	bne.n	8003d22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e076      	b.n	8003e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d2c:	893b      	ldrh	r3, [r7, #8]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	611a      	str	r2, [r3, #16]
 8003d36:	e021      	b.n	8003d7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d38:	893b      	ldrh	r3, [r7, #8]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	6a39      	ldr	r1, [r7, #32]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f93e 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d107      	bne.n	8003d6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e050      	b.n	8003e14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d72:	893b      	ldrh	r3, [r7, #8]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	6a39      	ldr	r1, [r7, #32]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f923 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d107      	bne.n	8003da4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e035      	b.n	8003e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f82b 	bl	8003e20 <I2C_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dde:	d103      	bne.n	8003de8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e013      	b.n	8003e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dec:	897b      	ldrh	r3, [r7, #10]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	6a3a      	ldr	r2, [r7, #32]
 8003e00:	4906      	ldr	r1, [pc, #24]	; (8003e1c <I2C_RequestMemoryRead+0x1cc>)
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f863 	bl	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	00010002 	.word	0x00010002

08003e20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e30:	e025      	b.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d021      	beq.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3a:	f7fe fc3b 	bl	80026b4 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d302      	bcc.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d116      	bne.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f043 0220 	orr.w	r2, r3, #32
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e023      	b.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d10d      	bne.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	e00c      	b.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d0b6      	beq.n	8003e32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003edc:	e051      	b.n	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eec:	d123      	bne.n	8003f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f043 0204 	orr.w	r2, r3, #4
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e046      	b.n	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d021      	beq.n	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3e:	f7fe fbb9 	bl	80026b4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d116      	bne.n	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f043 0220 	orr.w	r2, r3, #32
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e020      	b.n	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10c      	bne.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	43da      	mvns	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4013      	ands	r3, r2
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	e00b      	b.n	8003fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	43da      	mvns	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d18d      	bne.n	8003ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fd8:	e02d      	b.n	8004036 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f8ce 	bl	800417c <I2C_IsAcknowledgeFailed>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e02d      	b.n	8004046 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d021      	beq.n	8004036 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fe fb5f 	bl	80026b4 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d116      	bne.n	8004036 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e007      	b.n	8004046 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d1ca      	bne.n	8003fda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800405a:	e02d      	b.n	80040b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f88d 	bl	800417c <I2C_IsAcknowledgeFailed>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e02d      	b.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d021      	beq.n	80040b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004074:	f7fe fb1e 	bl	80026b4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d116      	bne.n	80040b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e007      	b.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d1ca      	bne.n	800405c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040dc:	e042      	b.n	8004164 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d119      	bne.n	8004120 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0210 	mvn.w	r2, #16
 80040f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e029      	b.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004120:	f7fe fac8 	bl	80026b4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	d302      	bcc.n	8004136 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d116      	bne.n	8004164 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e007      	b.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b40      	cmp	r3, #64	; 0x40
 8004170:	d1b5      	bne.n	80040de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d11b      	bne.n	80041cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800419c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f043 0204 	orr.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e272      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8087 	beq.w	8004306 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041f8:	4b92      	ldr	r3, [pc, #584]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b04      	cmp	r3, #4
 8004202:	d00c      	beq.n	800421e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004204:	4b8f      	ldr	r3, [pc, #572]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b08      	cmp	r3, #8
 800420e:	d112      	bne.n	8004236 <HAL_RCC_OscConfig+0x5e>
 8004210:	4b8c      	ldr	r3, [pc, #560]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421c:	d10b      	bne.n	8004236 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421e:	4b89      	ldr	r3, [pc, #548]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d06c      	beq.n	8004304 <HAL_RCC_OscConfig+0x12c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d168      	bne.n	8004304 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e24c      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x76>
 8004240:	4b80      	ldr	r3, [pc, #512]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a7f      	ldr	r2, [pc, #508]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	e02e      	b.n	80042ac <HAL_RCC_OscConfig+0xd4>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x98>
 8004256:	4b7b      	ldr	r3, [pc, #492]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7a      	ldr	r2, [pc, #488]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 800425c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b78      	ldr	r3, [pc, #480]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a77      	ldr	r2, [pc, #476]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xd4>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0xbc>
 800427a:	4b72      	ldr	r3, [pc, #456]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a71      	ldr	r2, [pc, #452]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b6f      	ldr	r3, [pc, #444]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6e      	ldr	r2, [pc, #440]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xd4>
 8004294:	4b6b      	ldr	r3, [pc, #428]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a6a      	ldr	r2, [pc, #424]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b68      	ldr	r3, [pc, #416]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a67      	ldr	r2, [pc, #412]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fe f9fe 	bl	80026b4 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe f9fa 	bl	80026b4 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e200      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b5d      	ldr	r3, [pc, #372]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xe4>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fe f9ea 	bl	80026b4 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe f9e6 	bl	80026b4 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e1ec      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	4b53      	ldr	r3, [pc, #332]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x10c>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d063      	beq.n	80043da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004312:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800431e:	4b49      	ldr	r3, [pc, #292]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x18c>
 800432a:	4b46      	ldr	r3, [pc, #280]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4b43      	ldr	r3, [pc, #268]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x176>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1c0      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b3d      	ldr	r3, [pc, #244]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4939      	ldr	r1, [pc, #228]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	e03a      	b.n	80043da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d020      	beq.n	80043ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b36      	ldr	r3, [pc, #216]	; (8004448 <HAL_RCC_OscConfig+0x270>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7fe f99f 	bl	80026b4 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437a:	f7fe f99b 	bl	80026b4 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e1a1      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438c:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004398:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4927      	ldr	r1, [pc, #156]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
 80043ac:	e015      	b.n	80043da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ae:	4b26      	ldr	r3, [pc, #152]	; (8004448 <HAL_RCC_OscConfig+0x270>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fe f97e 	bl	80026b4 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043bc:	f7fe f97a 	bl	80026b4 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e180      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d03a      	beq.n	800445c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d019      	beq.n	8004422 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ee:	4b17      	ldr	r3, [pc, #92]	; (800444c <HAL_RCC_OscConfig+0x274>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f4:	f7fe f95e 	bl	80026b4 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fc:	f7fe f95a 	bl	80026b4 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e160      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <HAL_RCC_OscConfig+0x26c>)
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800441a:	2001      	movs	r0, #1
 800441c:	f000 fb08 	bl	8004a30 <RCC_Delay>
 8004420:	e01c      	b.n	800445c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_RCC_OscConfig+0x274>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004428:	f7fe f944 	bl	80026b4 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442e:	e00f      	b.n	8004450 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004430:	f7fe f940 	bl	80026b4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d908      	bls.n	8004450 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e146      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000
 8004448:	42420000 	.word	0x42420000
 800444c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004450:	4b92      	ldr	r3, [pc, #584]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e9      	bne.n	8004430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a6 	beq.w	80045b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446e:	4b8b      	ldr	r3, [pc, #556]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10d      	bne.n	8004496 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447a:	4b88      	ldr	r3, [pc, #544]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4a87      	ldr	r2, [pc, #540]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004484:	61d3      	str	r3, [r2, #28]
 8004486:	4b85      	ldr	r3, [pc, #532]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004492:	2301      	movs	r3, #1
 8004494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004496:	4b82      	ldr	r3, [pc, #520]	; (80046a0 <HAL_RCC_OscConfig+0x4c8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d118      	bne.n	80044d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a2:	4b7f      	ldr	r3, [pc, #508]	; (80046a0 <HAL_RCC_OscConfig+0x4c8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a7e      	ldr	r2, [pc, #504]	; (80046a0 <HAL_RCC_OscConfig+0x4c8>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ae:	f7fe f901 	bl	80026b4 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b6:	f7fe f8fd 	bl	80026b4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b64      	cmp	r3, #100	; 0x64
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e103      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c8:	4b75      	ldr	r3, [pc, #468]	; (80046a0 <HAL_RCC_OscConfig+0x4c8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d106      	bne.n	80044ea <HAL_RCC_OscConfig+0x312>
 80044dc:	4b6f      	ldr	r3, [pc, #444]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a6e      	ldr	r2, [pc, #440]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6213      	str	r3, [r2, #32]
 80044e8:	e02d      	b.n	8004546 <HAL_RCC_OscConfig+0x36e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x334>
 80044f2:	4b6a      	ldr	r3, [pc, #424]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4a69      	ldr	r2, [pc, #420]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6213      	str	r3, [r2, #32]
 80044fe:	4b67      	ldr	r3, [pc, #412]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a66      	ldr	r2, [pc, #408]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	6213      	str	r3, [r2, #32]
 800450a:	e01c      	b.n	8004546 <HAL_RCC_OscConfig+0x36e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b05      	cmp	r3, #5
 8004512:	d10c      	bne.n	800452e <HAL_RCC_OscConfig+0x356>
 8004514:	4b61      	ldr	r3, [pc, #388]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	4a60      	ldr	r2, [pc, #384]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 800451a:	f043 0304 	orr.w	r3, r3, #4
 800451e:	6213      	str	r3, [r2, #32]
 8004520:	4b5e      	ldr	r3, [pc, #376]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4a5d      	ldr	r2, [pc, #372]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6213      	str	r3, [r2, #32]
 800452c:	e00b      	b.n	8004546 <HAL_RCC_OscConfig+0x36e>
 800452e:	4b5b      	ldr	r3, [pc, #364]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4a5a      	ldr	r2, [pc, #360]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6213      	str	r3, [r2, #32]
 800453a:	4b58      	ldr	r3, [pc, #352]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a57      	ldr	r2, [pc, #348]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f023 0304 	bic.w	r3, r3, #4
 8004544:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d015      	beq.n	800457a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454e:	f7fe f8b1 	bl	80026b4 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	e00a      	b.n	800456c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004556:	f7fe f8ad 	bl	80026b4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	; 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e0b1      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ee      	beq.n	8004556 <HAL_RCC_OscConfig+0x37e>
 8004578:	e014      	b.n	80045a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457a:	f7fe f89b 	bl	80026b4 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fe f897 	bl	80026b4 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e09b      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004598:	4b40      	ldr	r3, [pc, #256]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ee      	bne.n	8004582 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d105      	bne.n	80045b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045aa:	4b3c      	ldr	r3, [pc, #240]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	4a3b      	ldr	r2, [pc, #236]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8087 	beq.w	80046ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c0:	4b36      	ldr	r3, [pc, #216]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 030c 	and.w	r3, r3, #12
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d061      	beq.n	8004690 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d146      	bne.n	8004662 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d4:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fe f86b 	bl	80026b4 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fe f867 	bl	80026b4 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e06d      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f4:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f0      	bne.n	80045e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004608:	d108      	bne.n	800461c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	4921      	ldr	r1, [pc, #132]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800461c:	4b1f      	ldr	r3, [pc, #124]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a19      	ldr	r1, [r3, #32]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	430b      	orrs	r3, r1
 800462e:	491b      	ldr	r1, [pc, #108]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463a:	f7fe f83b 	bl	80026b4 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004642:	f7fe f837 	bl	80026b4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e03d      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x46a>
 8004660:	e035      	b.n	80046ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7fe f824 	bl	80026b4 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004670:	f7fe f820 	bl	80026b4 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e026      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_RCC_OscConfig+0x4c4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x498>
 800468e:	e01e      	b.n	80046ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e019      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
 800469c:	40021000 	.word	0x40021000
 80046a0:	40007000 	.word	0x40007000
 80046a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCC_OscConfig+0x500>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d001      	beq.n	80046ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000

080046dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0d0      	b.n	8004892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f0:	4b6a      	ldr	r3, [pc, #424]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d910      	bls.n	8004720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fe:	4b67      	ldr	r3, [pc, #412]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 0207 	bic.w	r2, r3, #7
 8004706:	4965      	ldr	r1, [pc, #404]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	4313      	orrs	r3, r2
 800470c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470e:	4b63      	ldr	r3, [pc, #396]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d001      	beq.n	8004720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0b8      	b.n	8004892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d020      	beq.n	800476e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004738:	4b59      	ldr	r3, [pc, #356]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4a58      	ldr	r2, [pc, #352]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800473e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004750:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	4a52      	ldr	r2, [pc, #328]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004756:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800475a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800475c:	4b50      	ldr	r3, [pc, #320]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	494d      	ldr	r1, [pc, #308]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800476a:	4313      	orrs	r3, r2
 800476c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d040      	beq.n	80047fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d107      	bne.n	8004792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	4b47      	ldr	r3, [pc, #284]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d115      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e07f      	b.n	8004892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e073      	b.n	8004892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047aa:	4b3d      	ldr	r3, [pc, #244]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e06b      	b.n	8004892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4b39      	ldr	r3, [pc, #228]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4936      	ldr	r1, [pc, #216]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047cc:	f7fd ff72 	bl	80026b4 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fd ff6e 	bl	80026b4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e053      	b.n	8004892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 020c 	and.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d1eb      	bne.n	80047d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047fc:	4b27      	ldr	r3, [pc, #156]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d210      	bcs.n	800482c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 0207 	bic.w	r2, r3, #7
 8004812:	4922      	ldr	r1, [pc, #136]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b20      	ldr	r3, [pc, #128]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e032      	b.n	8004892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004838:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4916      	ldr	r1, [pc, #88]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	490e      	ldr	r1, [pc, #56]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	4313      	orrs	r3, r2
 8004868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800486a:	f000 f821 	bl	80048b0 <HAL_RCC_GetSysClockFreq>
 800486e:	4602      	mov	r2, r0
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	490a      	ldr	r1, [pc, #40]	; (80048a4 <HAL_RCC_ClockConfig+0x1c8>)
 800487c:	5ccb      	ldrb	r3, [r1, r3]
 800487e:	fa22 f303 	lsr.w	r3, r2, r3
 8004882:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <HAL_RCC_ClockConfig+0x1d0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7fd fe10 	bl	80024b0 <HAL_InitTick>

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40022000 	.word	0x40022000
 80048a0:	40021000 	.word	0x40021000
 80048a4:	08009290 	.word	0x08009290
 80048a8:	20000000 	.word	0x20000000
 80048ac:	20000004 	.word	0x20000004

080048b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b0:	b490      	push	{r4, r7}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048b6:	4b29      	ldr	r3, [pc, #164]	; (800495c <HAL_RCC_GetSysClockFreq+0xac>)
 80048b8:	1d3c      	adds	r4, r7, #4
 80048ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048c0:	f240 2301 	movw	r3, #513	; 0x201
 80048c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	2300      	movs	r3, #0
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048da:	4b21      	ldr	r3, [pc, #132]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d002      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x40>
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d003      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x46>
 80048ee:	e02b      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048f0:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048f2:	623b      	str	r3, [r7, #32]
      break;
 80048f4:	e02b      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	0c9b      	lsrs	r3, r3, #18
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	3328      	adds	r3, #40	; 0x28
 8004900:	443b      	add	r3, r7
 8004902:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004906:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d012      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004912:	4b13      	ldr	r3, [pc, #76]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	0c5b      	lsrs	r3, r3, #17
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	3328      	adds	r3, #40	; 0x28
 800491e:	443b      	add	r3, r7
 8004920:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004924:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	4a0e      	ldr	r2, [pc, #56]	; (8004964 <HAL_RCC_GetSysClockFreq+0xb4>)
 800492a:	fb03 f202 	mul.w	r2, r3, r2
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
 8004936:	e004      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <HAL_RCC_GetSysClockFreq+0xb8>)
 800493c:	fb02 f303 	mul.w	r3, r2, r3
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	623b      	str	r3, [r7, #32]
      break;
 8004946:	e002      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_RCC_GetSysClockFreq+0xb4>)
 800494a:	623b      	str	r3, [r7, #32]
      break;
 800494c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494e:	6a3b      	ldr	r3, [r7, #32]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3728      	adds	r7, #40	; 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bc90      	pop	{r4, r7}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	08009278 	.word	0x08009278
 8004960:	40021000 	.word	0x40021000
 8004964:	007a1200 	.word	0x007a1200
 8004968:	003d0900 	.word	0x003d0900

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b02      	ldr	r3, [pc, #8]	; (800497c <HAL_RCC_GetHCLKFreq+0x10>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	20000000 	.word	0x20000000

08004980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004984:	f7ff fff2 	bl	800496c <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4903      	ldr	r1, [pc, #12]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000
 80049a4:	080092a0 	.word	0x080092a0

080049a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049ac:	f7ff ffde 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	0adb      	lsrs	r3, r3, #11
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000
 80049cc:	080092a0 	.word	0x080092a0

080049d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	220f      	movs	r2, #15
 80049de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049e0:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <HAL_RCC_GetClockConfig+0x58>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0203 	and.w	r2, r3, #3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <HAL_RCC_GetClockConfig+0x58>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_GetClockConfig+0x58>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_RCC_GetClockConfig+0x58>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	08db      	lsrs	r3, r3, #3
 8004a0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a12:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_RCC_GetClockConfig+0x5c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0207 	and.w	r2, r3, #7
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40022000 	.word	0x40022000

08004a30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <RCC_Delay+0x34>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <RCC_Delay+0x38>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0a5b      	lsrs	r3, r3, #9
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a4c:	bf00      	nop
  }
  while (Delay --);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1e5a      	subs	r2, r3, #1
 8004a52:	60fa      	str	r2, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f9      	bne.n	8004a4c <RCC_Delay+0x1c>
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	20000000 	.word	0x20000000
 8004a68:	10624dd3 	.word	0x10624dd3

08004a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e076      	b.n	8004b6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d108      	bne.n	8004a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a8e:	d009      	beq.n	8004aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	61da      	str	r2, [r3, #28]
 8004a96:	e005      	b.n	8004aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fd fc2e 	bl	8002320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ada:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b28:	ea42 0103 	orr.w	r1, r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	0c1a      	lsrs	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f002 0204 	and.w	r2, r2, #4
 8004b4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_SPI_Transmit+0x22>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e126      	b.n	8004de4 <HAL_SPI_Transmit+0x270>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b9e:	f7fd fd89 	bl	80026b4 <HAL_GetTick>
 8004ba2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bb8:	e10b      	b.n	8004dd2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_SPI_Transmit+0x52>
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bca:	e102      	b.n	8004dd2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	88fa      	ldrh	r2, [r7, #6]
 8004bea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c12:	d10f      	bne.n	8004c34 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d007      	beq.n	8004c52 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5a:	d14b      	bne.n	8004cf4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_SPI_Transmit+0xf6>
 8004c64:	8afb      	ldrh	r3, [r7, #22]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d13e      	bne.n	8004ce8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	881a      	ldrh	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c8e:	e02b      	b.n	8004ce8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d112      	bne.n	8004cc4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	881a      	ldrh	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cc2:	e011      	b.n	8004ce8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc4:	f7fd fcf6 	bl	80026b4 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d803      	bhi.n	8004cdc <HAL_SPI_Transmit+0x168>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d102      	bne.n	8004ce2 <HAL_SPI_Transmit+0x16e>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ce6:	e074      	b.n	8004dd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ce      	bne.n	8004c90 <HAL_SPI_Transmit+0x11c>
 8004cf2:	e04c      	b.n	8004d8e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_Transmit+0x18e>
 8004cfc:	8afb      	ldrh	r3, [r7, #22]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d140      	bne.n	8004d84 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	7812      	ldrb	r2, [r2, #0]
 8004d0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d28:	e02c      	b.n	8004d84 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d113      	bne.n	8004d60 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	7812      	ldrb	r2, [r2, #0]
 8004d44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d5e:	e011      	b.n	8004d84 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d60:	f7fd fca8 	bl	80026b4 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d803      	bhi.n	8004d78 <HAL_SPI_Transmit+0x204>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d102      	bne.n	8004d7e <HAL_SPI_Transmit+0x20a>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d82:	e026      	b.n	8004dd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1cd      	bne.n	8004d2a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fbb8 	bl	8005508 <SPI_EndRxTxTransaction>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	e000      	b.n	8004dd2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004dd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004de2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e08:	d112      	bne.n	8004e30 <HAL_SPI_Receive+0x44>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10e      	bne.n	8004e30 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2204      	movs	r2, #4
 8004e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f8f1 	bl	800500e <HAL_SPI_TransmitReceive>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	e0ea      	b.n	8005006 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_SPI_Receive+0x52>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e0e3      	b.n	8005006 <HAL_SPI_Receive+0x21a>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e46:	f7fd fc35 	bl	80026b4 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d002      	beq.n	8004e5e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e5c:	e0ca      	b.n	8004ff4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <HAL_SPI_Receive+0x7e>
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e6e:	e0c1      	b.n	8004ff4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2204      	movs	r2, #4
 8004e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	88fa      	ldrh	r2, [r7, #6]
 8004e8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb6:	d10f      	bne.n	8004ed8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ed6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d007      	beq.n	8004ef6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d162      	bne.n	8004fc4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004efe:	e02e      	b.n	8004f5e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d115      	bne.n	8004f3a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f103 020c 	add.w	r2, r3, #12
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	7812      	ldrb	r2, [r2, #0]
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f38:	e011      	b.n	8004f5e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3a:	f7fd fbbb 	bl	80026b4 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d803      	bhi.n	8004f52 <HAL_SPI_Receive+0x166>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d102      	bne.n	8004f58 <HAL_SPI_Receive+0x16c>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f5c:	e04a      	b.n	8004ff4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1cb      	bne.n	8004f00 <HAL_SPI_Receive+0x114>
 8004f68:	e031      	b.n	8004fce <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d113      	bne.n	8004fa0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	b292      	uxth	r2, r2
 8004f84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	1c9a      	adds	r2, r3, #2
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f9e:	e011      	b.n	8004fc4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fa0:	f7fd fb88 	bl	80026b4 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d803      	bhi.n	8004fb8 <HAL_SPI_Receive+0x1cc>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d102      	bne.n	8004fbe <HAL_SPI_Receive+0x1d2>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fc2:	e017      	b.n	8004ff4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1cd      	bne.n	8004f6a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fa46 	bl	8005464 <SPI_EndRxTransaction>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	75fb      	strb	r3, [r7, #23]
 8004ff0:	e000      	b.n	8004ff4 <HAL_SPI_Receive+0x208>
  }

error :
 8004ff2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005004:	7dfb      	ldrb	r3, [r7, #23]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b08c      	sub	sp, #48	; 0x30
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_SPI_TransmitReceive+0x26>
 8005030:	2302      	movs	r3, #2
 8005032:	e18a      	b.n	800534a <HAL_SPI_TransmitReceive+0x33c>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800503c:	f7fd fb3a 	bl	80026b4 <HAL_GetTick>
 8005040:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005052:	887b      	ldrh	r3, [r7, #2]
 8005054:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005056:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800505a:	2b01      	cmp	r3, #1
 800505c:	d00f      	beq.n	800507e <HAL_SPI_TransmitReceive+0x70>
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005064:	d107      	bne.n	8005076 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <HAL_SPI_TransmitReceive+0x68>
 800506e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005072:	2b04      	cmp	r3, #4
 8005074:	d003      	beq.n	800507e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005076:	2302      	movs	r3, #2
 8005078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800507c:	e15b      	b.n	8005336 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x82>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x82>
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d103      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005096:	e14e      	b.n	8005336 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d003      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2205      	movs	r2, #5
 80050a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	887a      	ldrh	r2, [r7, #2]
 80050bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	887a      	ldrh	r2, [r7, #2]
 80050c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	887a      	ldrh	r2, [r7, #2]
 80050ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	887a      	ldrh	r2, [r7, #2]
 80050d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d007      	beq.n	8005100 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005108:	d178      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_SPI_TransmitReceive+0x10a>
 8005112:	8b7b      	ldrh	r3, [r7, #26]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d166      	bne.n	80051e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513c:	e053      	b.n	80051e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d11b      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x176>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <HAL_SPI_TransmitReceive+0x176>
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d113      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	881a      	ldrh	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	1c9a      	adds	r2, r3, #2
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d119      	bne.n	80051c6 <HAL_SPI_TransmitReceive+0x1b8>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d014      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	b292      	uxth	r2, r2
 80051a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	1c9a      	adds	r2, r3, #2
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051c2:	2301      	movs	r3, #1
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051c6:	f7fd fa75 	bl	80026b4 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d807      	bhi.n	80051e6 <HAL_SPI_TransmitReceive+0x1d8>
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d003      	beq.n	80051e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051e4:	e0a7      	b.n	8005336 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1a6      	bne.n	800513e <HAL_SPI_TransmitReceive+0x130>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1a1      	bne.n	800513e <HAL_SPI_TransmitReceive+0x130>
 80051fa:	e07c      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_SPI_TransmitReceive+0x1fc>
 8005204:	8b7b      	ldrh	r3, [r7, #26]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d16b      	bne.n	80052e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005230:	e057      	b.n	80052e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d11c      	bne.n	800527a <HAL_SPI_TransmitReceive+0x26c>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d017      	beq.n	800527a <HAL_SPI_TransmitReceive+0x26c>
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d114      	bne.n	800527a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	7812      	ldrb	r2, [r2, #0]
 800525c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d119      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x2ae>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d014      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052b8:	2301      	movs	r3, #1
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052bc:	f7fd f9fa 	bl	80026b4 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d803      	bhi.n	80052d4 <HAL_SPI_TransmitReceive+0x2c6>
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d102      	bne.n	80052da <HAL_SPI_TransmitReceive+0x2cc>
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052e0:	e029      	b.n	8005336 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1a2      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x224>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d19d      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f904 	bl	8005508 <SPI_EndRxTxTransaction>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005312:	e010      	b.n	8005336 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	e000      	b.n	8005336 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005334:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005346:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800534a:	4618      	mov	r0, r3
 800534c:	3730      	adds	r7, #48	; 0x30
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005364:	f7fd f9a6 	bl	80026b4 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	4413      	add	r3, r2
 8005372:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005374:	f7fd f99e 	bl	80026b4 <HAL_GetTick>
 8005378:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800537a:	4b39      	ldr	r3, [pc, #228]	; (8005460 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	015b      	lsls	r3, r3, #5
 8005380:	0d1b      	lsrs	r3, r3, #20
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	fb02 f303 	mul.w	r3, r2, r3
 8005388:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800538a:	e054      	b.n	8005436 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d050      	beq.n	8005436 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005394:	f7fd f98e 	bl	80026b4 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d902      	bls.n	80053aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d13d      	bne.n	8005426 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053c2:	d111      	bne.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053cc:	d004      	beq.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d6:	d107      	bne.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f0:	d10f      	bne.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005410:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e017      	b.n	8005456 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	3b01      	subs	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	429a      	cmp	r2, r3
 8005452:	d19b      	bne.n	800538c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000000 	.word	0x20000000

08005464 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005478:	d111      	bne.n	800549e <SPI_EndRxTransaction+0x3a>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005482:	d004      	beq.n	800548e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548c:	d107      	bne.n	800549e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a6:	d117      	bne.n	80054d8 <SPI_EndRxTransaction+0x74>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d112      	bne.n	80054d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2101      	movs	r1, #1
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7ff ff49 	bl	8005354 <SPI_WaitFlagStateUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01a      	beq.n	80054fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e013      	b.n	8005500 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2200      	movs	r2, #0
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff ff36 	bl	8005354 <SPI_WaitFlagStateUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e000      	b.n	8005500 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2200      	movs	r2, #0
 800551c:	2180      	movs	r1, #128	; 0x80
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7ff ff18 	bl	8005354 <SPI_WaitFlagStateUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	f043 0220 	orr.w	r2, r3, #32
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e000      	b.n	800553c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e041      	b.n	80055da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f839 	bl	80055e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f000 f9b4 	bl	80058f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d001      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e03a      	b.n	8005682 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_TIM_Base_Start_IT+0x98>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00e      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x58>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005636:	d009      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x58>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a14      	ldr	r2, [pc, #80]	; (8005690 <HAL_TIM_Base_Start_IT+0x9c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x58>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a13      	ldr	r2, [pc, #76]	; (8005694 <HAL_TIM_Base_Start_IT+0xa0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d111      	bne.n	8005670 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b06      	cmp	r3, #6
 800565c:	d010      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0201 	orr.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	e007      	b.n	8005680 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800

08005698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0202 	mvn.w	r2, #2
 80056c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8ed 	bl	80058ba <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f8e0 	bl	80058a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f8ef 	bl	80058cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d122      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b04      	cmp	r3, #4
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0204 	mvn.w	r2, #4
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8c3 	bl	80058ba <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f8b6 	bl	80058a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f8c5 	bl	80058cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b08      	cmp	r3, #8
 8005754:	d122      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d11b      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0208 	mvn.w	r2, #8
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2204      	movs	r2, #4
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f899 	bl	80058ba <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f88c 	bl	80058a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f89b 	bl	80058cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0210 	mvn.w	r2, #16
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2208      	movs	r2, #8
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f86f 	bl	80058ba <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f862 	bl	80058a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f871 	bl	80058cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10e      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d107      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0201 	mvn.w	r2, #1
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fc fcf4 	bl	8002204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005826:	2b80      	cmp	r3, #128	; 0x80
 8005828:	d10e      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d107      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f8bf 	bl	80059c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	d10e      	bne.n	8005874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b40      	cmp	r3, #64	; 0x40
 8005862:	d107      	bne.n	8005874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800586c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f835 	bl	80058de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b20      	cmp	r3, #32
 8005880:	d10e      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b20      	cmp	r3, #32
 800588e:	d107      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0220 	mvn.w	r2, #32
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f88a 	bl	80059b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a29      	ldr	r2, [pc, #164]	; (80059a8 <TIM_Base_SetConfig+0xb8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00b      	beq.n	8005920 <TIM_Base_SetConfig+0x30>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590e:	d007      	beq.n	8005920 <TIM_Base_SetConfig+0x30>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a26      	ldr	r2, [pc, #152]	; (80059ac <TIM_Base_SetConfig+0xbc>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0x30>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a25      	ldr	r2, [pc, #148]	; (80059b0 <TIM_Base_SetConfig+0xc0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d108      	bne.n	8005932 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <TIM_Base_SetConfig+0xb8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00b      	beq.n	8005952 <TIM_Base_SetConfig+0x62>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005940:	d007      	beq.n	8005952 <TIM_Base_SetConfig+0x62>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <TIM_Base_SetConfig+0xbc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_Base_SetConfig+0x62>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <TIM_Base_SetConfig+0xc0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d108      	bne.n	8005964 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a07      	ldr	r2, [pc, #28]	; (80059a8 <TIM_Base_SetConfig+0xb8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d103      	bne.n	8005998 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	615a      	str	r2, [r3, #20]
}
 800599e:	bf00      	nop
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800

080059b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e03f      	b.n	8005a6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fc fcd8 	bl	80023b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2224      	movs	r2, #36	; 0x24
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fd9b 	bl	8006558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695a      	ldr	r2, [r3, #20]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b08a      	sub	sp, #40	; 0x28
 8005a76:	af02      	add	r7, sp, #8
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	603b      	str	r3, [r7, #0]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d17c      	bne.n	8005b8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_UART_Transmit+0x2c>
 8005a98:	88fb      	ldrh	r3, [r7, #6]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e075      	b.n	8005b8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_UART_Transmit+0x3e>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e06e      	b.n	8005b8e <HAL_UART_Transmit+0x11c>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2221      	movs	r2, #33	; 0x21
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ac6:	f7fc fdf5 	bl	80026b4 <HAL_GetTick>
 8005aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae0:	d108      	bne.n	8005af4 <HAL_UART_Transmit+0x82>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e003      	b.n	8005afc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b04:	e02a      	b.n	8005b5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2180      	movs	r1, #128	; 0x80
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fb0d 	bl	8006130 <UART_WaitOnFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e036      	b.n	8005b8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	3302      	adds	r3, #2
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	e007      	b.n	8005b4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1cf      	bne.n	8005b06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2140      	movs	r1, #64	; 0x40
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 fadd 	bl	8006130 <UART_WaitOnFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e006      	b.n	8005b8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d13c      	bne.n	8005c2a <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e035      	b.n	8005c2c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e02e      	b.n	8005c2c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 faee 	bl	80061c4 <UART_Start_Receive_DMA>
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d119      	bne.n	8005c26 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d113      	bne.n	8005c22 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0210 	orr.w	r2, r2, #16
 8005c1e:	60da      	str	r2, [r3, #12]
 8005c20:	e001      	b.n	8005c26 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	e000      	b.n	8005c2c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
  }
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10d      	bne.n	8005c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_UART_IRQHandler+0x52>
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fbc0 	bl	8006404 <UART_Receive_IT>
      return;
 8005c84:	e17b      	b.n	8005f7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80b1 	beq.w	8005df0 <HAL_UART_IRQHandler+0x1bc>
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d105      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x70>
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 80a6 	beq.w	8005df0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <HAL_UART_IRQHandler+0x90>
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	f043 0201 	orr.w	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_UART_IRQHandler+0xb0>
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	f043 0202 	orr.w	r2, r3, #2
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_UART_IRQHandler+0xd0>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f043 0204 	orr.w	r2, r3, #4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00f      	beq.n	8005d2e <HAL_UART_IRQHandler+0xfa>
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <HAL_UART_IRQHandler+0xee>
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f043 0208 	orr.w	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 811e 	beq.w	8005f74 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <HAL_UART_IRQHandler+0x11e>
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fb59 	bl	8006404 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf14      	ite	ne
 8005d60:	2301      	movne	r3, #1
 8005d62:	2300      	moveq	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <HAL_UART_IRQHandler+0x146>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d031      	beq.n	8005dde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa9b 	bl	80062b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d023      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d013      	beq.n	8005dce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	4a76      	ldr	r2, [pc, #472]	; (8005f84 <HAL_UART_IRQHandler+0x350>)
 8005dac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fc feb2 	bl	8002b1c <HAL_DMA_Abort_IT>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	e00e      	b.n	8005dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f8f5 	bl	8005fbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	e00a      	b.n	8005dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f8f1 	bl	8005fbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	e006      	b.n	8005dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f8ed 	bl	8005fbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005dea:	e0c3      	b.n	8005f74 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	bf00      	nop
    return;
 8005dee:	e0c1      	b.n	8005f74 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	f040 80a1 	bne.w	8005f3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 809b 	beq.w	8005f3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8095 	beq.w	8005f3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d04e      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005e40:	8a3b      	ldrh	r3, [r7, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8098 	beq.w	8005f78 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e4c:	8a3a      	ldrh	r2, [r7, #16]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	f080 8092 	bcs.w	8005f78 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8a3a      	ldrh	r2, [r7, #16]
 8005e58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d02b      	beq.n	8005ebc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0210 	bic.w	r2, r2, #16
 8005eb0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fc fdf5 	bl	8002aa6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7fb fec9 	bl	8001c64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ed2:	e051      	b.n	8005f78 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d047      	beq.n	8005f7c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005eec:	8a7b      	ldrh	r3, [r7, #18]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d044      	beq.n	8005f7c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0201 	bic.w	r2, r2, #1
 8005f10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0210 	bic.w	r2, r2, #16
 8005f2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f30:	8a7b      	ldrh	r3, [r7, #18]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fb fe95 	bl	8001c64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f3a:	e01f      	b.n	8005f7c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d008      	beq.n	8005f58 <HAL_UART_IRQHandler+0x324>
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f9f0 	bl	8006336 <UART_Transmit_IT>
    return;
 8005f56:	e012      	b.n	8005f7e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <HAL_UART_IRQHandler+0x34a>
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fa31 	bl	80063d4 <UART_EndTransmit_IT>
    return;
 8005f72:	e004      	b.n	8005f7e <HAL_UART_IRQHandler+0x34a>
    return;
 8005f74:	bf00      	nop
 8005f76:	e002      	b.n	8005f7e <HAL_UART_IRQHandler+0x34a>
      return;
 8005f78:	bf00      	nop
 8005f7a:	e000      	b.n	8005f7e <HAL_UART_IRQHandler+0x34a>
      return;
 8005f7c:	bf00      	nop
  }
}
 8005f7e:	3728      	adds	r7, #40	; 0x28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	0800630f 	.word	0x0800630f

08005f88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr

08005f9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d12a      	bne.n	8006042 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006000:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695a      	ldr	r2, [r3, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006020:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	2b01      	cmp	r3, #1
 8006030:	d107      	bne.n	8006042 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0210 	bic.w	r2, r2, #16
 8006040:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	2b01      	cmp	r3, #1
 8006048:	d106      	bne.n	8006058 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800604e:	4619      	mov	r1, r3
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7fb fe07 	bl	8001c64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006056:	e002      	b.n	800605e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ff9e 	bl	8005f9a <HAL_UART_RxCpltCallback>
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	2b01      	cmp	r3, #1
 800607a:	d108      	bne.n	800608e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	4619      	mov	r1, r3
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7fb fdec 	bl	8001c64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800608c:	e002      	b.n	8006094 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff ff8c 	bl	8005fac <HAL_UART_RxHalfCpltCallback>
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bf14      	ite	ne
 80060bc:	2301      	movne	r3, #1
 80060be:	2300      	moveq	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b21      	cmp	r3, #33	; 0x21
 80060ce:	d108      	bne.n	80060e2 <UART_DMAError+0x46>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2200      	movs	r2, #0
 80060da:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80060dc:	68b8      	ldr	r0, [r7, #8]
 80060de:	f000 f8d5 	bl	800628c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b22      	cmp	r3, #34	; 0x22
 8006102:	d108      	bne.n	8006116 <UART_DMAError+0x7a>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006110:	68b8      	ldr	r0, [r7, #8]
 8006112:	f000 f8d0 	bl	80062b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f043 0210 	orr.w	r2, r3, #16
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006122:	68b8      	ldr	r0, [r7, #8]
 8006124:	f7ff ff4b 	bl	8005fbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	4613      	mov	r3, r2
 800613e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006140:	e02c      	b.n	800619c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006148:	d028      	beq.n	800619c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <UART_WaitOnFlagUntilTimeout+0x30>
 8006150:	f7fc fab0 	bl	80026b4 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	429a      	cmp	r2, r3
 800615e:	d21d      	bcs.n	800619c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800616e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e00f      	b.n	80061bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4013      	ands	r3, r2
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d0c3      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	88fa      	ldrh	r2, [r7, #6]
 80061dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2222      	movs	r2, #34	; 0x22
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	4a23      	ldr	r2, [pc, #140]	; (8006280 <UART_Start_Receive_DMA+0xbc>)
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	4a22      	ldr	r2, [pc, #136]	; (8006284 <UART_Start_Receive_DMA+0xc0>)
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	4a21      	ldr	r2, [pc, #132]	; (8006288 <UART_Start_Receive_DMA+0xc4>)
 8006202:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	2200      	movs	r2, #0
 800620a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800620c:	f107 0308 	add.w	r3, r7, #8
 8006210:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3304      	adds	r3, #4
 800621c:	4619      	mov	r1, r3
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	f7fc fbe0 	bl	80029e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006228:	2300      	movs	r3, #0
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006254:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0201 	orr.w	r2, r2, #1
 8006264:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695a      	ldr	r2, [r3, #20]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006274:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	08005fd1 	.word	0x08005fd1
 8006284:	08006067 	.word	0x08006067
 8006288:	0800609d 	.word	0x0800609d

0800628c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80062a2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0201 	bic.w	r2, r2, #1
 80062dc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d107      	bne.n	80062f6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0210 	bic.w	r2, r2, #16
 80062f4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr

0800630e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f7ff fe48 	bl	8005fbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b21      	cmp	r3, #33	; 0x21
 8006348:	d13e      	bne.n	80063c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d114      	bne.n	800637e <UART_Transmit_IT+0x48>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d110      	bne.n	800637e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	1c9a      	adds	r2, r3, #2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]
 800637c:	e008      	b.n	8006390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6211      	str	r1, [r2, #32]
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29b      	uxth	r3, r3
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	4619      	mov	r1, r3
 800639e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10f      	bne.n	80063c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr

080063d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fdc7 	bl	8005f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b22      	cmp	r3, #34	; 0x22
 8006416:	f040 8099 	bne.w	800654c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	d117      	bne.n	8006454 <UART_Receive_IT+0x50>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d113      	bne.n	8006454 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	b29b      	uxth	r3, r3
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	b29a      	uxth	r2, r3
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	1c9a      	adds	r2, r3, #2
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	629a      	str	r2, [r3, #40]	; 0x28
 8006452:	e026      	b.n	80064a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006466:	d007      	beq.n	8006478 <UART_Receive_IT+0x74>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <UART_Receive_IT+0x82>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e008      	b.n	8006498 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	b2da      	uxtb	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	4619      	mov	r1, r3
 80064b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d148      	bne.n	8006548 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0220 	bic.w	r2, r2, #32
 80064c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d123      	bne.n	800653e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0210 	bic.w	r2, r2, #16
 800650a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b10      	cmp	r3, #16
 8006518:	d10a      	bne.n	8006530 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fb fb94 	bl	8001c64 <HAL_UARTEx_RxEventCallback>
 800653c:	e002      	b.n	8006544 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fd2b 	bl	8005f9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e002      	b.n	800654e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	e000      	b.n	800654e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800654c:	2302      	movs	r3, #2
  }
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006592:	f023 030c 	bic.w	r3, r3, #12
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	430b      	orrs	r3, r1
 800659e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2c      	ldr	r2, [pc, #176]	; (800666c <UART_SetConfig+0x114>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d103      	bne.n	80065c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065c0:	f7fe f9f2 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	e002      	b.n	80065ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fe f9da 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 80065cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009a      	lsls	r2, r3, #2
 80065d8:	441a      	add	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	4a22      	ldr	r2, [pc, #136]	; (8006670 <UART_SetConfig+0x118>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	0119      	lsls	r1, r3, #4
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009a      	lsls	r2, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	fbb2 f2f3 	udiv	r2, r2, r3
 8006604:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <UART_SetConfig+0x118>)
 8006606:	fba3 0302 	umull	r0, r3, r3, r2
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2064      	movs	r0, #100	; 0x64
 800660e:	fb00 f303 	mul.w	r3, r0, r3
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	3332      	adds	r3, #50	; 0x32
 8006618:	4a15      	ldr	r2, [pc, #84]	; (8006670 <UART_SetConfig+0x118>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006624:	4419      	add	r1, r3
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009a      	lsls	r2, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	fbb2 f2f3 	udiv	r2, r2, r3
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <UART_SetConfig+0x118>)
 800663e:	fba3 0302 	umull	r0, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2064      	movs	r0, #100	; 0x64
 8006646:	fb00 f303 	mul.w	r3, r0, r3
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	3332      	adds	r3, #50	; 0x32
 8006650:	4a07      	ldr	r2, [pc, #28]	; (8006670 <UART_SetConfig+0x118>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	440a      	add	r2, r1
 8006662:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40013800 	.word	0x40013800
 8006670:	51eb851f 	.word	0x51eb851f

08006674 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006686:	2b84      	cmp	r3, #132	; 0x84
 8006688:	d005      	beq.n	8006696 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800668a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	3303      	adds	r3, #3
 8006694:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006696:	68fb      	ldr	r3, [r7, #12]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066a8:	f3ef 8305 	mrs	r3, IPSR
 80066ac:	607b      	str	r3, [r7, #4]
  return(result);
 80066ae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	bf14      	ite	ne
 80066b4:	2301      	movne	r3, #1
 80066b6:	2300      	moveq	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80066c8:	f001 fa30 	bl	8007b2c <vTaskStartScheduler>
  
  return osOK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80066d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066d4:	b089      	sub	sp, #36	; 0x24
 80066d6:	af04      	add	r7, sp, #16
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d020      	beq.n	8006726 <osThreadCreate+0x54>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01c      	beq.n	8006726 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685c      	ldr	r4, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681d      	ldr	r5, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691e      	ldr	r6, [r3, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff ffb8 	bl	8006674 <makeFreeRtosPriority>
 8006704:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800670e:	9202      	str	r2, [sp, #8]
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	9100      	str	r1, [sp, #0]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	4632      	mov	r2, r6
 8006718:	4629      	mov	r1, r5
 800671a:	4620      	mov	r0, r4
 800671c:	f001 f855 	bl	80077ca <xTaskCreateStatic>
 8006720:	4603      	mov	r3, r0
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e01c      	b.n	8006760 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685c      	ldr	r4, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006732:	b29e      	uxth	r6, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff ff9a 	bl	8006674 <makeFreeRtosPriority>
 8006740:	4602      	mov	r2, r0
 8006742:	f107 030c 	add.w	r3, r7, #12
 8006746:	9301      	str	r3, [sp, #4]
 8006748:	9200      	str	r2, [sp, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	4632      	mov	r2, r6
 800674e:	4629      	mov	r1, r5
 8006750:	4620      	mov	r0, r4
 8006752:	f001 f896 	bl	8007882 <xTaskCreate>
 8006756:	4603      	mov	r3, r0
 8006758:	2b01      	cmp	r3, #1
 800675a:	d001      	beq.n	8006760 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	e000      	b.n	8006762 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006760:	68fb      	ldr	r3, [r7, #12]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800676a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <osDelay+0x16>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	e000      	b.n	8006782 <osDelay+0x18>
 8006780:	2301      	movs	r3, #1
 8006782:	4618      	mov	r0, r3
 8006784:	f001 f99e 	bl	8007ac4 <vTaskDelay>
  
  return osOK;
 8006788:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af02      	add	r7, sp, #8
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00f      	beq.n	80067c4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d10a      	bne.n	80067c0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2203      	movs	r2, #3
 80067b0:	9200      	str	r2, [sp, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	2100      	movs	r1, #0
 80067b6:	2001      	movs	r0, #1
 80067b8:	f000 f9ac 	bl	8006b14 <xQueueGenericCreateStatic>
 80067bc:	4603      	mov	r3, r0
 80067be:	e016      	b.n	80067ee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e014      	b.n	80067ee <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d110      	bne.n	80067ec <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80067ca:	2203      	movs	r2, #3
 80067cc:	2100      	movs	r1, #0
 80067ce:	2001      	movs	r0, #1
 80067d0:	f000 fa17 	bl	8006c02 <xQueueGenericCreate>
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <osSemaphoreCreate+0x56>
 80067dc:	2300      	movs	r3, #0
 80067de:	2200      	movs	r2, #0
 80067e0:	2100      	movs	r1, #0
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fa6a 	bl	8006cbc <xQueueGenericSend>
      return sema;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	e000      	b.n	80067ee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80067ec:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800680c:	2380      	movs	r3, #128	; 0x80
 800680e:	e03a      	b.n	8006886 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d103      	bne.n	8006824 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800681c:	f04f 33ff 	mov.w	r3, #4294967295
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e009      	b.n	8006838 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <osSemaphoreWait+0x40>
      ticks = 1;
 8006834:	2301      	movs	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006838:	f7ff ff33 	bl	80066a2 <inHandlerMode>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d017      	beq.n	8006872 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006842:	f107 0308 	add.w	r3, r7, #8
 8006846:	461a      	mov	r2, r3
 8006848:	2100      	movs	r1, #0
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fe16 	bl	800747c <xQueueReceiveFromISR>
 8006850:	4603      	mov	r3, r0
 8006852:	2b01      	cmp	r3, #1
 8006854:	d001      	beq.n	800685a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006856:	23ff      	movs	r3, #255	; 0xff
 8006858:	e015      	b.n	8006886 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d011      	beq.n	8006884 <osSemaphoreWait+0x8c>
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <osSemaphoreWait+0x98>)
 8006862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	e008      	b.n	8006884 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006872:	68f9      	ldr	r1, [r7, #12]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fd01 	bl	800727c <xQueueSemaphoreTake>
 800687a:	4603      	mov	r3, r0
 800687c:	2b01      	cmp	r3, #1
 800687e:	d001      	beq.n	8006884 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006880:	23ff      	movs	r3, #255	; 0xff
 8006882:	e000      	b.n	8006886 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	e000ed04 	.word	0xe000ed04

08006894 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80068a4:	f7ff fefd 	bl	80066a2 <inHandlerMode>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d016      	beq.n	80068dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80068ae:	f107 0308 	add.w	r3, r7, #8
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fb7f 	bl	8006fb8 <xQueueGiveFromISR>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d001      	beq.n	80068c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80068c0:	23ff      	movs	r3, #255	; 0xff
 80068c2:	e017      	b.n	80068f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d013      	beq.n	80068f2 <osSemaphoreRelease+0x5e>
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <osSemaphoreRelease+0x68>)
 80068cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	e00a      	b.n	80068f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80068dc:	2300      	movs	r3, #0
 80068de:	2200      	movs	r2, #0
 80068e0:	2100      	movs	r1, #0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f9ea 	bl	8006cbc <xQueueGenericSend>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d001      	beq.n	80068f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80068ee:	23ff      	movs	r3, #255	; 0xff
 80068f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80068f2:	68fb      	ldr	r3, [r7, #12]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f103 0208 	add.w	r2, r3, #8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f04f 32ff 	mov.w	r2, #4294967295
 8006918:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f103 0208 	add.w	r2, r3, #8
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f103 0208 	add.w	r2, r3, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr

0800693e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr

08006956 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006956:	b480      	push	{r7}
 8006958:	b085      	sub	sp, #20
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	601a      	str	r2, [r3, #0]
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b2:	d103      	bne.n	80069bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e00c      	b.n	80069d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3308      	adds	r3, #8
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	e002      	b.n	80069ca <vListInsert+0x2e>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d2f6      	bcs.n	80069c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	601a      	str	r2, [r3, #0]
}
 8006a02:	bf00      	nop
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr

08006a0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6892      	ldr	r2, [r2, #8]
 8006a22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6852      	ldr	r2, [r2, #4]
 8006a2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d103      	bne.n	8006a40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	1e5a      	subs	r2, r3, #1
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a88:	f001 ff50 	bl	800892c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a94:	68f9      	ldr	r1, [r7, #12]
 8006a96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006abe:	fb01 f303 	mul.w	r3, r1, r3
 8006ac2:	441a      	add	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	22ff      	movs	r2, #255	; 0xff
 8006acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	22ff      	movs	r2, #255	; 0xff
 8006ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d109      	bne.n	8006af2 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00f      	beq.n	8006b06 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3310      	adds	r3, #16
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 fa32 	bl	8007f54 <xTaskRemoveFromEventList>
 8006af0:	e009      	b.n	8006b06 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3310      	adds	r3, #16
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff ff02 	bl	8006900 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3324      	adds	r3, #36	; 0x24
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fefd 	bl	8006900 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b06:	f001 ff41 	bl	800898c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b0a:	2301      	movs	r3, #1
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08e      	sub	sp, #56	; 0x38
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <xQueueGenericCreateStatic+0x52>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <xQueueGenericCreateStatic+0x56>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <xQueueGenericCreateStatic+0x58>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	623b      	str	r3, [r7, #32]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <xQueueGenericCreateStatic+0x7e>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <xQueueGenericCreateStatic+0x82>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueGenericCreateStatic+0x84>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	61fb      	str	r3, [r7, #28]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bb2:	2348      	movs	r3, #72	; 0x48
 8006bb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b48      	cmp	r3, #72	; 0x48
 8006bba:	d00a      	beq.n	8006bd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	61bb      	str	r3, [r7, #24]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00d      	beq.n	8006bf8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006be4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	4613      	mov	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f843 	bl	8006c7e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3730      	adds	r7, #48	; 0x30
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b08a      	sub	sp, #40	; 0x28
 8006c06:	af02      	add	r7, sp, #8
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	613b      	str	r3, [r7, #16]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	e004      	b.n	8006c42 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	3348      	adds	r3, #72	; 0x48
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 ff70 	bl	8008b2c <pvPortMalloc>
 8006c4c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00f      	beq.n	8006c74 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	3348      	adds	r3, #72	; 0x48
 8006c58:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c62:	79fa      	ldrb	r2, [r7, #7]
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f805 	bl	8006c7e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c74:	69bb      	ldr	r3, [r7, #24]
	}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3720      	adds	r7, #32
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	e002      	b.n	8006ca0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cac:	2101      	movs	r1, #1
 8006cae:	69b8      	ldr	r0, [r7, #24]
 8006cb0:	f7ff fed5 	bl	8006a5e <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cb4:	bf00      	nop
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08e      	sub	sp, #56	; 0x38
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <xQueueGenericSend+0x32>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d103      	bne.n	8006cfc <xQueueGenericSend+0x40>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <xQueueGenericSend+0x44>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e000      	b.n	8006d02 <xQueueGenericSend+0x46>
 8006d00:	2300      	movs	r3, #0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <xQueueGenericSend+0x60>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d103      	bne.n	8006d2a <xQueueGenericSend+0x6e>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <xQueueGenericSend+0x72>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <xQueueGenericSend+0x74>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <xQueueGenericSend+0x8e>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	623b      	str	r3, [r7, #32]
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d4a:	f001 fabd 	bl	80082c8 <xTaskGetSchedulerState>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d102      	bne.n	8006d5a <xQueueGenericSend+0x9e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <xQueueGenericSend+0xa2>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <xQueueGenericSend+0xa4>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <xQueueGenericSend+0xbe>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	61fb      	str	r3, [r7, #28]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d7a:	f001 fdd7 	bl	800892c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d302      	bcc.n	8006d90 <xQueueGenericSend+0xd4>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d112      	bne.n	8006db6 <xQueueGenericSend+0xfa>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d96:	f000 fc08 	bl	80075aa <prvCopyDataToQueue>
 8006d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	3324      	adds	r3, #36	; 0x24
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 f8d3 	bl	8007f54 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006dae:	f001 fded 	bl	800898c <vPortExitCritical>
				return pdPASS;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e062      	b.n	8006e7c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d103      	bne.n	8006dc4 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dbc:	f001 fde6 	bl	800898c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e05b      	b.n	8006e7c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d106      	bne.n	8006dd8 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dca:	f107 0314 	add.w	r3, r7, #20
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 f922 	bl	8008018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dd8:	f001 fdd8 	bl	800898c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ddc:	f000 ff06 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006de0:	f001 fda4 	bl	800892c <vPortEnterCritical>
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dea:	b25b      	sxtb	r3, r3
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d103      	bne.n	8006dfa <xQueueGenericSend+0x13e>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e00:	b25b      	sxtb	r3, r3
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d103      	bne.n	8006e10 <xQueueGenericSend+0x154>
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e10:	f001 fdbc 	bl	800898c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e14:	1d3a      	adds	r2, r7, #4
 8006e16:	f107 0314 	add.w	r3, r7, #20
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 f911 	bl	8008044 <xTaskCheckForTimeOut>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d123      	bne.n	8006e70 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e2a:	f000 fcb6 	bl	800779a <prvIsQueueFull>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d017      	beq.n	8006e64 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	3310      	adds	r3, #16
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 f865 	bl	8007f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e44:	f000 fc41 	bl	80076ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e48:	f000 fede 	bl	8007c08 <xTaskResumeAll>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d193      	bne.n	8006d7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e52:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <xQueueGenericSend+0x1c8>)
 8006e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	e78a      	b.n	8006d7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e66:	f000 fc30 	bl	80076ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e6a:	f000 fecd 	bl	8007c08 <xTaskResumeAll>
 8006e6e:	e784      	b.n	8006d7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e72:	f000 fc2a 	bl	80076ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e76:	f000 fec7 	bl	8007c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e7a:	2300      	movs	r3, #0
		}
	}
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3738      	adds	r7, #56	; 0x38
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	; 0x38
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d103      	bne.n	8006ec4 <xQueueGenericSendFromISR+0x3c>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <xQueueGenericSendFromISR+0x40>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <xQueueGenericSendFromISR+0x42>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	623b      	str	r3, [r7, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d103      	bne.n	8006ef2 <xQueueGenericSendFromISR+0x6a>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <xQueueGenericSendFromISR+0x6e>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <xQueueGenericSendFromISR+0x70>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	61fb      	str	r3, [r7, #28]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f12:	f001 fdcd 	bl	8008ab0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f16:	f3ef 8211 	mrs	r2, BASEPRI
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	61ba      	str	r2, [r7, #24]
 8006f2c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d302      	bcc.n	8006f44 <xQueueGenericSendFromISR+0xbc>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d12c      	bne.n	8006f9e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f54:	f000 fb29 	bl	80075aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f58:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d112      	bne.n	8006f88 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d016      	beq.n	8006f98 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	3324      	adds	r3, #36	; 0x24
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fff0 	bl	8007f54 <xTaskRemoveFromEventList>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00e      	beq.n	8006f98 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	e007      	b.n	8006f98 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	b25a      	sxtb	r2, r3
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006f9c:	e001      	b.n	8006fa2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3738      	adds	r7, #56	; 0x38
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08e      	sub	sp, #56	; 0x38
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	623b      	str	r3, [r7, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	61fb      	str	r3, [r7, #28]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d103      	bne.n	8007010 <xQueueGiveFromISR+0x58>
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <xQueueGiveFromISR+0x5c>
 8007010:	2301      	movs	r3, #1
 8007012:	e000      	b.n	8007016 <xQueueGiveFromISR+0x5e>
 8007014:	2300      	movs	r3, #0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10a      	bne.n	8007030 <xQueueGiveFromISR+0x78>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	61bb      	str	r3, [r7, #24]
}
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007030:	f001 fd3e 	bl	8008ab0 <vPortValidateInterruptPriority>
	__asm volatile
 8007034:	f3ef 8211 	mrs	r2, BASEPRI
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	617a      	str	r2, [r7, #20]
 800704a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800704c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800705c:	429a      	cmp	r2, r3
 800705e:	d22b      	bcs.n	80070b8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007072:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707a:	d112      	bne.n	80070a2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	2b00      	cmp	r3, #0
 8007082:	d016      	beq.n	80070b2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	3324      	adds	r3, #36	; 0x24
 8007088:	4618      	mov	r0, r3
 800708a:	f000 ff63 	bl	8007f54 <xTaskRemoveFromEventList>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00e      	beq.n	80070b2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2201      	movs	r2, #1
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e007      	b.n	80070b2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a6:	3301      	adds	r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	b25a      	sxtb	r2, r3
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80070b2:	2301      	movs	r3, #1
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
 80070b6:	e001      	b.n	80070bc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	637b      	str	r3, [r7, #52]	; 0x34
 80070bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070be:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f383 8811 	msr	BASEPRI, r3
}
 80070c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3738      	adds	r7, #56	; 0x38
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08c      	sub	sp, #48	; 0x30
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <xQueueReceive+0x30>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	623b      	str	r3, [r7, #32]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <xQueueReceive+0x3e>
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <xQueueReceive+0x42>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <xQueueReceive+0x44>
 8007116:	2300      	movs	r3, #0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <xQueueReceive+0x5e>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	61fb      	str	r3, [r7, #28]
}
 800712e:	bf00      	nop
 8007130:	e7fe      	b.n	8007130 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007132:	f001 f8c9 	bl	80082c8 <xTaskGetSchedulerState>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <xQueueReceive+0x6e>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <xQueueReceive+0x72>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <xQueueReceive+0x74>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <xQueueReceive+0x8e>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	61bb      	str	r3, [r7, #24]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007162:	f001 fbe3 	bl	800892c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d014      	beq.n	800719c <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007176:	f000 fa82 	bl	800767e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	1e5a      	subs	r2, r3, #1
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	3310      	adds	r3, #16
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fee0 	bl	8007f54 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007194:	f001 fbfa 	bl	800898c <vPortExitCritical>
				return pdPASS;
 8007198:	2301      	movs	r3, #1
 800719a:	e069      	b.n	8007270 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071a2:	f001 fbf3 	bl	800898c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071a6:	2300      	movs	r3, #0
 80071a8:	e062      	b.n	8007270 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071b0:	f107 0310 	add.w	r3, r7, #16
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 ff2f 	bl	8008018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071be:	f001 fbe5 	bl	800898c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071c2:	f000 fd13 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071c6:	f001 fbb1 	bl	800892c <vPortEnterCritical>
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071d0:	b25b      	sxtb	r3, r3
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d103      	bne.n	80071e0 <xQueueReceive+0x10c>
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d103      	bne.n	80071f6 <xQueueReceive+0x122>
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071f6:	f001 fbc9 	bl	800898c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071fa:	1d3a      	adds	r2, r7, #4
 80071fc:	f107 0310 	add.w	r3, r7, #16
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f000 ff1e 	bl	8008044 <xTaskCheckForTimeOut>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d123      	bne.n	8007256 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800720e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007210:	f000 faad 	bl	800776e <prvIsQueueEmpty>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d017      	beq.n	800724a <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	3324      	adds	r3, #36	; 0x24
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4611      	mov	r1, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fe72 	bl	8007f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800722a:	f000 fa4e 	bl	80076ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800722e:	f000 fceb 	bl	8007c08 <xTaskResumeAll>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d194      	bne.n	8007162 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <xQueueReceive+0x1a4>)
 800723a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	e78b      	b.n	8007162 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800724a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724c:	f000 fa3d 	bl	80076ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007250:	f000 fcda 	bl	8007c08 <xTaskResumeAll>
 8007254:	e785      	b.n	8007162 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007258:	f000 fa37 	bl	80076ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800725c:	f000 fcd4 	bl	8007c08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007262:	f000 fa84 	bl	800776e <prvIsQueueEmpty>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	f43f af7a 	beq.w	8007162 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800726e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007270:	4618      	mov	r0, r3
 8007272:	3730      	adds	r7, #48	; 0x30
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08e      	sub	sp, #56	; 0x38
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800728e:	2300      	movs	r3, #0
 8007290:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	623b      	str	r3, [r7, #32]
}
 80072aa:	bf00      	nop
 80072ac:	e7fe      	b.n	80072ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	61fb      	str	r3, [r7, #28]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072cc:	f000 fffc 	bl	80082c8 <xTaskGetSchedulerState>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d102      	bne.n	80072dc <xQueueSemaphoreTake+0x60>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <xQueueSemaphoreTake+0x64>
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <xQueueSemaphoreTake+0x66>
 80072e0:	2300      	movs	r3, #0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	61bb      	str	r3, [r7, #24]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80072fc:	f001 fb16 	bl	800892c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	2b00      	cmp	r3, #0
 800730a:	d019      	beq.n	8007340 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	1e5a      	subs	r2, r3, #1
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d104      	bne.n	8007326 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800731c:	f001 f99e 	bl	800865c <pvTaskIncrementMutexHeldCount>
 8007320:	4602      	mov	r2, r0
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	3310      	adds	r3, #16
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fe0e 	bl	8007f54 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007338:	f001 fb28 	bl	800898c <vPortExitCritical>
				return pdPASS;
 800733c:	2301      	movs	r3, #1
 800733e:	e097      	b.n	8007470 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d111      	bne.n	800736a <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <xQueueSemaphoreTake+0xe6>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	617b      	str	r3, [r7, #20]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007362:	f001 fb13 	bl	800898c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007366:	2300      	movs	r3, #0
 8007368:	e082      	b.n	8007470 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007370:	f107 030c 	add.w	r3, r7, #12
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fe4f 	bl	8008018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800737a:	2301      	movs	r3, #1
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800737e:	f001 fb05 	bl	800898c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007382:	f000 fc33 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007386:	f001 fad1 	bl	800892c <vPortEnterCritical>
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007390:	b25b      	sxtb	r3, r3
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007396:	d103      	bne.n	80073a0 <xQueueSemaphoreTake+0x124>
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a6:	b25b      	sxtb	r3, r3
 80073a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ac:	d103      	bne.n	80073b6 <xQueueSemaphoreTake+0x13a>
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073b6:	f001 fae9 	bl	800898c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073ba:	463a      	mov	r2, r7
 80073bc:	f107 030c 	add.w	r3, r7, #12
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fe3e 	bl	8008044 <xTaskCheckForTimeOut>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d132      	bne.n	8007434 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073d0:	f000 f9cd 	bl	800776e <prvIsQueueEmpty>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d026      	beq.n	8007428 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 80073e2:	f001 faa3 	bl	800892c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 ff8a 	bl	8008304 <xTaskPriorityInherit>
 80073f0:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80073f2:	f001 facb 	bl	800898c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	3324      	adds	r3, #36	; 0x24
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fd84 	bl	8007f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007406:	f000 f960 	bl	80076ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800740a:	f000 fbfd 	bl	8007c08 <xTaskResumeAll>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	f47f af73 	bne.w	80072fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007416:	4b18      	ldr	r3, [pc, #96]	; (8007478 <xQueueSemaphoreTake+0x1fc>)
 8007418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	e769      	b.n	80072fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800742a:	f000 f94e 	bl	80076ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800742e:	f000 fbeb 	bl	8007c08 <xTaskResumeAll>
 8007432:	e763      	b.n	80072fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007436:	f000 f948 	bl	80076ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800743a:	f000 fbe5 	bl	8007c08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800743e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007440:	f000 f995 	bl	800776e <prvIsQueueEmpty>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	f43f af58 	beq.w	80072fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00d      	beq.n	800746e <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 8007452:	f001 fa6b 	bl	800892c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007458:	f000 f890 	bl	800757c <prvGetDisinheritPriorityAfterTimeout>
 800745c:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007464:	4618      	mov	r0, r3
 8007466:	f001 f859 	bl	800851c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800746a:	f001 fa8f 	bl	800898c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800746e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007470:	4618      	mov	r0, r3
 8007472:	3738      	adds	r7, #56	; 0x38
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08e      	sub	sp, #56	; 0x38
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	623b      	str	r3, [r7, #32]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d103      	bne.n	80074b6 <xQueueReceiveFromISR+0x3a>
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <xQueueReceiveFromISR+0x3e>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <xQueueReceiveFromISR+0x40>
 80074ba:	2300      	movs	r3, #0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	61fb      	str	r3, [r7, #28]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074d6:	f001 faeb 	bl	8008ab0 <vPortValidateInterruptPriority>
	__asm volatile
 80074da:	f3ef 8211 	mrs	r2, BASEPRI
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	61ba      	str	r2, [r7, #24]
 80074f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80074f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d02f      	beq.n	8007562 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800750c:	68b9      	ldr	r1, [r7, #8]
 800750e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007510:	f000 f8b5 	bl	800767e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	1e5a      	subs	r2, r3, #1
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800751c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007524:	d112      	bne.n	800754c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d016      	beq.n	800755c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	3310      	adds	r3, #16
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fd0e 	bl	8007f54 <xTaskRemoveFromEventList>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00e      	beq.n	800755c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	e007      	b.n	800755c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800754c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007550:	3301      	adds	r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	b25a      	sxtb	r2, r3
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800755c:	2301      	movs	r3, #1
 800755e:	637b      	str	r3, [r7, #52]	; 0x34
 8007560:	e001      	b.n	8007566 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007562:	2300      	movs	r3, #0
 8007564:	637b      	str	r3, [r7, #52]	; 0x34
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	613b      	str	r3, [r7, #16]
	__asm volatile
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f383 8811 	msr	BASEPRI, r3
}
 8007570:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007574:	4618      	mov	r0, r3
 8007576:	3738      	adds	r7, #56	; 0x38
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	d006      	beq.n	800759a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f1c3 0307 	rsb	r3, r3, #7
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	e001      	b.n	800759e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800759e:	68fb      	ldr	r3, [r7, #12]
	}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bc80      	pop	{r7}
 80075a8:	4770      	bx	lr

080075aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b086      	sub	sp, #24
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075b6:	2300      	movs	r3, #0
 80075b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10d      	bne.n	80075e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d14d      	bne.n	800766c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 ff1b 	bl	8008410 <xTaskPriorityDisinherit>
 80075da:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	605a      	str	r2, [r3, #4]
 80075e2:	e043      	b.n	800766c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d119      	bne.n	800761e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6898      	ldr	r0, [r3, #8]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	461a      	mov	r2, r3
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	f001 fcb9 	bl	8008f6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	441a      	add	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d32b      	bcc.n	800766c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	609a      	str	r2, [r3, #8]
 800761c:	e026      	b.n	800766c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68d8      	ldr	r0, [r3, #12]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	461a      	mov	r2, r3
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	f001 fc9f 	bl	8008f6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	425b      	negs	r3, r3
 8007638:	441a      	add	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d207      	bcs.n	800765a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	425b      	negs	r3, r3
 8007654:	441a      	add	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d105      	bne.n	800766c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	3b01      	subs	r3, #1
 800766a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007674:	697b      	ldr	r3, [r7, #20]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	d018      	beq.n	80076c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	441a      	add	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d303      	bcc.n	80076b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68d9      	ldr	r1, [r3, #12]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	461a      	mov	r2, r3
 80076bc:	6838      	ldr	r0, [r7, #0]
 80076be:	f001 fc55 	bl	8008f6c <memcpy>
	}
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076d2:	f001 f92b 	bl	800892c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076de:	e011      	b.n	8007704 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d012      	beq.n	800770e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3324      	adds	r3, #36	; 0x24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fc31 	bl	8007f54 <xTaskRemoveFromEventList>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076f8:	f000 fd06 	bl	8008108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	3b01      	subs	r3, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007708:	2b00      	cmp	r3, #0
 800770a:	dce9      	bgt.n	80076e0 <prvUnlockQueue+0x16>
 800770c:	e000      	b.n	8007710 <prvUnlockQueue+0x46>
					break;
 800770e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	22ff      	movs	r2, #255	; 0xff
 8007714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007718:	f001 f938 	bl	800898c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800771c:	f001 f906 	bl	800892c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007726:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007728:	e011      	b.n	800774e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d012      	beq.n	8007758 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	3310      	adds	r3, #16
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fc0c 	bl	8007f54 <xTaskRemoveFromEventList>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007742:	f000 fce1 	bl	8008108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	3b01      	subs	r3, #1
 800774a:	b2db      	uxtb	r3, r3
 800774c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800774e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007752:	2b00      	cmp	r3, #0
 8007754:	dce9      	bgt.n	800772a <prvUnlockQueue+0x60>
 8007756:	e000      	b.n	800775a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007758:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	22ff      	movs	r2, #255	; 0xff
 800775e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007762:	f001 f913 	bl	800898c <vPortExitCritical>
}
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007776:	f001 f8d9 	bl	800892c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	2b00      	cmp	r3, #0
 8007780:	d102      	bne.n	8007788 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007782:	2301      	movs	r3, #1
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	e001      	b.n	800778c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800778c:	f001 f8fe 	bl	800898c <vPortExitCritical>

	return xReturn;
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077a2:	f001 f8c3 	bl	800892c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d102      	bne.n	80077b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077b2:	2301      	movs	r3, #1
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	e001      	b.n	80077bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077bc:	f001 f8e6 	bl	800898c <vPortExitCritical>

	return xReturn;
 80077c0:	68fb      	ldr	r3, [r7, #12]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b08e      	sub	sp, #56	; 0x38
 80077ce:	af04      	add	r7, sp, #16
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <xTaskCreateStatic+0x2a>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	623b      	str	r3, [r7, #32]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <xTaskCreateStatic+0x46>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	61fb      	str	r3, [r7, #28]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007810:	2354      	movs	r3, #84	; 0x54
 8007812:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b54      	cmp	r3, #84	; 0x54
 8007818:	d00a      	beq.n	8007830 <xTaskCreateStatic+0x66>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	61bb      	str	r3, [r7, #24]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01e      	beq.n	8007874 <xTaskCreateStatic+0xaa>
 8007836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01b      	beq.n	8007874 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007844:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	2202      	movs	r2, #2
 800784a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800784e:	2300      	movs	r3, #0
 8007850:	9303      	str	r3, [sp, #12]
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	9302      	str	r3, [sp, #8]
 8007856:	f107 0314 	add.w	r3, r7, #20
 800785a:	9301      	str	r3, [sp, #4]
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	68b9      	ldr	r1, [r7, #8]
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 f850 	bl	800790c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800786c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800786e:	f000 f8cd 	bl	8007a0c <prvAddNewTaskToReadyList>
 8007872:	e001      	b.n	8007878 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007878:	697b      	ldr	r3, [r7, #20]
	}
 800787a:	4618      	mov	r0, r3
 800787c:	3728      	adds	r7, #40	; 0x28
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007882:	b580      	push	{r7, lr}
 8007884:	b08c      	sub	sp, #48	; 0x30
 8007886:	af04      	add	r7, sp, #16
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	603b      	str	r3, [r7, #0]
 800788e:	4613      	mov	r3, r2
 8007890:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 f948 	bl	8008b2c <pvPortMalloc>
 800789c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00e      	beq.n	80078c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80078a4:	2054      	movs	r0, #84	; 0x54
 80078a6:	f001 f941 	bl	8008b2c <pvPortMalloc>
 80078aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
 80078b8:	e005      	b.n	80078c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078ba:	6978      	ldr	r0, [r7, #20]
 80078bc:	f001 f9fa 	bl	8008cb4 <vPortFree>
 80078c0:	e001      	b.n	80078c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d017      	beq.n	80078fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078d4:	88fa      	ldrh	r2, [r7, #6]
 80078d6:	2300      	movs	r3, #0
 80078d8:	9303      	str	r3, [sp, #12]
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	9302      	str	r3, [sp, #8]
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f80e 	bl	800790c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078f0:	69f8      	ldr	r0, [r7, #28]
 80078f2:	f000 f88b 	bl	8007a0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078f6:	2301      	movs	r3, #1
 80078f8:	61bb      	str	r3, [r7, #24]
 80078fa:	e002      	b.n	8007902 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007900:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007902:	69bb      	ldr	r3, [r7, #24]
	}
 8007904:	4618      	mov	r0, r3
 8007906:	3720      	adds	r7, #32
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007924:	3b01      	subs	r3, #1
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f023 0307 	bic.w	r3, r3, #7
 8007932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <prvInitialiseNewTask+0x48>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	617b      	str	r3, [r7, #20]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007954:	2300      	movs	r3, #0
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	e012      	b.n	8007980 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	7819      	ldrb	r1, [r3, #0]
 8007962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	4413      	add	r3, r2
 8007968:	3334      	adds	r3, #52	; 0x34
 800796a:	460a      	mov	r2, r1
 800796c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4413      	add	r3, r2
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d006      	beq.n	8007988 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3301      	adds	r3, #1
 800797e:	61fb      	str	r3, [r7, #28]
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b0f      	cmp	r3, #15
 8007984:	d9e9      	bls.n	800795a <prvInitialiseNewTask+0x4e>
 8007986:	e000      	b.n	800798a <prvInitialiseNewTask+0x7e>
		{
			break;
 8007988:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	2b06      	cmp	r3, #6
 8007996:	d901      	bls.n	800799c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007998:	2306      	movs	r3, #6
 800799a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	2200      	movs	r2, #0
 80079ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	3304      	adds	r3, #4
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe ffc3 	bl	800693e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	3318      	adds	r3, #24
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe ffbe 	bl	800693e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	f1c3 0207 	rsb	r2, r3, #7
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	2200      	movs	r2, #0
 80079dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	68f9      	ldr	r1, [r7, #12]
 80079ea:	69b8      	ldr	r0, [r7, #24]
 80079ec:	f000 feb0 	bl	8008750 <pxPortInitialiseStack>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a02:	bf00      	nop
 8007a04:	3720      	adds	r7, #32
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a14:	f000 ff8a 	bl	800892c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a18:	4b24      	ldr	r3, [pc, #144]	; (8007aac <prvAddNewTaskToReadyList+0xa0>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	4a23      	ldr	r2, [pc, #140]	; (8007aac <prvAddNewTaskToReadyList+0xa0>)
 8007a20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a22:	4b23      	ldr	r3, [pc, #140]	; (8007ab0 <prvAddNewTaskToReadyList+0xa4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a2a:	4a21      	ldr	r2, [pc, #132]	; (8007ab0 <prvAddNewTaskToReadyList+0xa4>)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a30:	4b1e      	ldr	r3, [pc, #120]	; (8007aac <prvAddNewTaskToReadyList+0xa0>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d110      	bne.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a38:	f000 fb84 	bl	8008144 <prvInitialiseTaskLists>
 8007a3c:	e00d      	b.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a3e:	4b1d      	ldr	r3, [pc, #116]	; (8007ab4 <prvAddNewTaskToReadyList+0xa8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a46:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <prvAddNewTaskToReadyList+0xa4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d802      	bhi.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a54:	4a16      	ldr	r2, [pc, #88]	; (8007ab0 <prvAddNewTaskToReadyList+0xa4>)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a5a:	4b17      	ldr	r3, [pc, #92]	; (8007ab8 <prvAddNewTaskToReadyList+0xac>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <prvAddNewTaskToReadyList+0xac>)
 8007a62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	2201      	movs	r2, #1
 8007a6a:	409a      	lsls	r2, r3
 8007a6c:	4b13      	ldr	r3, [pc, #76]	; (8007abc <prvAddNewTaskToReadyList+0xb0>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	4a12      	ldr	r2, [pc, #72]	; (8007abc <prvAddNewTaskToReadyList+0xb0>)
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4a0f      	ldr	r2, [pc, #60]	; (8007ac0 <prvAddNewTaskToReadyList+0xb4>)
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fe ff62 	bl	8006956 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a92:	f000 ff7b 	bl	800898c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a96:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <prvAddNewTaskToReadyList+0xa8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a9e:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <prvAddNewTaskToReadyList+0xa4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000604 	.word	0x20000604
 8007ab0:	20000504 	.word	0x20000504
 8007ab4:	20000610 	.word	0x20000610
 8007ab8:	20000620 	.word	0x20000620
 8007abc:	2000060c 	.word	0x2000060c
 8007ac0:	20000508 	.word	0x20000508

08007ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d017      	beq.n	8007b06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ad6:	4b13      	ldr	r3, [pc, #76]	; (8007b24 <vTaskDelay+0x60>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <vTaskDelay+0x30>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	60bb      	str	r3, [r7, #8]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007af4:	f000 f87a 	bl	8007bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fdc2 	bl	8008684 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b00:	f000 f882 	bl	8007c08 <xTaskResumeAll>
 8007b04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d107      	bne.n	8007b1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b0c:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <vTaskDelay+0x64>)
 8007b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	2000062c 	.word	0x2000062c
 8007b28:	e000ed04 	.word	0xe000ed04

08007b2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b3a:	463a      	mov	r2, r7
 8007b3c:	1d39      	adds	r1, r7, #4
 8007b3e:	f107 0308 	add.w	r3, r7, #8
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7f9 fdfe 	bl	8001744 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	9202      	str	r2, [sp, #8]
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	2300      	movs	r3, #0
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	2300      	movs	r3, #0
 8007b58:	460a      	mov	r2, r1
 8007b5a:	491e      	ldr	r1, [pc, #120]	; (8007bd4 <vTaskStartScheduler+0xa8>)
 8007b5c:	481e      	ldr	r0, [pc, #120]	; (8007bd8 <vTaskStartScheduler+0xac>)
 8007b5e:	f7ff fe34 	bl	80077ca <xTaskCreateStatic>
 8007b62:	4603      	mov	r3, r0
 8007b64:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <vTaskStartScheduler+0xb0>)
 8007b66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b68:	4b1c      	ldr	r3, [pc, #112]	; (8007bdc <vTaskStartScheduler+0xb0>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b70:	2301      	movs	r3, #1
 8007b72:	617b      	str	r3, [r7, #20]
 8007b74:	e001      	b.n	8007b7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d116      	bne.n	8007bae <vTaskStartScheduler+0x82>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	613b      	str	r3, [r7, #16]
}
 8007b92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b94:	4b12      	ldr	r3, [pc, #72]	; (8007be0 <vTaskStartScheduler+0xb4>)
 8007b96:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b9c:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <vTaskStartScheduler+0xb8>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ba2:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <vTaskStartScheduler+0xbc>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ba8:	f000 fe4e 	bl	8008848 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bac:	e00e      	b.n	8007bcc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d10a      	bne.n	8007bcc <vTaskStartScheduler+0xa0>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60fb      	str	r3, [r7, #12]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <vTaskStartScheduler+0x9e>
}
 8007bcc:	bf00      	nop
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	08009288 	.word	0x08009288
 8007bd8:	08008121 	.word	0x08008121
 8007bdc:	20000628 	.word	0x20000628
 8007be0:	20000624 	.word	0x20000624
 8007be4:	20000610 	.word	0x20000610
 8007be8:	20000608 	.word	0x20000608

08007bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007bf0:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <vTaskSuspendAll+0x18>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a03      	ldr	r2, [pc, #12]	; (8007c04 <vTaskSuspendAll+0x18>)
 8007bf8:	6013      	str	r3, [r2, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	2000062c 	.word	0x2000062c

08007c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c16:	4b3b      	ldr	r3, [pc, #236]	; (8007d04 <xTaskResumeAll+0xfc>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <xTaskResumeAll+0x2c>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	603b      	str	r3, [r7, #0]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c34:	f000 fe7a 	bl	800892c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c38:	4b32      	ldr	r3, [pc, #200]	; (8007d04 <xTaskResumeAll+0xfc>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	4a31      	ldr	r2, [pc, #196]	; (8007d04 <xTaskResumeAll+0xfc>)
 8007c40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c42:	4b30      	ldr	r3, [pc, #192]	; (8007d04 <xTaskResumeAll+0xfc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d155      	bne.n	8007cf6 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c4a:	4b2f      	ldr	r3, [pc, #188]	; (8007d08 <xTaskResumeAll+0x100>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d051      	beq.n	8007cf6 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c52:	e02e      	b.n	8007cb2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007c54:	4b2d      	ldr	r3, [pc, #180]	; (8007d0c <xTaskResumeAll+0x104>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3318      	adds	r3, #24
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fed3 	bl	8006a0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fece 	bl	8006a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	2201      	movs	r2, #1
 8007c76:	409a      	lsls	r2, r3
 8007c78:	4b25      	ldr	r3, [pc, #148]	; (8007d10 <xTaskResumeAll+0x108>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	4a24      	ldr	r2, [pc, #144]	; (8007d10 <xTaskResumeAll+0x108>)
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4a21      	ldr	r2, [pc, #132]	; (8007d14 <xTaskResumeAll+0x10c>)
 8007c90:	441a      	add	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7fe fe5c 	bl	8006956 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca2:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <xTaskResumeAll+0x110>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d302      	bcc.n	8007cb2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007cac:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <xTaskResumeAll+0x114>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cb2:	4b16      	ldr	r3, [pc, #88]	; (8007d0c <xTaskResumeAll+0x104>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1cc      	bne.n	8007c54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cc0:	f000 fade 	bl	8008280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cc4:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <xTaskResumeAll+0x118>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d010      	beq.n	8007cf2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cd0:	f000 f828 	bl	8007d24 <xTaskIncrementTick>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007cda:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <xTaskResumeAll+0x114>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f1      	bne.n	8007cd0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007cec:	4b0c      	ldr	r3, [pc, #48]	; (8007d20 <xTaskResumeAll+0x118>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <xTaskResumeAll+0x114>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cf6:	f000 fe49 	bl	800898c <vPortExitCritical>

	return xAlreadyYielded;
 8007cfa:	687b      	ldr	r3, [r7, #4]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	2000062c 	.word	0x2000062c
 8007d08:	20000604 	.word	0x20000604
 8007d0c:	200005c4 	.word	0x200005c4
 8007d10:	2000060c 	.word	0x2000060c
 8007d14:	20000508 	.word	0x20000508
 8007d18:	20000504 	.word	0x20000504
 8007d1c:	20000618 	.word	0x20000618
 8007d20:	20000614 	.word	0x20000614

08007d24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d2e:	4b41      	ldr	r3, [pc, #260]	; (8007e34 <xTaskIncrementTick+0x110>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d174      	bne.n	8007e20 <xTaskIncrementTick+0xfc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d36:	4b40      	ldr	r3, [pc, #256]	; (8007e38 <xTaskIncrementTick+0x114>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d3e:	4a3e      	ldr	r2, [pc, #248]	; (8007e38 <xTaskIncrementTick+0x114>)
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d120      	bne.n	8007d8c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d4a:	4b3c      	ldr	r3, [pc, #240]	; (8007e3c <xTaskIncrementTick+0x118>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <xTaskIncrementTick+0x46>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	603b      	str	r3, [r7, #0]
}
 8007d66:	bf00      	nop
 8007d68:	e7fe      	b.n	8007d68 <xTaskIncrementTick+0x44>
 8007d6a:	4b34      	ldr	r3, [pc, #208]	; (8007e3c <xTaskIncrementTick+0x118>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	4b33      	ldr	r3, [pc, #204]	; (8007e40 <xTaskIncrementTick+0x11c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a31      	ldr	r2, [pc, #196]	; (8007e3c <xTaskIncrementTick+0x118>)
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	4a31      	ldr	r2, [pc, #196]	; (8007e40 <xTaskIncrementTick+0x11c>)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	4b31      	ldr	r3, [pc, #196]	; (8007e44 <xTaskIncrementTick+0x120>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a2f      	ldr	r2, [pc, #188]	; (8007e44 <xTaskIncrementTick+0x120>)
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	f000 fa7a 	bl	8008280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d8c:	4b2e      	ldr	r3, [pc, #184]	; (8007e48 <xTaskIncrementTick+0x124>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d349      	bcc.n	8007e2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d96:	4b29      	ldr	r3, [pc, #164]	; (8007e3c <xTaskIncrementTick+0x118>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <xTaskIncrementTick+0x80>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e000      	b.n	8007da6 <xTaskIncrementTick+0x82>
 8007da4:	2300      	movs	r3, #0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007daa:	4b27      	ldr	r3, [pc, #156]	; (8007e48 <xTaskIncrementTick+0x124>)
 8007dac:	f04f 32ff 	mov.w	r2, #4294967295
 8007db0:	601a      	str	r2, [r3, #0]
					break;
 8007db2:	e03a      	b.n	8007e2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007db4:	4b21      	ldr	r3, [pc, #132]	; (8007e3c <xTaskIncrementTick+0x118>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d203      	bcs.n	8007dd4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dcc:	4a1e      	ldr	r2, [pc, #120]	; (8007e48 <xTaskIncrementTick+0x124>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
						break;
 8007dd2:	e02a      	b.n	8007e2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe fe17 	bl	8006a0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	3318      	adds	r3, #24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fe0e 	bl	8006a0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	2201      	movs	r2, #1
 8007df6:	409a      	lsls	r2, r3
 8007df8:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <xTaskIncrementTick+0x128>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	4a13      	ldr	r2, [pc, #76]	; (8007e4c <xTaskIncrementTick+0x128>)
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4a10      	ldr	r2, [pc, #64]	; (8007e50 <xTaskIncrementTick+0x12c>)
 8007e10:	441a      	add	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	3304      	adds	r3, #4
 8007e16:	4619      	mov	r1, r3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f7fe fd9c 	bl	8006956 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e1e:	e7ba      	b.n	8007d96 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <xTaskIncrementTick+0x130>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3301      	adds	r3, #1
 8007e26:	4a0b      	ldr	r2, [pc, #44]	; (8007e54 <xTaskIncrementTick+0x130>)
 8007e28:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e2a:	697b      	ldr	r3, [r7, #20]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	2000062c 	.word	0x2000062c
 8007e38:	20000608 	.word	0x20000608
 8007e3c:	200005bc 	.word	0x200005bc
 8007e40:	200005c0 	.word	0x200005c0
 8007e44:	2000061c 	.word	0x2000061c
 8007e48:	20000624 	.word	0x20000624
 8007e4c:	2000060c 	.word	0x2000060c
 8007e50:	20000508 	.word	0x20000508
 8007e54:	20000614 	.word	0x20000614

08007e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e5e:	4b26      	ldr	r3, [pc, #152]	; (8007ef8 <vTaskSwitchContext+0xa0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e66:	4b25      	ldr	r3, [pc, #148]	; (8007efc <vTaskSwitchContext+0xa4>)
 8007e68:	2201      	movs	r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e6c:	e03f      	b.n	8007eee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007e6e:	4b23      	ldr	r3, [pc, #140]	; (8007efc <vTaskSwitchContext+0xa4>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007e74:	4b22      	ldr	r3, [pc, #136]	; (8007f00 <vTaskSwitchContext+0xa8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	fab3 f383 	clz	r3, r3
 8007e80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e82:	7afb      	ldrb	r3, [r7, #11]
 8007e84:	f1c3 031f 	rsb	r3, r3, #31
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	491e      	ldr	r1, [pc, #120]	; (8007f04 <vTaskSwitchContext+0xac>)
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10a      	bne.n	8007eb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	607b      	str	r3, [r7, #4]
}
 8007eb0:	bf00      	nop
 8007eb2:	e7fe      	b.n	8007eb2 <vTaskSwitchContext+0x5a>
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4a11      	ldr	r2, [pc, #68]	; (8007f04 <vTaskSwitchContext+0xac>)
 8007ec0:	4413      	add	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	605a      	str	r2, [r3, #4]
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d104      	bne.n	8007ee4 <vTaskSwitchContext+0x8c>
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	605a      	str	r2, [r3, #4]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	4a07      	ldr	r2, [pc, #28]	; (8007f08 <vTaskSwitchContext+0xb0>)
 8007eec:	6013      	str	r3, [r2, #0]
}
 8007eee:	bf00      	nop
 8007ef0:	371c      	adds	r7, #28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr
 8007ef8:	2000062c 	.word	0x2000062c
 8007efc:	20000618 	.word	0x20000618
 8007f00:	2000060c 	.word	0x2000060c
 8007f04:	20000508 	.word	0x20000508
 8007f08:	20000504 	.word	0x20000504

08007f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60fb      	str	r3, [r7, #12]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <vTaskPlaceOnEventList+0x44>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3318      	adds	r3, #24
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fe fd2e 	bl	800699c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f40:	2101      	movs	r1, #1
 8007f42:	6838      	ldr	r0, [r7, #0]
 8007f44:	f000 fb9e 	bl	8008684 <prvAddCurrentTaskToDelayedList>
}
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	20000504 	.word	0x20000504

08007f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10a      	bne.n	8007f80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	60fb      	str	r3, [r7, #12]
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	3318      	adds	r3, #24
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fd41 	bl	8006a0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f8a:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <xTaskRemoveFromEventList+0xac>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d11c      	bne.n	8007fcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fd38 	bl	8006a0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	409a      	lsls	r2, r3
 8007fa4:	4b17      	ldr	r3, [pc, #92]	; (8008004 <xTaskRemoveFromEventList+0xb0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	4a16      	ldr	r2, [pc, #88]	; (8008004 <xTaskRemoveFromEventList+0xb0>)
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4a13      	ldr	r2, [pc, #76]	; (8008008 <xTaskRemoveFromEventList+0xb4>)
 8007fbc:	441a      	add	r2, r3
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	f7fe fcc6 	bl	8006956 <vListInsertEnd>
 8007fca:	e005      	b.n	8007fd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	3318      	adds	r3, #24
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	480e      	ldr	r0, [pc, #56]	; (800800c <xTaskRemoveFromEventList+0xb8>)
 8007fd4:	f7fe fcbf 	bl	8006956 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fdc:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <xTaskRemoveFromEventList+0xbc>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d905      	bls.n	8007ff2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fea:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <xTaskRemoveFromEventList+0xc0>)
 8007fec:	2201      	movs	r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	e001      	b.n	8007ff6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007ff6:	697b      	ldr	r3, [r7, #20]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	2000062c 	.word	0x2000062c
 8008004:	2000060c 	.word	0x2000060c
 8008008:	20000508 	.word	0x20000508
 800800c:	200005c4 	.word	0x200005c4
 8008010:	20000504 	.word	0x20000504
 8008014:	20000618 	.word	0x20000618

08008018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <vTaskInternalSetTimeOutState+0x24>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <vTaskInternalSetTimeOutState+0x28>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	605a      	str	r2, [r3, #4]
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	2000061c 	.word	0x2000061c
 8008040:	20000608 	.word	0x20000608

08008044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	613b      	str	r3, [r7, #16]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008086:	f000 fc51 	bl	800892c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800808a:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <xTaskCheckForTimeOut+0xbc>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d102      	bne.n	80080aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	e023      	b.n	80080f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b15      	ldr	r3, [pc, #84]	; (8008104 <xTaskCheckForTimeOut+0xc0>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d007      	beq.n	80080c6 <xTaskCheckForTimeOut+0x82>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d302      	bcc.n	80080c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	61fb      	str	r3, [r7, #28]
 80080c4:	e015      	b.n	80080f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d20b      	bcs.n	80080e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff ff9b 	bl	8008018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	e004      	b.n	80080f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080ee:	2301      	movs	r3, #1
 80080f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080f2:	f000 fc4b 	bl	800898c <vPortExitCritical>

	return xReturn;
 80080f6:	69fb      	ldr	r3, [r7, #28]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3720      	adds	r7, #32
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	20000608 	.word	0x20000608
 8008104:	2000061c 	.word	0x2000061c

08008108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800810c:	4b03      	ldr	r3, [pc, #12]	; (800811c <vTaskMissedYield+0x14>)
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]
}
 8008112:	bf00      	nop
 8008114:	46bd      	mov	sp, r7
 8008116:	bc80      	pop	{r7}
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000618 	.word	0x20000618

08008120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008128:	f000 f84c 	bl	80081c4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800812c:	4b04      	ldr	r3, [pc, #16]	; (8008140 <prvIdleTask+0x20>)
 800812e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800813c:	e7f4      	b.n	8008128 <prvIdleTask+0x8>
 800813e:	bf00      	nop
 8008140:	e000ed04 	.word	0xe000ed04

08008144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800814a:	2300      	movs	r3, #0
 800814c:	607b      	str	r3, [r7, #4]
 800814e:	e00c      	b.n	800816a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	4613      	mov	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4a12      	ldr	r2, [pc, #72]	; (80081a4 <prvInitialiseTaskLists+0x60>)
 800815c:	4413      	add	r3, r2
 800815e:	4618      	mov	r0, r3
 8008160:	f7fe fbce 	bl	8006900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3301      	adds	r3, #1
 8008168:	607b      	str	r3, [r7, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b06      	cmp	r3, #6
 800816e:	d9ef      	bls.n	8008150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008170:	480d      	ldr	r0, [pc, #52]	; (80081a8 <prvInitialiseTaskLists+0x64>)
 8008172:	f7fe fbc5 	bl	8006900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008176:	480d      	ldr	r0, [pc, #52]	; (80081ac <prvInitialiseTaskLists+0x68>)
 8008178:	f7fe fbc2 	bl	8006900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800817c:	480c      	ldr	r0, [pc, #48]	; (80081b0 <prvInitialiseTaskLists+0x6c>)
 800817e:	f7fe fbbf 	bl	8006900 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008182:	480c      	ldr	r0, [pc, #48]	; (80081b4 <prvInitialiseTaskLists+0x70>)
 8008184:	f7fe fbbc 	bl	8006900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008188:	480b      	ldr	r0, [pc, #44]	; (80081b8 <prvInitialiseTaskLists+0x74>)
 800818a:	f7fe fbb9 	bl	8006900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800818e:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <prvInitialiseTaskLists+0x78>)
 8008190:	4a05      	ldr	r2, [pc, #20]	; (80081a8 <prvInitialiseTaskLists+0x64>)
 8008192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008194:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <prvInitialiseTaskLists+0x7c>)
 8008196:	4a05      	ldr	r2, [pc, #20]	; (80081ac <prvInitialiseTaskLists+0x68>)
 8008198:	601a      	str	r2, [r3, #0]
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000508 	.word	0x20000508
 80081a8:	20000594 	.word	0x20000594
 80081ac:	200005a8 	.word	0x200005a8
 80081b0:	200005c4 	.word	0x200005c4
 80081b4:	200005d8 	.word	0x200005d8
 80081b8:	200005f0 	.word	0x200005f0
 80081bc:	200005bc 	.word	0x200005bc
 80081c0:	200005c0 	.word	0x200005c0

080081c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081ca:	e019      	b.n	8008200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081cc:	f000 fbae 	bl	800892c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80081d0:	4b10      	ldr	r3, [pc, #64]	; (8008214 <prvCheckTasksWaitingTermination+0x50>)
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3304      	adds	r3, #4
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fc15 	bl	8006a0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081e2:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <prvCheckTasksWaitingTermination+0x54>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	4a0b      	ldr	r2, [pc, #44]	; (8008218 <prvCheckTasksWaitingTermination+0x54>)
 80081ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081ec:	4b0b      	ldr	r3, [pc, #44]	; (800821c <prvCheckTasksWaitingTermination+0x58>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	4a0a      	ldr	r2, [pc, #40]	; (800821c <prvCheckTasksWaitingTermination+0x58>)
 80081f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081f6:	f000 fbc9 	bl	800898c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f810 	bl	8008220 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008200:	4b06      	ldr	r3, [pc, #24]	; (800821c <prvCheckTasksWaitingTermination+0x58>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e1      	bne.n	80081cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	200005d8 	.word	0x200005d8
 8008218:	20000604 	.word	0x20000604
 800821c:	200005ec 	.word	0x200005ec

08008220 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800822e:	2b00      	cmp	r3, #0
 8008230:	d108      	bne.n	8008244 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fd3c 	bl	8008cb4 <vPortFree>
				vPortFree( pxTCB );
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fd39 	bl	8008cb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008242:	e018      	b.n	8008276 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800824a:	2b01      	cmp	r3, #1
 800824c:	d103      	bne.n	8008256 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fd30 	bl	8008cb4 <vPortFree>
	}
 8008254:	e00f      	b.n	8008276 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800825c:	2b02      	cmp	r3, #2
 800825e:	d00a      	beq.n	8008276 <prvDeleteTCB+0x56>
	__asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	60fb      	str	r3, [r7, #12]
}
 8008272:	bf00      	nop
 8008274:	e7fe      	b.n	8008274 <prvDeleteTCB+0x54>
	}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008286:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <prvResetNextTaskUnblockTime+0x40>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <prvResetNextTaskUnblockTime+0x14>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <prvResetNextTaskUnblockTime+0x16>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d004      	beq.n	80082a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800829a:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <prvResetNextTaskUnblockTime+0x44>)
 800829c:	f04f 32ff 	mov.w	r2, #4294967295
 80082a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082a2:	e008      	b.n	80082b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80082a4:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <prvResetNextTaskUnblockTime+0x40>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	4a04      	ldr	r2, [pc, #16]	; (80082c4 <prvResetNextTaskUnblockTime+0x44>)
 80082b4:	6013      	str	r3, [r2, #0]
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr
 80082c0:	200005bc 	.word	0x200005bc
 80082c4:	20000624 	.word	0x20000624

080082c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082ce:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <xTaskGetSchedulerState+0x34>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d102      	bne.n	80082dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082d6:	2301      	movs	r3, #1
 80082d8:	607b      	str	r3, [r7, #4]
 80082da:	e008      	b.n	80082ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082dc:	4b08      	ldr	r3, [pc, #32]	; (8008300 <xTaskGetSchedulerState+0x38>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d102      	bne.n	80082ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082e4:	2302      	movs	r3, #2
 80082e6:	607b      	str	r3, [r7, #4]
 80082e8:	e001      	b.n	80082ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082ee:	687b      	ldr	r3, [r7, #4]
	}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bc80      	pop	{r7}
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	20000610 	.word	0x20000610
 8008300:	2000062c 	.word	0x2000062c

08008304 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d06e      	beq.n	80083f8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831e:	4b39      	ldr	r3, [pc, #228]	; (8008404 <xTaskPriorityInherit+0x100>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	429a      	cmp	r2, r3
 8008326:	d25e      	bcs.n	80083e6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	db06      	blt.n	800833e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008330:	4b34      	ldr	r3, [pc, #208]	; (8008404 <xTaskPriorityInherit+0x100>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008336:	f1c3 0207 	rsb	r2, r3, #7
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	6959      	ldr	r1, [r3, #20]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4a2e      	ldr	r2, [pc, #184]	; (8008408 <xTaskPriorityInherit+0x104>)
 8008350:	4413      	add	r3, r2
 8008352:	4299      	cmp	r1, r3
 8008354:	d101      	bne.n	800835a <xTaskPriorityInherit+0x56>
 8008356:	2301      	movs	r3, #1
 8008358:	e000      	b.n	800835c <xTaskPriorityInherit+0x58>
 800835a:	2300      	movs	r3, #0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d03a      	beq.n	80083d6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3304      	adds	r3, #4
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fb51 	bl	8006a0c <uxListRemove>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d115      	bne.n	800839c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008374:	4924      	ldr	r1, [pc, #144]	; (8008408 <xTaskPriorityInherit+0x104>)
 8008376:	4613      	mov	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	440b      	add	r3, r1
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10a      	bne.n	800839c <xTaskPriorityInherit+0x98>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	2201      	movs	r2, #1
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	43da      	mvns	r2, r3
 8008392:	4b1e      	ldr	r3, [pc, #120]	; (800840c <xTaskPriorityInherit+0x108>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4013      	ands	r3, r2
 8008398:	4a1c      	ldr	r2, [pc, #112]	; (800840c <xTaskPriorityInherit+0x108>)
 800839a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800839c:	4b19      	ldr	r3, [pc, #100]	; (8008404 <xTaskPriorityInherit+0x100>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083aa:	2201      	movs	r2, #1
 80083ac:	409a      	lsls	r2, r3
 80083ae:	4b17      	ldr	r3, [pc, #92]	; (800840c <xTaskPriorityInherit+0x108>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	4a15      	ldr	r2, [pc, #84]	; (800840c <xTaskPriorityInherit+0x108>)
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4a10      	ldr	r2, [pc, #64]	; (8008408 <xTaskPriorityInherit+0x104>)
 80083c6:	441a      	add	r2, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	f7fe fac1 	bl	8006956 <vListInsertEnd>
 80083d4:	e004      	b.n	80083e0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083d6:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <xTaskPriorityInherit+0x100>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80083e0:	2301      	movs	r3, #1
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	e008      	b.n	80083f8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ea:	4b06      	ldr	r3, [pc, #24]	; (8008404 <xTaskPriorityInherit+0x100>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d201      	bcs.n	80083f8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083f8:	68fb      	ldr	r3, [r7, #12]
	}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000504 	.word	0x20000504
 8008408:	20000508 	.word	0x20000508
 800840c:	2000060c 	.word	0x2000060c

08008410 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d06e      	beq.n	8008504 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008426:	4b3a      	ldr	r3, [pc, #232]	; (8008510 <xTaskPriorityDisinherit+0x100>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	429a      	cmp	r2, r3
 800842e:	d00a      	beq.n	8008446 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60fb      	str	r3, [r7, #12]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10a      	bne.n	8008464 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	60bb      	str	r3, [r7, #8]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008468:	1e5a      	subs	r2, r3, #1
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008476:	429a      	cmp	r2, r3
 8008478:	d044      	beq.n	8008504 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800847e:	2b00      	cmp	r3, #0
 8008480:	d140      	bne.n	8008504 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	3304      	adds	r3, #4
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fac0 	bl	8006a0c <uxListRemove>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d115      	bne.n	80084be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008496:	491f      	ldr	r1, [pc, #124]	; (8008514 <xTaskPriorityDisinherit+0x104>)
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <xTaskPriorityDisinherit+0xae>
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	2201      	movs	r2, #1
 80084ae:	fa02 f303 	lsl.w	r3, r2, r3
 80084b2:	43da      	mvns	r2, r3
 80084b4:	4b18      	ldr	r3, [pc, #96]	; (8008518 <xTaskPriorityDisinherit+0x108>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4013      	ands	r3, r2
 80084ba:	4a17      	ldr	r2, [pc, #92]	; (8008518 <xTaskPriorityDisinherit+0x108>)
 80084bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ca:	f1c3 0207 	rsb	r2, r3, #7
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	2201      	movs	r2, #1
 80084d8:	409a      	lsls	r2, r3
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <xTaskPriorityDisinherit+0x108>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4313      	orrs	r3, r2
 80084e0:	4a0d      	ldr	r2, [pc, #52]	; (8008518 <xTaskPriorityDisinherit+0x108>)
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4a08      	ldr	r2, [pc, #32]	; (8008514 <xTaskPriorityDisinherit+0x104>)
 80084f2:	441a      	add	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	3304      	adds	r3, #4
 80084f8:	4619      	mov	r1, r3
 80084fa:	4610      	mov	r0, r2
 80084fc:	f7fe fa2b 	bl	8006956 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008500:	2301      	movs	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008504:	697b      	ldr	r3, [r7, #20]
	}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000504 	.word	0x20000504
 8008514:	20000508 	.word	0x20000508
 8008518:	2000060c 	.word	0x2000060c

0800851c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800852a:	2301      	movs	r3, #1
 800852c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 8088 	beq.w	8008646 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10a      	bne.n	8008554 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	60fb      	str	r3, [r7, #12]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d902      	bls.n	8008564 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	61fb      	str	r3, [r7, #28]
 8008562:	e002      	b.n	800856a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008568:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	429a      	cmp	r2, r3
 8008572:	d068      	beq.n	8008646 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	429a      	cmp	r2, r3
 800857c:	d163      	bne.n	8008646 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800857e:	4b34      	ldr	r3, [pc, #208]	; (8008650 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	429a      	cmp	r2, r3
 8008586:	d10a      	bne.n	800859e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	60bb      	str	r3, [r7, #8]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	db04      	blt.n	80085bc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f1c3 0207 	rsb	r2, r3, #7
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	6959      	ldr	r1, [r3, #20]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4a22      	ldr	r2, [pc, #136]	; (8008654 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80085cc:	4413      	add	r3, r2
 80085ce:	4299      	cmp	r1, r3
 80085d0:	d101      	bne.n	80085d6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e000      	b.n	80085d8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80085d6:	2300      	movs	r3, #0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d034      	beq.n	8008646 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fa13 	bl	8006a0c <uxListRemove>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d115      	bne.n	8008618 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f0:	4918      	ldr	r1, [pc, #96]	; (8008654 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	2201      	movs	r2, #1
 8008608:	fa02 f303 	lsl.w	r3, r2, r3
 800860c:	43da      	mvns	r2, r3
 800860e:	4b12      	ldr	r3, [pc, #72]	; (8008658 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4013      	ands	r3, r2
 8008614:	4a10      	ldr	r2, [pc, #64]	; (8008658 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008616:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	2201      	movs	r2, #1
 800861e:	409a      	lsls	r2, r3
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4313      	orrs	r3, r2
 8008626:	4a0c      	ldr	r2, [pc, #48]	; (8008658 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4a07      	ldr	r2, [pc, #28]	; (8008654 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008638:	441a      	add	r2, r3
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fe f988 	bl	8006956 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008646:	bf00      	nop
 8008648:	3720      	adds	r7, #32
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000504 	.word	0x20000504
 8008654:	20000508 	.word	0x20000508
 8008658:	2000060c 	.word	0x2000060c

0800865c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <pvTaskIncrementMutexHeldCount+0x24>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008668:	4b05      	ldr	r3, [pc, #20]	; (8008680 <pvTaskIncrementMutexHeldCount+0x24>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800866e:	3201      	adds	r2, #1
 8008670:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008672:	4b03      	ldr	r3, [pc, #12]	; (8008680 <pvTaskIncrementMutexHeldCount+0x24>)
 8008674:	681b      	ldr	r3, [r3, #0]
	}
 8008676:	4618      	mov	r0, r3
 8008678:	46bd      	mov	sp, r7
 800867a:	bc80      	pop	{r7}
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	20000504 	.word	0x20000504

08008684 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800868e:	4b29      	ldr	r3, [pc, #164]	; (8008734 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008694:	4b28      	ldr	r3, [pc, #160]	; (8008738 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3304      	adds	r3, #4
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe f9b6 	bl	8006a0c <uxListRemove>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10b      	bne.n	80086be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80086a6:	4b24      	ldr	r3, [pc, #144]	; (8008738 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	2201      	movs	r2, #1
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	43da      	mvns	r2, r3
 80086b4:	4b21      	ldr	r3, [pc, #132]	; (800873c <prvAddCurrentTaskToDelayedList+0xb8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4013      	ands	r3, r2
 80086ba:	4a20      	ldr	r2, [pc, #128]	; (800873c <prvAddCurrentTaskToDelayedList+0xb8>)
 80086bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c4:	d10a      	bne.n	80086dc <prvAddCurrentTaskToDelayedList+0x58>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d007      	beq.n	80086dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086cc:	4b1a      	ldr	r3, [pc, #104]	; (8008738 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3304      	adds	r3, #4
 80086d2:	4619      	mov	r1, r3
 80086d4:	481a      	ldr	r0, [pc, #104]	; (8008740 <prvAddCurrentTaskToDelayedList+0xbc>)
 80086d6:	f7fe f93e 	bl	8006956 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086da:	e026      	b.n	800872a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4413      	add	r3, r2
 80086e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086e4:	4b14      	ldr	r3, [pc, #80]	; (8008738 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d209      	bcs.n	8008708 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086f4:	4b13      	ldr	r3, [pc, #76]	; (8008744 <prvAddCurrentTaskToDelayedList+0xc0>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3304      	adds	r3, #4
 80086fe:	4619      	mov	r1, r3
 8008700:	4610      	mov	r0, r2
 8008702:	f7fe f94b 	bl	800699c <vListInsert>
}
 8008706:	e010      	b.n	800872a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008708:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <prvAddCurrentTaskToDelayedList+0xc4>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <prvAddCurrentTaskToDelayedList+0xb4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3304      	adds	r3, #4
 8008712:	4619      	mov	r1, r3
 8008714:	4610      	mov	r0, r2
 8008716:	f7fe f941 	bl	800699c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800871a:	4b0c      	ldr	r3, [pc, #48]	; (800874c <prvAddCurrentTaskToDelayedList+0xc8>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	429a      	cmp	r2, r3
 8008722:	d202      	bcs.n	800872a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008724:	4a09      	ldr	r2, [pc, #36]	; (800874c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6013      	str	r3, [r2, #0]
}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20000608 	.word	0x20000608
 8008738:	20000504 	.word	0x20000504
 800873c:	2000060c 	.word	0x2000060c
 8008740:	200005f0 	.word	0x200005f0
 8008744:	200005c0 	.word	0x200005c0
 8008748:	200005bc 	.word	0x200005bc
 800874c:	20000624 	.word	0x20000624

08008750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3b04      	subs	r3, #4
 8008760:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3b04      	subs	r3, #4
 800876e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f023 0201 	bic.w	r2, r3, #1
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3b04      	subs	r3, #4
 800877e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <pxPortInitialiseStack+0x54>)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3b14      	subs	r3, #20
 800878a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3b20      	subs	r3, #32
 8008796:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008798:	68fb      	ldr	r3, [r7, #12]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr
 80087a4:	080087a9 	.word	0x080087a9

080087a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087b2:	4b12      	ldr	r3, [pc, #72]	; (80087fc <prvTaskExitError+0x54>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ba:	d00a      	beq.n	80087d2 <prvTaskExitError+0x2a>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	60fb      	str	r3, [r7, #12]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <prvTaskExitError+0x28>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60bb      	str	r3, [r7, #8]
}
 80087e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087e6:	bf00      	nop
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0fc      	beq.n	80087e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087ee:	bf00      	nop
 80087f0:	bf00      	nop
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc80      	pop	{r7}
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	2000000c 	.word	0x2000000c

08008800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008800:	4b07      	ldr	r3, [pc, #28]	; (8008820 <pxCurrentTCBConst2>)
 8008802:	6819      	ldr	r1, [r3, #0]
 8008804:	6808      	ldr	r0, [r1, #0]
 8008806:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800880a:	f380 8809 	msr	PSP, r0
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f04f 0000 	mov.w	r0, #0
 8008816:	f380 8811 	msr	BASEPRI, r0
 800881a:	f04e 0e0d 	orr.w	lr, lr, #13
 800881e:	4770      	bx	lr

08008820 <pxCurrentTCBConst2>:
 8008820:	20000504 	.word	0x20000504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop

08008828 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008828:	4806      	ldr	r0, [pc, #24]	; (8008844 <prvPortStartFirstTask+0x1c>)
 800882a:	6800      	ldr	r0, [r0, #0]
 800882c:	6800      	ldr	r0, [r0, #0]
 800882e:	f380 8808 	msr	MSP, r0
 8008832:	b662      	cpsie	i
 8008834:	b661      	cpsie	f
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	df00      	svc	0
 8008840:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008842:	bf00      	nop
 8008844:	e000ed08 	.word	0xe000ed08

08008848 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800884e:	4b32      	ldr	r3, [pc, #200]	; (8008918 <xPortStartScheduler+0xd0>)
 8008850:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	22ff      	movs	r2, #255	; 0xff
 800885e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008870:	b2da      	uxtb	r2, r3
 8008872:	4b2a      	ldr	r3, [pc, #168]	; (800891c <xPortStartScheduler+0xd4>)
 8008874:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008876:	4b2a      	ldr	r3, [pc, #168]	; (8008920 <xPortStartScheduler+0xd8>)
 8008878:	2207      	movs	r2, #7
 800887a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800887c:	e009      	b.n	8008892 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800887e:	4b28      	ldr	r3, [pc, #160]	; (8008920 <xPortStartScheduler+0xd8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3b01      	subs	r3, #1
 8008884:	4a26      	ldr	r2, [pc, #152]	; (8008920 <xPortStartScheduler+0xd8>)
 8008886:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	b2db      	uxtb	r3, r3
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	b2db      	uxtb	r3, r3
 8008890:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008892:	78fb      	ldrb	r3, [r7, #3]
 8008894:	b2db      	uxtb	r3, r3
 8008896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889a:	2b80      	cmp	r3, #128	; 0x80
 800889c:	d0ef      	beq.n	800887e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800889e:	4b20      	ldr	r3, [pc, #128]	; (8008920 <xPortStartScheduler+0xd8>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f1c3 0307 	rsb	r3, r3, #7
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d00a      	beq.n	80088c0 <xPortStartScheduler+0x78>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	60bb      	str	r3, [r7, #8]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088c0:	4b17      	ldr	r3, [pc, #92]	; (8008920 <xPortStartScheduler+0xd8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	021b      	lsls	r3, r3, #8
 80088c6:	4a16      	ldr	r2, [pc, #88]	; (8008920 <xPortStartScheduler+0xd8>)
 80088c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088ca:	4b15      	ldr	r3, [pc, #84]	; (8008920 <xPortStartScheduler+0xd8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088d2:	4a13      	ldr	r2, [pc, #76]	; (8008920 <xPortStartScheduler+0xd8>)
 80088d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088de:	4b11      	ldr	r3, [pc, #68]	; (8008924 <xPortStartScheduler+0xdc>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a10      	ldr	r2, [pc, #64]	; (8008924 <xPortStartScheduler+0xdc>)
 80088e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088ea:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <xPortStartScheduler+0xdc>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a0d      	ldr	r2, [pc, #52]	; (8008924 <xPortStartScheduler+0xdc>)
 80088f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088f6:	f000 f8b9 	bl	8008a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088fa:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <xPortStartScheduler+0xe0>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008900:	f7ff ff92 	bl	8008828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008904:	f7ff faa8 	bl	8007e58 <vTaskSwitchContext>
	prvTaskExitError();
 8008908:	f7ff ff4e 	bl	80087a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	e000e400 	.word	0xe000e400
 800891c:	20000630 	.word	0x20000630
 8008920:	20000634 	.word	0x20000634
 8008924:	e000ed20 	.word	0xe000ed20
 8008928:	2000000c 	.word	0x2000000c

0800892c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	607b      	str	r3, [r7, #4]
}
 8008944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008946:	4b0f      	ldr	r3, [pc, #60]	; (8008984 <vPortEnterCritical+0x58>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	4a0d      	ldr	r2, [pc, #52]	; (8008984 <vPortEnterCritical+0x58>)
 800894e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008950:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <vPortEnterCritical+0x58>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d10f      	bne.n	8008978 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008958:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <vPortEnterCritical+0x5c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <vPortEnterCritical+0x4c>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	603b      	str	r3, [r7, #0]
}
 8008974:	bf00      	nop
 8008976:	e7fe      	b.n	8008976 <vPortEnterCritical+0x4a>
	}
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	bc80      	pop	{r7}
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	2000000c 	.word	0x2000000c
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008992:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <vPortExitCritical+0x4c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10a      	bne.n	80089b0 <vPortExitCritical+0x24>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	607b      	str	r3, [r7, #4]
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089b0:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <vPortExitCritical+0x4c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	4a08      	ldr	r2, [pc, #32]	; (80089d8 <vPortExitCritical+0x4c>)
 80089b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089ba:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <vPortExitCritical+0x4c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d105      	bne.n	80089ce <vPortExitCritical+0x42>
 80089c2:	2300      	movs	r3, #0
 80089c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	f383 8811 	msr	BASEPRI, r3
}
 80089cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr
 80089d8:	2000000c 	.word	0x2000000c
 80089dc:	00000000 	.word	0x00000000

080089e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089e0:	f3ef 8009 	mrs	r0, PSP
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <pxCurrentTCBConst>)
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089f0:	6010      	str	r0, [r2, #0]
 80089f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80089f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089fa:	f380 8811 	msr	BASEPRI, r0
 80089fe:	f7ff fa2b 	bl	8007e58 <vTaskSwitchContext>
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8811 	msr	BASEPRI, r0
 8008a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a0e:	6819      	ldr	r1, [r3, #0]
 8008a10:	6808      	ldr	r0, [r1, #0]
 8008a12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a16:	f380 8809 	msr	PSP, r0
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	4770      	bx	lr

08008a20 <pxCurrentTCBConst>:
 8008a20:	20000504 	.word	0x20000504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop

08008a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	607b      	str	r3, [r7, #4]
}
 8008a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a42:	f7ff f96f 	bl	8007d24 <xTaskIncrementTick>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d003      	beq.n	8008a54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a4c:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <SysTick_Handler+0x40>)
 8008a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	2300      	movs	r3, #0
 8008a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f383 8811 	msr	BASEPRI, r3
}
 8008a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	e000ed04 	.word	0xe000ed04

08008a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a70:	4b0a      	ldr	r3, [pc, #40]	; (8008a9c <vPortSetupTimerInterrupt+0x30>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a76:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <vPortSetupTimerInterrupt+0x34>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a7c:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <vPortSetupTimerInterrupt+0x38>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a09      	ldr	r2, [pc, #36]	; (8008aa8 <vPortSetupTimerInterrupt+0x3c>)
 8008a82:	fba2 2303 	umull	r2, r3, r2, r3
 8008a86:	099b      	lsrs	r3, r3, #6
 8008a88:	4a08      	ldr	r2, [pc, #32]	; (8008aac <vPortSetupTimerInterrupt+0x40>)
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a8e:	4b03      	ldr	r3, [pc, #12]	; (8008a9c <vPortSetupTimerInterrupt+0x30>)
 8008a90:	2207      	movs	r2, #7
 8008a92:	601a      	str	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr
 8008a9c:	e000e010 	.word	0xe000e010
 8008aa0:	e000e018 	.word	0xe000e018
 8008aa4:	20000000 	.word	0x20000000
 8008aa8:	10624dd3 	.word	0x10624dd3
 8008aac:	e000e014 	.word	0xe000e014

08008ab0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ab6:	f3ef 8305 	mrs	r3, IPSR
 8008aba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b0f      	cmp	r3, #15
 8008ac0:	d914      	bls.n	8008aec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ac2:	4a16      	ldr	r2, [pc, #88]	; (8008b1c <vPortValidateInterruptPriority+0x6c>)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008acc:	4b14      	ldr	r3, [pc, #80]	; (8008b20 <vPortValidateInterruptPriority+0x70>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	7afa      	ldrb	r2, [r7, #11]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d20a      	bcs.n	8008aec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	607b      	str	r3, [r7, #4]
}
 8008ae8:	bf00      	nop
 8008aea:	e7fe      	b.n	8008aea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aec:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <vPortValidateInterruptPriority+0x74>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008af4:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <vPortValidateInterruptPriority+0x78>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d90a      	bls.n	8008b12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	603b      	str	r3, [r7, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <vPortValidateInterruptPriority+0x60>
	}
 8008b12:	bf00      	nop
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr
 8008b1c:	e000e3f0 	.word	0xe000e3f0
 8008b20:	20000630 	.word	0x20000630
 8008b24:	e000ed0c 	.word	0xe000ed0c
 8008b28:	20000634 	.word	0x20000634

08008b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08a      	sub	sp, #40	; 0x28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b38:	f7ff f858 	bl	8007bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b3c:	4b58      	ldr	r3, [pc, #352]	; (8008ca0 <pvPortMalloc+0x174>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b44:	f000 f910 	bl	8008d68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b48:	4b56      	ldr	r3, [pc, #344]	; (8008ca4 <pvPortMalloc+0x178>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f040 808e 	bne.w	8008c72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01d      	beq.n	8008b98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d014      	beq.n	8008b98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f023 0307 	bic.w	r3, r3, #7
 8008b74:	3308      	adds	r3, #8
 8008b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <pvPortMalloc+0x6c>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	617b      	str	r3, [r7, #20]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d069      	beq.n	8008c72 <pvPortMalloc+0x146>
 8008b9e:	4b42      	ldr	r3, [pc, #264]	; (8008ca8 <pvPortMalloc+0x17c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d864      	bhi.n	8008c72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ba8:	4b40      	ldr	r3, [pc, #256]	; (8008cac <pvPortMalloc+0x180>)
 8008baa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bac:	4b3f      	ldr	r3, [pc, #252]	; (8008cac <pvPortMalloc+0x180>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bb2:	e004      	b.n	8008bbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d903      	bls.n	8008bd0 <pvPortMalloc+0xa4>
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1f1      	bne.n	8008bb4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bd0:	4b33      	ldr	r3, [pc, #204]	; (8008ca0 <pvPortMalloc+0x174>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d04b      	beq.n	8008c72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2208      	movs	r2, #8
 8008be0:	4413      	add	r3, r2
 8008be2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	1ad2      	subs	r2, r2, r3
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d91f      	bls.n	8008c3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <pvPortMalloc+0xf8>
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	613b      	str	r3, [r7, #16]
}
 8008c20:	bf00      	nop
 8008c22:	e7fe      	b.n	8008c22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c36:	69b8      	ldr	r0, [r7, #24]
 8008c38:	f000 f8f8 	bl	8008e2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ca8 <pvPortMalloc+0x17c>)
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	4a18      	ldr	r2, [pc, #96]	; (8008ca8 <pvPortMalloc+0x17c>)
 8008c48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c4a:	4b17      	ldr	r3, [pc, #92]	; (8008ca8 <pvPortMalloc+0x17c>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4b18      	ldr	r3, [pc, #96]	; (8008cb0 <pvPortMalloc+0x184>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d203      	bcs.n	8008c5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c56:	4b14      	ldr	r3, [pc, #80]	; (8008ca8 <pvPortMalloc+0x17c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a15      	ldr	r2, [pc, #84]	; (8008cb0 <pvPortMalloc+0x184>)
 8008c5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	4b10      	ldr	r3, [pc, #64]	; (8008ca4 <pvPortMalloc+0x178>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	431a      	orrs	r2, r3
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c72:	f7fe ffc9 	bl	8007c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <pvPortMalloc+0x16a>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	60fb      	str	r3, [r7, #12]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <pvPortMalloc+0x168>
	return pvReturn;
 8008c96:	69fb      	ldr	r3, [r7, #28]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3728      	adds	r7, #40	; 0x28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20001240 	.word	0x20001240
 8008ca4:	2000124c 	.word	0x2000124c
 8008ca8:	20001244 	.word	0x20001244
 8008cac:	20001238 	.word	0x20001238
 8008cb0:	20001248 	.word	0x20001248

08008cb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d048      	beq.n	8008d58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	425b      	negs	r3, r3
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4413      	add	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <vPortFree+0xac>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <vPortFree+0x44>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	60fb      	str	r3, [r7, #12]
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00a      	beq.n	8008d16 <vPortFree+0x62>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	60bb      	str	r3, [r7, #8]
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <vPortFree+0xac>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4013      	ands	r3, r2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d019      	beq.n	8008d58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d115      	bne.n	8008d58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <vPortFree+0xac>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	43db      	mvns	r3, r3
 8008d36:	401a      	ands	r2, r3
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d3c:	f7fe ff56 	bl	8007bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <vPortFree+0xb0>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4413      	add	r3, r2
 8008d4a:	4a06      	ldr	r2, [pc, #24]	; (8008d64 <vPortFree+0xb0>)
 8008d4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d4e:	6938      	ldr	r0, [r7, #16]
 8008d50:	f000 f86c 	bl	8008e2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d54:	f7fe ff58 	bl	8007c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d58:	bf00      	nop
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	2000124c 	.word	0x2000124c
 8008d64:	20001244 	.word	0x20001244

08008d68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008d72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d74:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <prvHeapInit+0xac>)
 8008d76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00c      	beq.n	8008d9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3307      	adds	r3, #7
 8008d86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0307 	bic.w	r3, r3, #7
 8008d8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	4a1f      	ldr	r2, [pc, #124]	; (8008e14 <prvHeapInit+0xac>)
 8008d98:	4413      	add	r3, r2
 8008d9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008da0:	4a1d      	ldr	r2, [pc, #116]	; (8008e18 <prvHeapInit+0xb0>)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008da6:	4b1c      	ldr	r3, [pc, #112]	; (8008e18 <prvHeapInit+0xb0>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	4413      	add	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008db4:	2208      	movs	r2, #8
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f023 0307 	bic.w	r3, r3, #7
 8008dc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4a15      	ldr	r2, [pc, #84]	; (8008e1c <prvHeapInit+0xb4>)
 8008dc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dca:	4b14      	ldr	r3, [pc, #80]	; (8008e1c <prvHeapInit+0xb4>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dd2:	4b12      	ldr	r3, [pc, #72]	; (8008e1c <prvHeapInit+0xb4>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008de8:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <prvHeapInit+0xb4>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	4a0a      	ldr	r2, [pc, #40]	; (8008e20 <prvHeapInit+0xb8>)
 8008df6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	4a09      	ldr	r2, [pc, #36]	; (8008e24 <prvHeapInit+0xbc>)
 8008dfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e00:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <prvHeapInit+0xc0>)
 8008e02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e06:	601a      	str	r2, [r3, #0]
}
 8008e08:	bf00      	nop
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	20000638 	.word	0x20000638
 8008e18:	20001238 	.word	0x20001238
 8008e1c:	20001240 	.word	0x20001240
 8008e20:	20001248 	.word	0x20001248
 8008e24:	20001244 	.word	0x20001244
 8008e28:	2000124c 	.word	0x2000124c

08008e2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e34:	4b27      	ldr	r3, [pc, #156]	; (8008ed4 <prvInsertBlockIntoFreeList+0xa8>)
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	e002      	b.n	8008e40 <prvInsertBlockIntoFreeList+0x14>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d8f7      	bhi.n	8008e3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	4413      	add	r3, r2
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d108      	bne.n	8008e6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	441a      	add	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	441a      	add	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d118      	bne.n	8008eb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <prvInsertBlockIntoFreeList+0xac>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d00d      	beq.n	8008eaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	441a      	add	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	e008      	b.n	8008ebc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <prvInsertBlockIntoFreeList+0xac>)
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	e003      	b.n	8008ebc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d002      	beq.n	8008eca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eca:	bf00      	nop
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr
 8008ed4:	20001238 	.word	0x20001238
 8008ed8:	20001240 	.word	0x20001240

08008edc <atoi>:
 8008edc:	220a      	movs	r2, #10
 8008ede:	2100      	movs	r1, #0
 8008ee0:	f000 b8d6 	b.w	8009090 <strtol>

08008ee4 <__errno>:
 8008ee4:	4b01      	ldr	r3, [pc, #4]	; (8008eec <__errno+0x8>)
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20000010 	.word	0x20000010

08008ef0 <__libc_init_array>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	4d0c      	ldr	r5, [pc, #48]	; (8008f28 <__libc_init_array+0x38>)
 8008ef6:	4c0d      	ldr	r4, [pc, #52]	; (8008f2c <__libc_init_array+0x3c>)
 8008ef8:	1b64      	subs	r4, r4, r5
 8008efa:	10a4      	asrs	r4, r4, #2
 8008efc:	42a6      	cmp	r6, r4
 8008efe:	d109      	bne.n	8008f14 <__libc_init_array+0x24>
 8008f00:	f000 f912 	bl	8009128 <_init>
 8008f04:	2600      	movs	r6, #0
 8008f06:	4d0a      	ldr	r5, [pc, #40]	; (8008f30 <__libc_init_array+0x40>)
 8008f08:	4c0a      	ldr	r4, [pc, #40]	; (8008f34 <__libc_init_array+0x44>)
 8008f0a:	1b64      	subs	r4, r4, r5
 8008f0c:	10a4      	asrs	r4, r4, #2
 8008f0e:	42a6      	cmp	r6, r4
 8008f10:	d105      	bne.n	8008f1e <__libc_init_array+0x2e>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f18:	4798      	blx	r3
 8008f1a:	3601      	adds	r6, #1
 8008f1c:	e7ee      	b.n	8008efc <__libc_init_array+0xc>
 8008f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f22:	4798      	blx	r3
 8008f24:	3601      	adds	r6, #1
 8008f26:	e7f2      	b.n	8008f0e <__libc_init_array+0x1e>
 8008f28:	080093d0 	.word	0x080093d0
 8008f2c:	080093d0 	.word	0x080093d0
 8008f30:	080093d0 	.word	0x080093d0
 8008f34:	080093d4 	.word	0x080093d4

08008f38 <__itoa>:
 8008f38:	1e93      	subs	r3, r2, #2
 8008f3a:	2b22      	cmp	r3, #34	; 0x22
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	460c      	mov	r4, r1
 8008f40:	d904      	bls.n	8008f4c <__itoa+0x14>
 8008f42:	2300      	movs	r3, #0
 8008f44:	461c      	mov	r4, r3
 8008f46:	700b      	strb	r3, [r1, #0]
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bd10      	pop	{r4, pc}
 8008f4c:	2a0a      	cmp	r2, #10
 8008f4e:	d109      	bne.n	8008f64 <__itoa+0x2c>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	da07      	bge.n	8008f64 <__itoa+0x2c>
 8008f54:	232d      	movs	r3, #45	; 0x2d
 8008f56:	700b      	strb	r3, [r1, #0]
 8008f58:	2101      	movs	r1, #1
 8008f5a:	4240      	negs	r0, r0
 8008f5c:	4421      	add	r1, r4
 8008f5e:	f000 f8a1 	bl	80090a4 <__utoa>
 8008f62:	e7f1      	b.n	8008f48 <__itoa+0x10>
 8008f64:	2100      	movs	r1, #0
 8008f66:	e7f9      	b.n	8008f5c <__itoa+0x24>

08008f68 <itoa>:
 8008f68:	f7ff bfe6 	b.w	8008f38 <__itoa>

08008f6c <memcpy>:
 8008f6c:	440a      	add	r2, r1
 8008f6e:	4291      	cmp	r1, r2
 8008f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f74:	d100      	bne.n	8008f78 <memcpy+0xc>
 8008f76:	4770      	bx	lr
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7e:	4291      	cmp	r1, r2
 8008f80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f84:	d1f9      	bne.n	8008f7a <memcpy+0xe>
 8008f86:	bd10      	pop	{r4, pc}

08008f88 <memset>:
 8008f88:	4603      	mov	r3, r0
 8008f8a:	4402      	add	r2, r0
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d100      	bne.n	8008f92 <memset+0xa>
 8008f90:	4770      	bx	lr
 8008f92:	f803 1b01 	strb.w	r1, [r3], #1
 8008f96:	e7f9      	b.n	8008f8c <memset+0x4>

08008f98 <_strtol_l.constprop.0>:
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	d001      	beq.n	8008fa6 <_strtol_l.constprop.0+0xe>
 8008fa2:	2b24      	cmp	r3, #36	; 0x24
 8008fa4:	d906      	bls.n	8008fb4 <_strtol_l.constprop.0+0x1c>
 8008fa6:	f7ff ff9d 	bl	8008ee4 <__errno>
 8008faa:	2316      	movs	r3, #22
 8008fac:	6003      	str	r3, [r0, #0]
 8008fae:	2000      	movs	r0, #0
 8008fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb4:	460d      	mov	r5, r1
 8008fb6:	4f35      	ldr	r7, [pc, #212]	; (800908c <_strtol_l.constprop.0+0xf4>)
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fbe:	5de6      	ldrb	r6, [r4, r7]
 8008fc0:	f016 0608 	ands.w	r6, r6, #8
 8008fc4:	d1f8      	bne.n	8008fb8 <_strtol_l.constprop.0+0x20>
 8008fc6:	2c2d      	cmp	r4, #45	; 0x2d
 8008fc8:	d12f      	bne.n	800902a <_strtol_l.constprop.0+0x92>
 8008fca:	2601      	movs	r6, #1
 8008fcc:	782c      	ldrb	r4, [r5, #0]
 8008fce:	1c85      	adds	r5, r0, #2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d057      	beq.n	8009084 <_strtol_l.constprop.0+0xec>
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d109      	bne.n	8008fec <_strtol_l.constprop.0+0x54>
 8008fd8:	2c30      	cmp	r4, #48	; 0x30
 8008fda:	d107      	bne.n	8008fec <_strtol_l.constprop.0+0x54>
 8008fdc:	7828      	ldrb	r0, [r5, #0]
 8008fde:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008fe2:	2858      	cmp	r0, #88	; 0x58
 8008fe4:	d149      	bne.n	800907a <_strtol_l.constprop.0+0xe2>
 8008fe6:	2310      	movs	r3, #16
 8008fe8:	786c      	ldrb	r4, [r5, #1]
 8008fea:	3502      	adds	r5, #2
 8008fec:	2700      	movs	r7, #0
 8008fee:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008ff2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008ff6:	fbbe f9f3 	udiv	r9, lr, r3
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	fb03 ea19 	mls	sl, r3, r9, lr
 8009000:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009004:	f1bc 0f09 	cmp.w	ip, #9
 8009008:	d814      	bhi.n	8009034 <_strtol_l.constprop.0+0x9c>
 800900a:	4664      	mov	r4, ip
 800900c:	42a3      	cmp	r3, r4
 800900e:	dd22      	ble.n	8009056 <_strtol_l.constprop.0+0xbe>
 8009010:	2f00      	cmp	r7, #0
 8009012:	db1d      	blt.n	8009050 <_strtol_l.constprop.0+0xb8>
 8009014:	4581      	cmp	r9, r0
 8009016:	d31b      	bcc.n	8009050 <_strtol_l.constprop.0+0xb8>
 8009018:	d101      	bne.n	800901e <_strtol_l.constprop.0+0x86>
 800901a:	45a2      	cmp	sl, r4
 800901c:	db18      	blt.n	8009050 <_strtol_l.constprop.0+0xb8>
 800901e:	2701      	movs	r7, #1
 8009020:	fb00 4003 	mla	r0, r0, r3, r4
 8009024:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009028:	e7ea      	b.n	8009000 <_strtol_l.constprop.0+0x68>
 800902a:	2c2b      	cmp	r4, #43	; 0x2b
 800902c:	bf04      	itt	eq
 800902e:	782c      	ldrbeq	r4, [r5, #0]
 8009030:	1c85      	addeq	r5, r0, #2
 8009032:	e7cd      	b.n	8008fd0 <_strtol_l.constprop.0+0x38>
 8009034:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009038:	f1bc 0f19 	cmp.w	ip, #25
 800903c:	d801      	bhi.n	8009042 <_strtol_l.constprop.0+0xaa>
 800903e:	3c37      	subs	r4, #55	; 0x37
 8009040:	e7e4      	b.n	800900c <_strtol_l.constprop.0+0x74>
 8009042:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009046:	f1bc 0f19 	cmp.w	ip, #25
 800904a:	d804      	bhi.n	8009056 <_strtol_l.constprop.0+0xbe>
 800904c:	3c57      	subs	r4, #87	; 0x57
 800904e:	e7dd      	b.n	800900c <_strtol_l.constprop.0+0x74>
 8009050:	f04f 37ff 	mov.w	r7, #4294967295
 8009054:	e7e6      	b.n	8009024 <_strtol_l.constprop.0+0x8c>
 8009056:	2f00      	cmp	r7, #0
 8009058:	da07      	bge.n	800906a <_strtol_l.constprop.0+0xd2>
 800905a:	2322      	movs	r3, #34	; 0x22
 800905c:	4670      	mov	r0, lr
 800905e:	f8c8 3000 	str.w	r3, [r8]
 8009062:	2a00      	cmp	r2, #0
 8009064:	d0a4      	beq.n	8008fb0 <_strtol_l.constprop.0+0x18>
 8009066:	1e69      	subs	r1, r5, #1
 8009068:	e005      	b.n	8009076 <_strtol_l.constprop.0+0xde>
 800906a:	b106      	cbz	r6, 800906e <_strtol_l.constprop.0+0xd6>
 800906c:	4240      	negs	r0, r0
 800906e:	2a00      	cmp	r2, #0
 8009070:	d09e      	beq.n	8008fb0 <_strtol_l.constprop.0+0x18>
 8009072:	2f00      	cmp	r7, #0
 8009074:	d1f7      	bne.n	8009066 <_strtol_l.constprop.0+0xce>
 8009076:	6011      	str	r1, [r2, #0]
 8009078:	e79a      	b.n	8008fb0 <_strtol_l.constprop.0+0x18>
 800907a:	2430      	movs	r4, #48	; 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1b5      	bne.n	8008fec <_strtol_l.constprop.0+0x54>
 8009080:	2308      	movs	r3, #8
 8009082:	e7b3      	b.n	8008fec <_strtol_l.constprop.0+0x54>
 8009084:	2c30      	cmp	r4, #48	; 0x30
 8009086:	d0a9      	beq.n	8008fdc <_strtol_l.constprop.0+0x44>
 8009088:	230a      	movs	r3, #10
 800908a:	e7af      	b.n	8008fec <_strtol_l.constprop.0+0x54>
 800908c:	080092ce 	.word	0x080092ce

08009090 <strtol>:
 8009090:	4613      	mov	r3, r2
 8009092:	460a      	mov	r2, r1
 8009094:	4601      	mov	r1, r0
 8009096:	4802      	ldr	r0, [pc, #8]	; (80090a0 <strtol+0x10>)
 8009098:	6800      	ldr	r0, [r0, #0]
 800909a:	f7ff bf7d 	b.w	8008f98 <_strtol_l.constprop.0>
 800909e:	bf00      	nop
 80090a0:	20000010 	.word	0x20000010

080090a4 <__utoa>:
 80090a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a6:	b08b      	sub	sp, #44	; 0x2c
 80090a8:	4605      	mov	r5, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	466e      	mov	r6, sp
 80090ae:	4c1d      	ldr	r4, [pc, #116]	; (8009124 <__utoa+0x80>)
 80090b0:	f104 0c20 	add.w	ip, r4, #32
 80090b4:	4637      	mov	r7, r6
 80090b6:	6820      	ldr	r0, [r4, #0]
 80090b8:	6861      	ldr	r1, [r4, #4]
 80090ba:	3408      	adds	r4, #8
 80090bc:	c703      	stmia	r7!, {r0, r1}
 80090be:	4564      	cmp	r4, ip
 80090c0:	463e      	mov	r6, r7
 80090c2:	d1f7      	bne.n	80090b4 <__utoa+0x10>
 80090c4:	7921      	ldrb	r1, [r4, #4]
 80090c6:	6820      	ldr	r0, [r4, #0]
 80090c8:	7139      	strb	r1, [r7, #4]
 80090ca:	1e91      	subs	r1, r2, #2
 80090cc:	2922      	cmp	r1, #34	; 0x22
 80090ce:	6038      	str	r0, [r7, #0]
 80090d0:	f04f 0100 	mov.w	r1, #0
 80090d4:	d904      	bls.n	80090e0 <__utoa+0x3c>
 80090d6:	7019      	strb	r1, [r3, #0]
 80090d8:	460b      	mov	r3, r1
 80090da:	4618      	mov	r0, r3
 80090dc:	b00b      	add	sp, #44	; 0x2c
 80090de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e0:	1e58      	subs	r0, r3, #1
 80090e2:	4684      	mov	ip, r0
 80090e4:	fbb5 f7f2 	udiv	r7, r5, r2
 80090e8:	fb02 5617 	mls	r6, r2, r7, r5
 80090ec:	3628      	adds	r6, #40	; 0x28
 80090ee:	446e      	add	r6, sp
 80090f0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80090f4:	460c      	mov	r4, r1
 80090f6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80090fa:	462e      	mov	r6, r5
 80090fc:	42b2      	cmp	r2, r6
 80090fe:	463d      	mov	r5, r7
 8009100:	f101 0101 	add.w	r1, r1, #1
 8009104:	d9ee      	bls.n	80090e4 <__utoa+0x40>
 8009106:	2200      	movs	r2, #0
 8009108:	545a      	strb	r2, [r3, r1]
 800910a:	1919      	adds	r1, r3, r4
 800910c:	1aa5      	subs	r5, r4, r2
 800910e:	42aa      	cmp	r2, r5
 8009110:	dae3      	bge.n	80090da <__utoa+0x36>
 8009112:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009116:	780e      	ldrb	r6, [r1, #0]
 8009118:	3201      	adds	r2, #1
 800911a:	7006      	strb	r6, [r0, #0]
 800911c:	f801 5901 	strb.w	r5, [r1], #-1
 8009120:	e7f4      	b.n	800910c <__utoa+0x68>
 8009122:	bf00      	nop
 8009124:	080092a8 	.word	0x080092a8

08009128 <_init>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	bf00      	nop
 800912c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912e:	bc08      	pop	{r3}
 8009130:	469e      	mov	lr, r3
 8009132:	4770      	bx	lr

08009134 <_fini>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	bf00      	nop
 8009138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913a:	bc08      	pop	{r3}
 800913c:	469e      	mov	lr, r3
 800913e:	4770      	bx	lr
