
DrixitChallenge_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006114  08006114  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006114  08006114  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006114  08006114  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800611c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000118c  20000074  08006190  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001200  08006190  00021200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001659a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ed  00000000  00000000  00036637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00039a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  0003b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4e2  00000000  00000000  0003c648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185ba  00000000  00000000  00056b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097eb3  00000000  00000000  0006f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106f97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006108  00000000  00000000  00106fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ed8 	.word	0x08005ed8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005ed8 	.word	0x08005ed8

08000150 <StoreUSARTData>:

//---------------------------------
//-Store in a buffer all the receive data (circular buffer)
//---------------------------------

bool_t StoreUSARTData(uint8_t* data, uint16_t size){
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	460b      	mov	r3, r1
 800015a:	807b      	strh	r3, [r7, #2]

	bool_t retVal = FALSE;
 800015c:	2300      	movs	r3, #0
 800015e:	73fb      	strb	r3, [r7, #15]

	uint8_t auxSize = 0;
 8000160:	2300      	movs	r3, #0
 8000162:	73bb      	strb	r3, [r7, #14]

	if((Escritura_BufferUsart1 + size) >= UART_MAX_RECEIVE_DATA){
 8000164:	4b2b      	ldr	r3, [pc, #172]	; (8000214 <StoreUSARTData+0xc4>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	461a      	mov	r2, r3
 800016a:	887b      	ldrh	r3, [r7, #2]
 800016c:	4413      	add	r3, r2
 800016e:	2b18      	cmp	r3, #24
 8000170:	dd29      	ble.n	80001c6 <StoreUSARTData+0x76>

		auxSize = (Escritura_BufferUsart1 + size) - UART_MAX_RECEIVE_DATA;
 8000172:	887b      	ldrh	r3, [r7, #2]
 8000174:	b2da      	uxtb	r2, r3
 8000176:	4b27      	ldr	r3, [pc, #156]	; (8000214 <StoreUSARTData+0xc4>)
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	4413      	add	r3, r2
 800017c:	b2db      	uxtb	r3, r3
 800017e:	3b19      	subs	r3, #25
 8000180:	73bb      	strb	r3, [r7, #14]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, (size - auxSize));
 8000182:	4b24      	ldr	r3, [pc, #144]	; (8000214 <StoreUSARTData+0xc4>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	461a      	mov	r2, r3
 8000188:	4b23      	ldr	r3, [pc, #140]	; (8000218 <StoreUSARTData+0xc8>)
 800018a:	18d0      	adds	r0, r2, r3
 800018c:	887a      	ldrh	r2, [r7, #2]
 800018e:	7bbb      	ldrb	r3, [r7, #14]
 8000190:	1ad3      	subs	r3, r2, r3
 8000192:	461a      	mov	r2, r3
 8000194:	6879      	ldr	r1, [r7, #4]
 8000196:	f005 fdc1 	bl	8005d1c <memcpy>

		Escritura_BufferUsart1 = 0;
 800019a:	4b1e      	ldr	r3, [pc, #120]	; (8000214 <StoreUSARTData+0xc4>)
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), (data + (size - auxSize)), auxSize);
 80001a0:	4b1c      	ldr	r3, [pc, #112]	; (8000214 <StoreUSARTData+0xc4>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	461a      	mov	r2, r3
 80001a6:	4b1c      	ldr	r3, [pc, #112]	; (8000218 <StoreUSARTData+0xc8>)
 80001a8:	18d0      	adds	r0, r2, r3
 80001aa:	887a      	ldrh	r2, [r7, #2]
 80001ac:	7bbb      	ldrb	r3, [r7, #14]
 80001ae:	1ad3      	subs	r3, r2, r3
 80001b0:	461a      	mov	r2, r3
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	4413      	add	r3, r2
 80001b6:	7bba      	ldrb	r2, [r7, #14]
 80001b8:	4619      	mov	r1, r3
 80001ba:	f005 fdaf 	bl	8005d1c <memcpy>

		Escritura_BufferUsart1 = auxSize;
 80001be:	4a15      	ldr	r2, [pc, #84]	; (8000214 <StoreUSARTData+0xc4>)
 80001c0:	7bbb      	ldrb	r3, [r7, #14]
 80001c2:	7013      	strb	r3, [r2, #0]
 80001c4:	e011      	b.n	80001ea <StoreUSARTData+0x9a>
	}

	else {

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, size);
 80001c6:	4b13      	ldr	r3, [pc, #76]	; (8000214 <StoreUSARTData+0xc4>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	461a      	mov	r2, r3
 80001cc:	4b12      	ldr	r3, [pc, #72]	; (8000218 <StoreUSARTData+0xc8>)
 80001ce:	4413      	add	r3, r2
 80001d0:	887a      	ldrh	r2, [r7, #2]
 80001d2:	6879      	ldr	r1, [r7, #4]
 80001d4:	4618      	mov	r0, r3
 80001d6:	f005 fda1 	bl	8005d1c <memcpy>

		Escritura_BufferUsart1 = Escritura_BufferUsart1 + size;
 80001da:	887b      	ldrh	r3, [r7, #2]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <StoreUSARTData+0xc4>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <StoreUSARTData+0xc4>)
 80001e8:	701a      	strb	r2, [r3, #0]
	}

	if(BufferUsart1[Escritura_BufferUsart1 - 1] == '\r' || BufferUsart1[Escritura_BufferUsart1 - 1] == '\n'){
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <StoreUSARTData+0xc4>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <StoreUSARTData+0xc8>)
 80001f2:	5cd3      	ldrb	r3, [r2, r3]
 80001f4:	2b0d      	cmp	r3, #13
 80001f6:	d006      	beq.n	8000206 <StoreUSARTData+0xb6>
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <StoreUSARTData+0xc4>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	3b01      	subs	r3, #1
 80001fe:	4a06      	ldr	r2, [pc, #24]	; (8000218 <StoreUSARTData+0xc8>)
 8000200:	5cd3      	ldrb	r3, [r2, r3]
 8000202:	2b0a      	cmp	r3, #10
 8000204:	d101      	bne.n	800020a <StoreUSARTData+0xba>

		retVal = TRUE;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
	}

	return retVal;
 800020a:	7bfb      	ldrb	r3, [r7, #15]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200000a9 	.word	0x200000a9
 8000218:	20000090 	.word	0x20000090

0800021c <DecodeReceivedData>:

//---------------------------------
//-Decode the data received from uart
//---------------------------------

bool_t DecodeReceivedData( uint16_t* NumberReceived ){
 800021c:	b580      	push	{r7, lr}
 800021e:	b08a      	sub	sp, #40	; 0x28
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]

	bool_t retVal = FALSE;
 8000224:	2300      	movs	r3, #0
 8000226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t j = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	char DatosRecibidos[UART_MAX_RECEIVE_DATA];

	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 8000230:	e03f      	b.n	80002b2 <DecodeReceivedData+0x96>

		// I remove the characters that are not information
		// If it is any of these characters, nothing is done.
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 8000232:	4b31      	ldr	r3, [pc, #196]	; (80002f8 <DecodeReceivedData+0xdc>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	4b30      	ldr	r3, [pc, #192]	; (80002fc <DecodeReceivedData+0xe0>)
 800023a:	5c9b      	ldrb	r3, [r3, r2]
 800023c:	2b0d      	cmp	r3, #13
 800023e:	d02b      	beq.n	8000298 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <DecodeReceivedData+0xdc>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	461a      	mov	r2, r3
 8000246:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <DecodeReceivedData+0xe0>)
 8000248:	5c9b      	ldrb	r3, [r3, r2]
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 800024a:	2b0a      	cmp	r3, #10
 800024c:	d024      	beq.n	8000298 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <DecodeReceivedData+0xdc>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	461a      	mov	r2, r3
 8000254:	4b29      	ldr	r3, [pc, #164]	; (80002fc <DecodeReceivedData+0xe0>)
 8000256:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 8000258:	2b00      	cmp	r3, #0
 800025a:	d01d      	beq.n	8000298 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 800025c:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <DecodeReceivedData+0xdc>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	461a      	mov	r2, r3
 8000262:	4b26      	ldr	r3, [pc, #152]	; (80002fc <DecodeReceivedData+0xe0>)
 8000264:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 8000266:	2b20      	cmp	r3, #32
 8000268:	d016      	beq.n	8000298 <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == 0xff){}
 800026a:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <DecodeReceivedData+0xdc>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	461a      	mov	r2, r3
 8000270:	4b22      	ldr	r3, [pc, #136]	; (80002fc <DecodeReceivedData+0xe0>)
 8000272:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 8000274:	2bff      	cmp	r3, #255	; 0xff
 8000276:	d00f      	beq.n	8000298 <DecodeReceivedData+0x7c>

		else {

			*(DatosRecibidos + j) = BufferUsart1[Lectura_BufferUsart1];
 8000278:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <DecodeReceivedData+0xdc>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	4619      	mov	r1, r3
 800027e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000282:	f107 020c 	add.w	r2, r7, #12
 8000286:	4413      	add	r3, r2
 8000288:	4a1c      	ldr	r2, [pc, #112]	; (80002fc <DecodeReceivedData+0xe0>)
 800028a:	5c52      	ldrb	r2, [r2, r1]
 800028c:	701a      	strb	r2, [r3, #0]

			j++;
 800028e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000292:	3301      	adds	r3, #1
 8000294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		Lectura_BufferUsart1++;
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <DecodeReceivedData+0xdc>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <DecodeReceivedData+0xdc>)
 80002a2:	701a      	strb	r2, [r3, #0]

		if(Lectura_BufferUsart1 >= UART_MAX_RECEIVE_DATA){
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <DecodeReceivedData+0xdc>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b18      	cmp	r3, #24
 80002aa:	d902      	bls.n	80002b2 <DecodeReceivedData+0x96>

			Lectura_BufferUsart1 = 0;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <DecodeReceivedData+0xdc>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <DecodeReceivedData+0xdc>)
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <DecodeReceivedData+0xe4>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d1b9      	bne.n	8000232 <DecodeReceivedData+0x16>
		}
	}

	*(DatosRecibidos + j) = '\0';
 80002be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80002c2:	f107 020c 	add.w	r2, r7, #12
 80002c6:	4413      	add	r3, r2
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]

	*NumberReceived = atoi(DatosRecibidos);
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4618      	mov	r0, r3
 80002d2:	f005 fcdb 	bl	8005c8c <atoi>
 80002d6:	4603      	mov	r3, r0
 80002d8:	b29a      	uxth	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	801a      	strh	r2, [r3, #0]

	if(*NumberReceived != 0){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	881b      	ldrh	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <DecodeReceivedData+0xd0>

		retVal = TRUE;
 80002e6:	2301      	movs	r3, #1
 80002e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return retVal; //si no recibi nada valido, vuelve por FALSE
 80002ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3728      	adds	r7, #40	; 0x28
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200000aa 	.word	0x200000aa
 80002fc:	20000090 	.word	0x20000090
 8000300:	200000a9 	.word	0x200000a9

08000304 <PrintString>:

//---------------------------------
//-Prints string
//---------------------------------

void PrintString( UART_HandleTypeDef printer, char* string, uint16_t size ){
 8000304:	b084      	sub	sp, #16
 8000306:	b580      	push	{r7, lr}
 8000308:	af00      	add	r7, sp, #0
 800030a:	f107 0c08 	add.w	ip, r7, #8
 800030e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_UART_Transmit( &printer, (uint8_t*)string, size, HAL_MAX_DELAY );
 8000312:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8000316:	f04f 33ff 	mov.w	r3, #4294967295
 800031a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800031c:	f107 0008 	add.w	r0, r7, #8
 8000320:	f002 fb4b 	bl	80029ba <HAL_UART_Transmit>
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800032c:	b004      	add	sp, #16
 800032e:	4770      	bx	lr

08000330 <PrintIntFormat>:

//---------------------------------
//-Prints integer
//---------------------------------

void PrintIntFormat( UART_HandleTypeDef printer, int16_t number ){
 8000330:	b084      	sub	sp, #16
 8000332:	b5b0      	push	{r4, r5, r7, lr}
 8000334:	b094      	sub	sp, #80	; 0x50
 8000336:	af10      	add	r7, sp, #64	; 0x40
 8000338:	f107 0420 	add.w	r4, r7, #32
 800033c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char DataNumber[10];

	memset (DataNumber,'\0', 10);
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	220a      	movs	r2, #10
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f005 fcf6 	bl	8005d38 <memset>

	itoa(number, DataNumber, 10);
 800034c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8000350:	1d39      	adds	r1, r7, #4
 8000352:	220a      	movs	r2, #10
 8000354:	4618      	mov	r0, r3
 8000356:	f005 fcdf 	bl	8005d18 <itoa>

	PrintString( printer, DataNumber, sizeof(DataNumber) );
 800035a:	230a      	movs	r3, #10
 800035c:	930e      	str	r3, [sp, #56]	; 0x38
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	930d      	str	r3, [sp, #52]	; 0x34
 8000362:	466d      	mov	r5, sp
 8000364:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800036a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800036c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800036e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000374:	6823      	ldr	r3, [r4, #0]
 8000376:	602b      	str	r3, [r5, #0]
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800037e:	f7ff ffc1 	bl	8000304 <PrintString>
}
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <vApplicationGetIdleTaskMemory+0x28>)
 80003a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	4a05      	ldr	r2, [pc, #20]	; (80003bc <vApplicationGetIdleTaskMemory+0x2c>)
 80003a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	200000ac 	.word	0x200000ac
 80003bc:	20000100 	.word	0x20000100

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b5b0      	push	{r4, r5, r7, lr}
 80003c2:	b0a2      	sub	sp, #136	; 0x88
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c6:	f000 fcc7 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ca:	f000 f88b 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ce:	f000 f98b 	bl	80006e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80003d2:	f000 f96b 	bl	80006ac <MX_DMA_Init>
  MX_I2C1_Init();
 80003d6:	f000 f8cb 	bl	8000570 <MX_I2C1_Init>
  MX_SPI1_Init();
 80003da:	f000 f8f7 	bl	80005cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80003de:	f000 f92b 	bl	8000638 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemaphoreUART */
  osSemaphoreDef(binarySemaphoreUART);
 80003e2:	2300      	movs	r3, #0
 80003e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80003e8:	2300      	movs	r3, #0
 80003ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  binarySemaphoreUARTHandle = osSemaphoreCreate(osSemaphore(binarySemaphoreUART), 1);
 80003ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80003f2:	2101      	movs	r1, #1
 80003f4:	4618      	mov	r0, r3
 80003f6:	f003 f970 	bl	80036da <osSemaphoreCreate>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a2e      	ldr	r2, [pc, #184]	; (80004b8 <main+0xf8>)
 80003fe:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of usartReceptionQueue */
  osMessageQDef(usartReceptionQueue, 16, uint8_t);
 8000400:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <main+0xfc>)
 8000402:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usartReceptionQueueHandle = osMessageCreate(osMessageQ(usartReceptionQueue), NULL);
 800040c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fa18 	bl	8003848 <osMessageCreate>
 8000418:	4603      	mov	r3, r0
 800041a:	4a29      	ldr	r2, [pc, #164]	; (80004c0 <main+0x100>)
 800041c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of measurementTask */
  osThreadDef(measurementTask, measurementFunction, osPriorityNormal, 0, 128);
 800041e:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <main+0x104>)
 8000420:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000424:	461d      	mov	r5, r3
 8000426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800042e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  measurementTaskHandle = osThreadCreate(osThread(measurementTask), NULL);
 8000432:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000436:	2100      	movs	r1, #0
 8000438:	4618      	mov	r0, r3
 800043a:	f003 f8ee 	bl	800361a <osThreadCreate>
 800043e:	4603      	mov	r3, r0
 8000440:	4a21      	ldr	r2, [pc, #132]	; (80004c8 <main+0x108>)
 8000442:	6013      	str	r3, [r2, #0]

  /* definition and creation of recordingTask */
  osThreadDef(recordingTask, recordingFunction, osPriorityNormal, 0, 128);
 8000444:	4b21      	ldr	r3, [pc, #132]	; (80004cc <main+0x10c>)
 8000446:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800044a:	461d      	mov	r5, r3
 800044c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800044e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  recordingTaskHandle = osThreadCreate(osThread(recordingTask), NULL);
 8000458:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f003 f8db 	bl	800361a <osThreadCreate>
 8000464:	4603      	mov	r3, r0
 8000466:	4a1a      	ldr	r2, [pc, #104]	; (80004d0 <main+0x110>)
 8000468:	6013      	str	r3, [r2, #0]

  /* definition and creation of receptionTask */
  osThreadDef(receptionTask, receptionFunction, osPriorityNormal, 0, 128);
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <main+0x114>)
 800046c:	f107 041c 	add.w	r4, r7, #28
 8000470:	461d      	mov	r5, r3
 8000472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000476:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800047a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receptionTaskHandle = osThreadCreate(osThread(receptionTask), NULL);
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f003 f8c8 	bl	800361a <osThreadCreate>
 800048a:	4603      	mov	r3, r0
 800048c:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <main+0x118>)
 800048e:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendingTask */
  osThreadDef(sendingTask, sendingFunction, osPriorityNormal, 0, 128);
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <main+0x11c>)
 8000492:	463c      	mov	r4, r7
 8000494:	461d      	mov	r5, r3
 8000496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800049a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800049e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendingTaskHandle = osThreadCreate(osThread(sendingTask), NULL);
 80004a2:	463b      	mov	r3, r7
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 f8b7 	bl	800361a <osThreadCreate>
 80004ac:	4603      	mov	r3, r0
 80004ae:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <main+0x120>)
 80004b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004b2:	f003 f8ab 	bl	800360c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <main+0xf6>
 80004b8:	20000448 	.word	0x20000448
 80004bc:	08005f2c 	.word	0x08005f2c
 80004c0:	20000444 	.word	0x20000444
 80004c4:	08005f3c 	.word	0x08005f3c
 80004c8:	20000434 	.word	0x20000434
 80004cc:	08005f58 	.word	0x08005f58
 80004d0:	20000438 	.word	0x20000438
 80004d4:	08005f74 	.word	0x08005f74
 80004d8:	2000043c 	.word	0x2000043c
 80004dc:	08005f90 	.word	0x08005f90
 80004e0:	20000440 	.word	0x20000440

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b090      	sub	sp, #64	; 0x40
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0318 	add.w	r3, r7, #24
 80004ee:	2228      	movs	r2, #40	; 0x28
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f005 fc20 	bl	8005d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000506:	2301      	movs	r3, #1
 8000508:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800050a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	2302      	movs	r3, #2
 800051a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000522:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000526:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fadf 	bl	8001af0 <HAL_RCC_OscConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000538:	f000 f9f0 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	230f      	movs	r3, #15
 800053e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	2302      	movs	r3, #2
 8000542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fd4c 	bl	8001ff4 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000562:	f000 f9db 	bl	800091c <Error_Handler>
  }
}
 8000566:	bf00      	nop
 8000568:	3740      	adds	r7, #64	; 0x40
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_I2C1_Init+0x50>)
 8000576:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <MX_I2C1_Init+0x54>)
 8000578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_I2C1_Init+0x50>)
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <MX_I2C1_Init+0x58>)
 800057e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_I2C1_Init+0x50>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_I2C1_Init+0x50>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_I2C1_Init+0x50>)
 800058e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <MX_I2C1_Init+0x50>)
 8000596:	2200      	movs	r2, #0
 8000598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_I2C1_Init+0x50>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <MX_I2C1_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_I2C1_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_I2C1_Init+0x50>)
 80005ae:	f001 f95b 	bl	8001868 <HAL_I2C_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005b8:	f000 f9b0 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000300 	.word	0x20000300
 80005c4:	40005400 	.word	0x40005400
 80005c8:	000186a0 	.word	0x000186a0

080005cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_SPI1_Init+0x64>)
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <MX_SPI1_Init+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_SPI1_Init+0x64>)
 80005d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_SPI1_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_SPI1_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_SPI1_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_SPI1_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_SPI1_Init+0x64>)
 80005f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_SPI1_Init+0x64>)
 8000600:	2208      	movs	r2, #8
 8000602:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_SPI1_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_SPI1_Init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_SPI1_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_SPI1_Init+0x64>)
 8000618:	220a      	movs	r2, #10
 800061a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_SPI1_Init+0x64>)
 800061e:	f001 feb1 	bl	8002384 <HAL_SPI_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000628:	f000 f978 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000354 	.word	0x20000354
 8000634:	40013000 	.word	0x40013000

08000638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_USART1_UART_Init+0x64>)
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_USART1_UART_Init+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_USART1_UART_Init+0x64>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART1_UART_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_USART1_UART_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART1_UART_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART1_UART_Init+0x64>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART1_UART_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART1_UART_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_USART1_UART_Init+0x64>)
 8000670:	f002 f956 	bl	8002920 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800067a:	f000 f94f 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 800067e:	2219      	movs	r2, #25
 8000680:	4908      	ldr	r1, [pc, #32]	; (80006a4 <MX_USART1_UART_Init+0x6c>)
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <MX_USART1_UART_Init+0x64>)
 8000684:	f002 fa2b 	bl	8002ade <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_USART1_UART_Init+0x70>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART1_UART_Init+0x70>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f022 0204 	bic.w	r2, r2, #4
 8000696:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200003ac 	.word	0x200003ac
 80006a0:	40013800 	.word	0x40013800
 80006a4:	2000044c 	.word	0x2000044c
 80006a8:	200003f0 	.word	0x200003f0

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_DMA_Init+0x38>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <MX_DMA_Init+0x38>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_DMA_Init+0x38>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2105      	movs	r1, #5
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 fc29 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006d4:	200f      	movs	r0, #15
 80006d6:	f000 fc42 	bl	8000f5e <HAL_NVIC_EnableIRQ>

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0310 	add.w	r3, r7, #16
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <MX_GPIO_Init+0xd0>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a2d      	ldr	r2, [pc, #180]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_GPIO_Init+0xd0>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a27      	ldr	r2, [pc, #156]	; (80007b8 <MX_GPIO_Init+0xd0>)
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0320 	and.w	r3, r3, #32
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_GPIO_Init+0xd0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_GPIO_Init+0xd0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <MX_GPIO_Init+0xd0>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_GPIO_Init+0xd0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	4816      	ldr	r0, [pc, #88]	; (80007bc <MX_GPIO_Init+0xd4>)
 8000764:	f001 f82c 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2302      	movs	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	480e      	ldr	r0, [pc, #56]	; (80007bc <MX_GPIO_Init+0xd4>)
 8000782:	f000 fe99 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_GPIO_Init+0xd8>)
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	480a      	ldr	r0, [pc, #40]	; (80007c4 <MX_GPIO_Init+0xdc>)
 800079c:	f000 fe8c 	bl	80014b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2105      	movs	r1, #5
 80007a4:	2028      	movs	r0, #40	; 0x28
 80007a6:	f000 fbbe 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007aa:	2028      	movs	r0, #40	; 0x28
 80007ac:	f000 fbd7 	bl	8000f5e <HAL_NVIC_EnableIRQ>

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40011000 	.word	0x40011000
 80007c0:	10210000 	.word	0x10210000
 80007c4:	40010c00 	.word	0x40010c00

080007c8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_UARTEx_RxEventCallback+0x54>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d119      	bne.n	8000812 <HAL_UARTEx_RxEventCallback+0x4a>
    	if(StoreUSARTData(Rx_data, size)){
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	4619      	mov	r1, r3
 80007e2:	480f      	ldr	r0, [pc, #60]	; (8000820 <HAL_UARTEx_RxEventCallback+0x58>)
 80007e4:	f7ff fcb4 	bl	8000150 <StoreUSARTData>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <HAL_UARTEx_RxEventCallback+0x30>
        	osSemaphoreRelease(binarySemaphoreUARTHandle);
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fff2 	bl	80037dc <osSemaphoreRelease>
    	}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 80007f8:	2219      	movs	r2, #25
 80007fa:	4909      	ldr	r1, [pc, #36]	; (8000820 <HAL_UARTEx_RxEventCallback+0x58>)
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <HAL_UARTEx_RxEventCallback+0x60>)
 80007fe:	f002 f96e 	bl	8002ade <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_UARTEx_RxEventCallback+0x64>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_UARTEx_RxEventCallback+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f022 0204 	bic.w	r2, r2, #4
 8000810:	601a      	str	r2, [r3, #0]
    }
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40013800 	.word	0x40013800
 8000820:	2000044c 	.word	0x2000044c
 8000824:	20000448 	.word	0x20000448
 8000828:	200003ac 	.word	0x200003ac
 800082c:	200003f0 	.word	0x200003f0

08000830 <measurementFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_measurementFunction */
void measurementFunction(void const * argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083c:	f002 ff39 	bl	80036b2 <osDelay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000844:	4801      	ldr	r0, [pc, #4]	; (800084c <measurementFunction+0x1c>)
 8000846:	f000 ffd3 	bl	80017f0 <HAL_GPIO_TogglePin>
    osDelay(1000);
 800084a:	e7f5      	b.n	8000838 <measurementFunction+0x8>
 800084c:	40011000 	.word	0x40011000

08000850 <recordingFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordingFunction */
void recordingFunction(void const * argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN recordingFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f002 ff2a 	bl	80036b2 <osDelay>
 800085e:	e7fb      	b.n	8000858 <recordingFunction+0x8>

08000860 <receptionFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receptionFunction */
void receptionFunction(void const * argument)
{
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	b095      	sub	sp, #84	; 0x54
 8000864:	af10      	add	r7, sp, #64	; 0x40
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN receptionFunction */
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreWait(binarySemaphoreUARTHandle, osWaitForever);
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <receptionFunction+0x7c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	4618      	mov	r0, r3
 8000872:	f002 ff65 	bl	8003740 <osSemaphoreWait>
    uint16_t measureAsk = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81fb      	strh	r3, [r7, #14]
    if(DecodeReceivedData(&measureAsk)){
 800087a:	f107 030e 	add.w	r3, r7, #14
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fccc 	bl	800021c <DecodeReceivedData>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0ee      	beq.n	8000868 <receptionFunction+0x8>
    	PrintString(huart1, "Hola mundo\r\n", sizeof("Hola mundo\r\n"));
 800088a:	4e15      	ldr	r6, [pc, #84]	; (80008e0 <receptionFunction+0x80>)
 800088c:	230d      	movs	r3, #13
 800088e:	930e      	str	r3, [sp, #56]	; 0x38
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <receptionFunction+0x84>)
 8000892:	930d      	str	r3, [sp, #52]	; 0x34
 8000894:	466d      	mov	r5, sp
 8000896:	f106 0410 	add.w	r4, r6, #16
 800089a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800089c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800089e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	602b      	str	r3, [r5, #0]
 80008aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008ae:	f7ff fd29 	bl	8000304 <PrintString>
    	PrintIntFormat(huart1, measureAsk);
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	4e0a      	ldr	r6, [pc, #40]	; (80008e0 <receptionFunction+0x80>)
 80008b8:	930d      	str	r3, [sp, #52]	; 0x34
 80008ba:	466d      	mov	r5, sp
 80008bc:	f106 0410 	add.w	r4, r6, #16
 80008c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	602b      	str	r3, [r5, #0]
 80008d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008d4:	f7ff fd2c 	bl	8000330 <PrintIntFormat>
  {
 80008d8:	e7c6      	b.n	8000868 <receptionFunction+0x8>
 80008da:	bf00      	nop
 80008dc:	20000448 	.word	0x20000448
 80008e0:	200003ac 	.word	0x200003ac
 80008e4:	08005fac 	.word	0x08005fac

080008e8 <sendingFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendingFunction */
void sendingFunction(void const * argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendingFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f002 fede 	bl	80036b2 <osDelay>
 80008f6:	e7fb      	b.n	80008f0 <sendingFunction+0x8>

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f000 fa3b 	bl	8000d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40012c00 	.word	0x40012c00

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_MspInit+0x68>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <HAL_MspInit+0x68>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_MspInit+0x68>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x68>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <HAL_MspInit+0x68>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x68>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	210f      	movs	r1, #15
 8000962:	f06f 0001 	mvn.w	r0, #1
 8000966:	f000 fade 	bl	8000f26 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_MspInit+0x6c>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_MspInit+0x6c>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <HAL_I2C_MspInit+0x70>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d123      	bne.n	8000a00 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_I2C_MspInit+0x74>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <HAL_I2C_MspInit+0x74>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_I2C_MspInit+0x74>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d0:	23c0      	movs	r3, #192	; 0xc0
 80009d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d4:	2312      	movs	r3, #18
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4619      	mov	r1, r3
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <HAL_I2C_MspInit+0x78>)
 80009e4:	f000 fd68 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_I2C_MspInit+0x74>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_I2C_MspInit+0x74>)
 80009ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f2:	61d3      	str	r3, [r2, #28]
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_I2C_MspInit+0x74>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010c00 	.word	0x40010c00

08000a14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <HAL_SPI_MspInit+0x88>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d12f      	bne.n	8000a94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_SPI_MspInit+0x8c>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_SPI_MspInit+0x8c>)
 8000a3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_SPI_MspInit+0x8c>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_SPI_MspInit+0x8c>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_SPI_MspInit+0x8c>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_SPI_MspInit+0x8c>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000a64:	23b0      	movs	r3, #176	; 0xb0
 8000a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <HAL_SPI_MspInit+0x90>)
 8000a78:	f000 fd1e 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a7c:	2340      	movs	r3, #64	; 0x40
 8000a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <HAL_SPI_MspInit+0x90>)
 8000a90:	f000 fd12 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40013000 	.word	0x40013000
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a33      	ldr	r2, [pc, #204]	; (8000b90 <HAL_UART_MspInit+0xe8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d15f      	bne.n	8000b88 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <HAL_UART_MspInit+0xec>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a31      	ldr	r2, [pc, #196]	; (8000b94 <HAL_UART_MspInit+0xec>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_UART_MspInit+0xec>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_UART_MspInit+0xec>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <HAL_UART_MspInit+0xec>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_UART_MspInit+0xec>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4822      	ldr	r0, [pc, #136]	; (8000b98 <HAL_UART_MspInit+0xf0>)
 8000b0e:	f000 fcd3 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	481c      	ldr	r0, [pc, #112]	; (8000b98 <HAL_UART_MspInit+0xf0>)
 8000b28:	f000 fcc6 	bl	80014b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <HAL_UART_MspInit+0xf8>)
 8000b30:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b5c:	480f      	ldr	r0, [pc, #60]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b5e:	f000 fa0d 	bl	8000f7c <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000b68:	f7ff fed8 	bl	800091c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_UART_MspInit+0xf4>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2105      	movs	r1, #5
 8000b7c:	2025      	movs	r0, #37	; 0x25
 8000b7e:	f000 f9d2 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b82:	2025      	movs	r0, #37	; 0x25
 8000b84:	f000 f9eb 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40013800 	.word	0x40013800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010800 	.word	0x40010800
 8000b9c:	200003f0 	.word	0x200003f0
 8000ba0:	40020058 	.word	0x40020058

08000ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <HAL_InitTick+0xd0>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <HAL_InitTick+0xd0>)
 8000bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_InitTick+0xd0>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd2:	f107 020c 	add.w	r2, r7, #12
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fb83 	bl	80022e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000be2:	f001 fb6d 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 8000be6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bea:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <HAL_InitTick+0xd4>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	0c9b      	lsrs	r3, r3, #18
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_InitTick+0xd8>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <HAL_InitTick+0xdc>)
 8000bfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <HAL_InitTick+0xd8>)
 8000bfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c02:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <HAL_InitTick+0xd8>)
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_InitTick+0xd8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <HAL_InitTick+0xd8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_InitTick+0xd8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <HAL_InitTick+0xd8>)
 8000c1e:	f001 fc35 	bl	800248c <HAL_TIM_Base_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d11b      	bne.n	8000c68 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c30:	4812      	ldr	r0, [pc, #72]	; (8000c7c <HAL_InitTick+0xd8>)
 8000c32:	f001 fc83 	bl	800253c <HAL_TIM_Base_Start_IT>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d111      	bne.n	8000c68 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c44:	2019      	movs	r0, #25
 8000c46:	f000 f98a 	bl	8000f5e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d808      	bhi.n	8000c62 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2019      	movs	r0, #25
 8000c56:	f000 f966 	bl	8000f26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_InitTick+0xe0>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	e002      	b.n	8000c68 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000
 8000c78:	431bde83 	.word	0x431bde83
 8000c7c:	20000468 	.word	0x20000468
 8000c80:	40012c00 	.word	0x40012c00
 8000c84:	20000004 	.word	0x20000004

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
	...

08000cb4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DMA1_Channel5_IRQHandler+0x10>)
 8000cba:	f000 fac9 	bl	8001250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200003f0 	.word	0x200003f0

08000cc8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM1_UP_IRQHandler+0x10>)
 8000cce:	f001 fc87 	bl	80025e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000468 	.word	0x20000468

08000cdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <USART1_IRQHandler+0x10>)
 8000ce2:	f001 ff4b 	bl	8002b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200003ac 	.word	0x200003ac

08000cf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000cf4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cf8:	f000 fd94 	bl	8001824 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	; (8000d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d32:	f7ff ffe5 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f004 ffb3 	bl	8005ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3a:	f7ff fb41 	bl	80003c0 <main>
  bx lr
 8000d3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d48:	0800611c 	.word	0x0800611c
  ldr r2, =_sbss
 8000d4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d50:	20001200 	.word	0x20001200

08000d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC1_2_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x28>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x28>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f8d1 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff ff18 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fdd8 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40022000 	.word	0x40022000

08000d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x1c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x20>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <HAL_IncTick+0x20>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200004b0 	.word	0x200004b0

08000da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <HAL_GetTick+0x10>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	200004b0 	.word	0x200004b0

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4906      	ldr	r1, [pc, #24]	; (8000e54 <__NVIC_EnableIRQ+0x34>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff4f 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff64 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ffb2 	bl	8000eac <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff81 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff57 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e043      	b.n	800101a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_DMA_Init+0xa8>)
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <HAL_DMA_Init+0xac>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	009a      	lsls	r2, r3, #2
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a1f      	ldr	r2, [pc, #124]	; (800102c <HAL_DMA_Init+0xb0>)
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	bffdfff8 	.word	0xbffdfff8
 8001028:	cccccccd 	.word	0xcccccccd
 800102c:	40020000 	.word	0x40020000

08001030 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_DMA_Start_IT+0x20>
 800104c:	2302      	movs	r3, #2
 800104e:	e04a      	b.n	80010e6 <HAL_DMA_Start_IT+0xb6>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800105e:	2b01      	cmp	r3, #1
 8001060:	d13a      	bne.n	80010d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2202      	movs	r2, #2
 8001066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f9e8 	bl	800145c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 020e 	orr.w	r2, r2, #14
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e00f      	b.n	80010c6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0204 	bic.w	r2, r2, #4
 80010b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 020a 	orr.w	r2, r2, #10
 80010c4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e005      	b.n	80010e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010e0:	2302      	movs	r3, #2
 80010e2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001100:	2b02      	cmp	r3, #2
 8001102:	d008      	beq.n	8001116 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2204      	movs	r2, #4
 8001108:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e020      	b.n	8001158 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 020e 	bic.w	r2, r2, #14
 8001124:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0201 	bic.w	r2, r2, #1
 8001134:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001176:	2b02      	cmp	r3, #2
 8001178:	d005      	beq.n	8001186 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2204      	movs	r2, #4
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e051      	b.n	800122a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 020e 	bic.w	r2, r2, #14
 8001194:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0201 	bic.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a22      	ldr	r2, [pc, #136]	; (8001234 <HAL_DMA_Abort_IT+0xd0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d029      	beq.n	8001204 <HAL_DMA_Abort_IT+0xa0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_DMA_Abort_IT+0xd4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d022      	beq.n	8001200 <HAL_DMA_Abort_IT+0x9c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1f      	ldr	r2, [pc, #124]	; (800123c <HAL_DMA_Abort_IT+0xd8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d01a      	beq.n	80011fa <HAL_DMA_Abort_IT+0x96>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_DMA_Abort_IT+0xdc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d012      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x90>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_DMA_Abort_IT+0xe0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00a      	beq.n	80011ee <HAL_DMA_Abort_IT+0x8a>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_DMA_Abort_IT+0xe4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d102      	bne.n	80011e8 <HAL_DMA_Abort_IT+0x84>
 80011e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011e6:	e00e      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ec:	e00b      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f2:	e008      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	e005      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fe:	e002      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 8001200:	2310      	movs	r3, #16
 8001202:	e000      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 8001204:	2301      	movs	r3, #1
 8001206:	4a11      	ldr	r2, [pc, #68]	; (800124c <HAL_DMA_Abort_IT+0xe8>)
 8001208:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
    } 
  }
  return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020008 	.word	0x40020008
 8001238:	4002001c 	.word	0x4002001c
 800123c:	40020030 	.word	0x40020030
 8001240:	40020044 	.word	0x40020044
 8001244:	40020058 	.word	0x40020058
 8001248:	4002006c 	.word	0x4002006c
 800124c:	40020000 	.word	0x40020000

08001250 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	2204      	movs	r2, #4
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d04f      	beq.n	8001318 <HAL_DMA_IRQHandler+0xc8>
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	d04a      	beq.n	8001318 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b00      	cmp	r3, #0
 800128e:	d107      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0204 	bic.w	r2, r2, #4
 800129e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a66      	ldr	r2, [pc, #408]	; (8001440 <HAL_DMA_IRQHandler+0x1f0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d029      	beq.n	80012fe <HAL_DMA_IRQHandler+0xae>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a65      	ldr	r2, [pc, #404]	; (8001444 <HAL_DMA_IRQHandler+0x1f4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d022      	beq.n	80012fa <HAL_DMA_IRQHandler+0xaa>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a63      	ldr	r2, [pc, #396]	; (8001448 <HAL_DMA_IRQHandler+0x1f8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01a      	beq.n	80012f4 <HAL_DMA_IRQHandler+0xa4>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a62      	ldr	r2, [pc, #392]	; (800144c <HAL_DMA_IRQHandler+0x1fc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d012      	beq.n	80012ee <HAL_DMA_IRQHandler+0x9e>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a60      	ldr	r2, [pc, #384]	; (8001450 <HAL_DMA_IRQHandler+0x200>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00a      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x98>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a5f      	ldr	r2, [pc, #380]	; (8001454 <HAL_DMA_IRQHandler+0x204>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d102      	bne.n	80012e2 <HAL_DMA_IRQHandler+0x92>
 80012dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e0:	e00e      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012e6:	e00b      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012ec:	e008      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f2:	e005      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f8:	e002      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012fa:	2340      	movs	r3, #64	; 0x40
 80012fc:	e000      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012fe:	2304      	movs	r3, #4
 8001300:	4a55      	ldr	r2, [pc, #340]	; (8001458 <HAL_DMA_IRQHandler+0x208>)
 8001302:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8094 	beq.w	8001436 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001316:	e08e      	b.n	8001436 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	2202      	movs	r2, #2
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d056      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x186>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d051      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10b      	bne.n	8001358 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 020a 	bic.w	r2, r2, #10
 800134e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a38      	ldr	r2, [pc, #224]	; (8001440 <HAL_DMA_IRQHandler+0x1f0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d029      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x166>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a37      	ldr	r2, [pc, #220]	; (8001444 <HAL_DMA_IRQHandler+0x1f4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d022      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x162>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a35      	ldr	r2, [pc, #212]	; (8001448 <HAL_DMA_IRQHandler+0x1f8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01a      	beq.n	80013ac <HAL_DMA_IRQHandler+0x15c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a34      	ldr	r2, [pc, #208]	; (800144c <HAL_DMA_IRQHandler+0x1fc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d012      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x156>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a32      	ldr	r2, [pc, #200]	; (8001450 <HAL_DMA_IRQHandler+0x200>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00a      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x150>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a31      	ldr	r2, [pc, #196]	; (8001454 <HAL_DMA_IRQHandler+0x204>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d102      	bne.n	800139a <HAL_DMA_IRQHandler+0x14a>
 8001394:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001398:	e00e      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 800139a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800139e:	e00b      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a4:	e008      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013aa:	e005      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b0:	e002      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013b2:	2320      	movs	r3, #32
 80013b4:	e000      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013b6:	2302      	movs	r3, #2
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_DMA_IRQHandler+0x208>)
 80013ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d034      	beq.n	8001436 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013d4:	e02f      	b.n	8001436 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	2208      	movs	r2, #8
 80013dc:	409a      	lsls	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d028      	beq.n	8001438 <HAL_DMA_IRQHandler+0x1e8>
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d023      	beq.n	8001438 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 020e 	bic.w	r2, r2, #14
 80013fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	2101      	movs	r1, #1
 800140a:	fa01 f202 	lsl.w	r2, r1, r2
 800140e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	4798      	blx	r3
    }
  }
  return;
 8001436:	bf00      	nop
 8001438:	bf00      	nop
}
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40020008 	.word	0x40020008
 8001444:	4002001c 	.word	0x4002001c
 8001448:	40020030 	.word	0x40020030
 800144c:	40020044 	.word	0x40020044
 8001450:	40020058 	.word	0x40020058
 8001454:	4002006c 	.word	0x4002006c
 8001458:	40020000 	.word	0x40020000

0800145c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f202 	lsl.w	r2, r1, r2
 8001478:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b10      	cmp	r3, #16
 8001488:	d108      	bne.n	800149c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800149a:	e007      	b.n	80014ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	60da      	str	r2, [r3, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e169      	b.n	80017a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014cc:	2201      	movs	r2, #1
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8158 	bne.w	800179a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4a9a      	ldr	r2, [pc, #616]	; (8001758 <HAL_GPIO_Init+0x2a0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d05e      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 80014f4:	4a98      	ldr	r2, [pc, #608]	; (8001758 <HAL_GPIO_Init+0x2a0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d875      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 80014fa:	4a98      	ldr	r2, [pc, #608]	; (800175c <HAL_GPIO_Init+0x2a4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d058      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001500:	4a96      	ldr	r2, [pc, #600]	; (800175c <HAL_GPIO_Init+0x2a4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d86f      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001506:	4a96      	ldr	r2, [pc, #600]	; (8001760 <HAL_GPIO_Init+0x2a8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d052      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 800150c:	4a94      	ldr	r2, [pc, #592]	; (8001760 <HAL_GPIO_Init+0x2a8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d869      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001512:	4a94      	ldr	r2, [pc, #592]	; (8001764 <HAL_GPIO_Init+0x2ac>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d04c      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001518:	4a92      	ldr	r2, [pc, #584]	; (8001764 <HAL_GPIO_Init+0x2ac>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d863      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800151e:	4a92      	ldr	r2, [pc, #584]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d046      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001524:	4a90      	ldr	r2, [pc, #576]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d85d      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800152a:	2b12      	cmp	r3, #18
 800152c:	d82a      	bhi.n	8001584 <HAL_GPIO_Init+0xcc>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d859      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <HAL_GPIO_Init+0x80>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	080015b3 	.word	0x080015b3
 800153c:	0800158d 	.word	0x0800158d
 8001540:	0800159f 	.word	0x0800159f
 8001544:	080015e1 	.word	0x080015e1
 8001548:	080015e7 	.word	0x080015e7
 800154c:	080015e7 	.word	0x080015e7
 8001550:	080015e7 	.word	0x080015e7
 8001554:	080015e7 	.word	0x080015e7
 8001558:	080015e7 	.word	0x080015e7
 800155c:	080015e7 	.word	0x080015e7
 8001560:	080015e7 	.word	0x080015e7
 8001564:	080015e7 	.word	0x080015e7
 8001568:	080015e7 	.word	0x080015e7
 800156c:	080015e7 	.word	0x080015e7
 8001570:	080015e7 	.word	0x080015e7
 8001574:	080015e7 	.word	0x080015e7
 8001578:	080015e7 	.word	0x080015e7
 800157c:	08001595 	.word	0x08001595
 8001580:	080015a9 	.word	0x080015a9
 8001584:	4a79      	ldr	r2, [pc, #484]	; (800176c <HAL_GPIO_Init+0x2b4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158a:	e02c      	b.n	80015e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e029      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	3304      	adds	r3, #4
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e024      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	3308      	adds	r3, #8
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e01f      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	330c      	adds	r3, #12
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e01a      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ba:	2304      	movs	r3, #4
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e013      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	611a      	str	r2, [r3, #16]
          break;
 80015d2:	e009      	b.n	80015e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d4:	2308      	movs	r3, #8
 80015d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	615a      	str	r2, [r3, #20]
          break;
 80015de:	e003      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
          break;
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          break;
 80015e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d801      	bhi.n	80015f2 <HAL_GPIO_Init+0x13a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	e001      	b.n	80015f6 <HAL_GPIO_Init+0x13e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3304      	adds	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2bff      	cmp	r3, #255	; 0xff
 80015fc:	d802      	bhi.n	8001604 <HAL_GPIO_Init+0x14c>
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x152>
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3b08      	subs	r3, #8
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	210f      	movs	r1, #15
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	401a      	ands	r2, r3
 800161c:	6a39      	ldr	r1, [r7, #32]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	431a      	orrs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80b1 	beq.w	800179a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001650:	4a48      	ldr	r2, [pc, #288]	; (8001774 <HAL_GPIO_Init+0x2bc>)
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <HAL_GPIO_Init+0x2c0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d013      	beq.n	80016a4 <HAL_GPIO_Init+0x1ec>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3f      	ldr	r2, [pc, #252]	; (800177c <HAL_GPIO_Init+0x2c4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00d      	beq.n	80016a0 <HAL_GPIO_Init+0x1e8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <HAL_GPIO_Init+0x2c8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x1e4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3d      	ldr	r2, [pc, #244]	; (8001784 <HAL_GPIO_Init+0x2cc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_GPIO_Init+0x1e0>
 8001694:	2303      	movs	r3, #3
 8001696:	e006      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 8001698:	2304      	movs	r3, #4
 800169a:	e004      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 800169c:	2302      	movs	r3, #2
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 80016a4:	2300      	movs	r3, #0
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	f002 0203 	and.w	r2, r2, #3
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	4093      	lsls	r3, r2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016b6:	492f      	ldr	r1, [pc, #188]	; (8001774 <HAL_GPIO_Init+0x2bc>)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	492c      	ldr	r1, [pc, #176]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4928      	ldr	r1, [pc, #160]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4922      	ldr	r1, [pc, #136]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	43db      	mvns	r3, r3
 800170e:	491e      	ldr	r1, [pc, #120]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001710:	4013      	ands	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	4918      	ldr	r1, [pc, #96]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	4914      	ldr	r1, [pc, #80]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d021      	beq.n	800178c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	490e      	ldr	r1, [pc, #56]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
 8001754:	e021      	b.n	800179a <HAL_GPIO_Init+0x2e2>
 8001756:	bf00      	nop
 8001758:	10320000 	.word	0x10320000
 800175c:	10310000 	.word	0x10310000
 8001760:	10220000 	.word	0x10220000
 8001764:	10210000 	.word	0x10210000
 8001768:	10120000 	.word	0x10120000
 800176c:	10110000 	.word	0x10110000
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	40010800 	.word	0x40010800
 800177c:	40010c00 	.word	0x40010c00
 8001780:	40011000 	.word	0x40011000
 8001784:	40011400 	.word	0x40011400
 8001788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_GPIO_Init+0x304>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	4909      	ldr	r1, [pc, #36]	; (80017bc <HAL_GPIO_Init+0x304>)
 8001796:	4013      	ands	r3, r2
 8001798:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f47f ae8e 	bne.w	80014cc <HAL_GPIO_Init+0x14>
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	372c      	adds	r7, #44	; 0x2c
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	611a      	str	r2, [r3, #16]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4013      	ands	r3, r2
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43d9      	mvns	r1, r3
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	400b      	ands	r3, r1
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	611a      	str	r2, [r3, #16]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
	...

08001824 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f806 	bl	8001854 <HAL_GPIO_EXTI_Callback>
  }
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e12b      	b.n	8001ad2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff f882 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2224      	movs	r2, #36	; 0x24
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018cc:	f000 fce4 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 80018d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a81      	ldr	r2, [pc, #516]	; (8001adc <HAL_I2C_Init+0x274>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d807      	bhi.n	80018ec <HAL_I2C_Init+0x84>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a80      	ldr	r2, [pc, #512]	; (8001ae0 <HAL_I2C_Init+0x278>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	bf94      	ite	ls
 80018e4:	2301      	movls	r3, #1
 80018e6:	2300      	movhi	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	e006      	b.n	80018fa <HAL_I2C_Init+0x92>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a7d      	ldr	r2, [pc, #500]	; (8001ae4 <HAL_I2C_Init+0x27c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	bf94      	ite	ls
 80018f4:	2301      	movls	r3, #1
 80018f6:	2300      	movhi	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0e7      	b.n	8001ad2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4a78      	ldr	r2, [pc, #480]	; (8001ae8 <HAL_I2C_Init+0x280>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0c9b      	lsrs	r3, r3, #18
 800190c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	430a      	orrs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a6a      	ldr	r2, [pc, #424]	; (8001adc <HAL_I2C_Init+0x274>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d802      	bhi.n	800193c <HAL_I2C_Init+0xd4>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3301      	adds	r3, #1
 800193a:	e009      	b.n	8001950 <HAL_I2C_Init+0xe8>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	4a69      	ldr	r2, [pc, #420]	; (8001aec <HAL_I2C_Init+0x284>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	3301      	adds	r3, #1
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	430b      	orrs	r3, r1
 8001956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001962:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	495c      	ldr	r1, [pc, #368]	; (8001adc <HAL_I2C_Init+0x274>)
 800196c:	428b      	cmp	r3, r1
 800196e:	d819      	bhi.n	80019a4 <HAL_I2C_Init+0x13c>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e59      	subs	r1, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fbb1 f3f3 	udiv	r3, r1, r3
 800197e:	1c59      	adds	r1, r3, #1
 8001980:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001984:	400b      	ands	r3, r1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00a      	beq.n	80019a0 <HAL_I2C_Init+0x138>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1e59      	subs	r1, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fbb1 f3f3 	udiv	r3, r1, r3
 8001998:	3301      	adds	r3, #1
 800199a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199e:	e051      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e04f      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d111      	bne.n	80019d0 <HAL_I2C_Init+0x168>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e58      	subs	r0, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	440b      	add	r3, r1
 80019ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	e012      	b.n	80019f6 <HAL_I2C_Init+0x18e>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e58      	subs	r0, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	0099      	lsls	r1, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Init+0x196>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e022      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10e      	bne.n	8001a24 <HAL_I2C_Init+0x1bc>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1e58      	subs	r0, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6859      	ldr	r1, [r3, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	440b      	add	r3, r1
 8001a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a22:	e00f      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e58      	subs	r0, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	0099      	lsls	r1, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	6809      	ldr	r1, [r1, #0]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6911      	ldr	r1, [r2, #16]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68d2      	ldr	r2, [r2, #12]
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	000186a0 	.word	0x000186a0
 8001ae0:	001e847f 	.word	0x001e847f
 8001ae4:	003d08ff 	.word	0x003d08ff
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	10624dd3 	.word	0x10624dd3

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e272      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8087 	beq.w	8001c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b10:	4b92      	ldr	r3, [pc, #584]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d00c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b1c:	4b8f      	ldr	r3, [pc, #572]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d112      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
 8001b28:	4b8c      	ldr	r3, [pc, #560]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d10b      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b36:	4b89      	ldr	r3, [pc, #548]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d06c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x12c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d168      	bne.n	8001c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e24c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x76>
 8001b58:	4b80      	ldr	r3, [pc, #512]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a7f      	ldr	r2, [pc, #508]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e02e      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b7b      	ldr	r3, [pc, #492]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7a      	ldr	r2, [pc, #488]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b78      	ldr	r3, [pc, #480]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a77      	ldr	r2, [pc, #476]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e01d      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0xbc>
 8001b92:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a71      	ldr	r2, [pc, #452]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001bac:	4b6b      	ldr	r3, [pc, #428]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6a      	ldr	r2, [pc, #424]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a67      	ldr	r2, [pc, #412]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f8ec 	bl	8000da8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f8e8 	bl	8000da8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e200      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b5d      	ldr	r3, [pc, #372]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xe4>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f8d8 	bl	8000da8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f8d4 	bl	8000da8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1ec      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x10c>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2a:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c36:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d11c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1c0      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4939      	ldr	r1, [pc, #228]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	e03a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f88d 	bl	8000da8 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c92:	f7ff f889 	bl	8000da8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1a1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4927      	ldr	r1, [pc, #156]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f86c 	bl	8000da8 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f868 	bl	8000da8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e180      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03a      	beq.n	8001d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d019      	beq.n	8001d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f84c 	bl	8000da8 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff f848 	bl	8000da8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e160      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f000 fb08 	bl	8002348 <RCC_Delay>
 8001d38:	e01c      	b.n	8001d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7ff f832 	bl	8000da8 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d46:	e00f      	b.n	8001d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff f82e 	bl	8000da8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d908      	bls.n	8001d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e146      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	42420000 	.word	0x42420000
 8001d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e9      	bne.n	8001d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80a6 	beq.w	8001ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b8b      	ldr	r3, [pc, #556]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10d      	bne.n	8001dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a87      	ldr	r2, [pc, #540]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b85      	ldr	r3, [pc, #532]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b82      	ldr	r3, [pc, #520]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d118      	bne.n	8001dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc6:	f7fe ffef 	bl	8000da8 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7fe ffeb 	bl	8000da8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e103      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x312>
 8001df4:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	e02d      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x334>
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a69      	ldr	r2, [pc, #420]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a66      	ldr	r2, [pc, #408]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	e01c      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d10c      	bne.n	8001e46 <HAL_RCC_OscConfig+0x356>
 8001e2c:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a60      	ldr	r2, [pc, #384]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a5d      	ldr	r2, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	e00b      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e46:	4b5b      	ldr	r3, [pc, #364]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a5a      	ldr	r2, [pc, #360]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d015      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7fe ff9f 	bl	8000da8 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7fe ff9b 	bl	8000da8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0b1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ee      	beq.n	8001e6e <HAL_RCC_OscConfig+0x37e>
 8001e90:	e014      	b.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7fe ff89 	bl	8000da8 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7fe ff85 	bl	8000da8 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e09b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1ee      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a3b      	ldr	r2, [pc, #236]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d061      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d146      	bne.n	8001f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7fe ff59 	bl	8000da8 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe ff55 	bl	8000da8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e06d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d108      	bne.n	8001f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4921      	ldr	r1, [pc, #132]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a19      	ldr	r1, [r3, #32]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	430b      	orrs	r3, r1
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe ff29 	bl	8000da8 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe ff25 	bl	8000da8 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e03d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x46a>
 8001f78:	e035      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe ff12 	bl	8000da8 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe ff0e 	bl	8000da8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e026      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x498>
 8001fa6:	e01e      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e019      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_OscConfig+0x500>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0d0      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4965      	ldr	r1, [pc, #404]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800205a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	494d      	ldr	r1, [pc, #308]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d040      	beq.n	8002114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d115      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e073      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4936      	ldr	r1, [pc, #216]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7fe fe60 	bl	8000da8 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7fe fe5c 	bl	8000da8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e053      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 020c 	and.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d1eb      	bne.n	80020ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d210      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 0207 	bic.w	r2, r3, #7
 800212a:	4922      	ldr	r1, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e032      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4916      	ldr	r1, [pc, #88]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002182:	f000 f821 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	490a      	ldr	r1, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	5ccb      	ldrb	r3, [r1, r3]
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1cc>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fcfe 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08005fd4 	.word	0x08005fd4
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	b490      	push	{r4, r7}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_RCC_GetSysClockFreq+0xac>)
 80021d0:	1d3c      	adds	r4, r7, #4
 80021d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021d8:	f240 2301 	movw	r3, #513	; 0x201
 80021dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x40>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x46>
 8002206:	e02b      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 800220a:	623b      	str	r3, [r7, #32]
      break;
 800220c:	e02b      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3328      	adds	r3, #40	; 0x28
 8002218:	443b      	add	r3, r7
 800221a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800221e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_RCC_GetSysClockFreq+0xb0>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0c5b      	lsrs	r3, r3, #17
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	3328      	adds	r3, #40	; 0x28
 8002236:	443b      	add	r3, r7
 8002238:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800223c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002242:	fb03 f202 	mul.w	r2, r3, r2
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	e004      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	623b      	str	r3, [r7, #32]
      break;
 800225e:	e002      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002262:	623b      	str	r3, [r7, #32]
      break;
 8002264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002266:	6a3b      	ldr	r3, [r7, #32]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bc90      	pop	{r4, r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	08005fbc 	.word	0x08005fbc
 8002278:	40021000 	.word	0x40021000
 800227c:	007a1200 	.word	0x007a1200
 8002280:	003d0900 	.word	0x003d0900

08002284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002288:	4b02      	ldr	r3, [pc, #8]	; (8002294 <HAL_RCC_GetHCLKFreq+0x10>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000000 	.word	0x20000000

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800229c:	f7ff fff2 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08005fe4 	.word	0x08005fe4

080022c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c4:	f7ff ffde 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0adb      	lsrs	r3, r3, #11
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	08005fe4 	.word	0x08005fe4

080022e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	220f      	movs	r2, #15
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_RCC_GetClockConfig+0x58>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_RCC_GetClockConfig+0x58>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_GetClockConfig+0x58>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_RCC_GetClockConfig+0x58>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_GetClockConfig+0x5c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0207 	and.w	r2, r3, #7
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000
 8002344:	40022000 	.word	0x40022000

08002348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <RCC_Delay+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <RCC_Delay+0x38>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002364:	bf00      	nop
  }
  while (Delay --);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60fa      	str	r2, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <RCC_Delay+0x1c>
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000000 	.word	0x20000000
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e076      	b.n	8002484 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023a6:	d009      	beq.n	80023bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
 80023ae:	e005      	b.n	80023bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fb1c 	bl	8000a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002440:	ea42 0103 	orr.w	r1, r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	0c1a      	lsrs	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f002 0204 	and.w	r2, r2, #4
 8002462:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e041      	b.n	8002522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f839 	bl	800252a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f000 f9b4 	bl	8002838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d001      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e03a      	b.n	80025ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <HAL_TIM_Base_Start_IT+0x98>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00e      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x58>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257e:	d009      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x58>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d004      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x58>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a13      	ldr	r2, [pc, #76]	; (80025dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d111      	bne.n	80025b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d010      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b6:	e007      	b.n	80025c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40000800 	.word	0x40000800

080025e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0202 	mvn.w	r2, #2
 800260c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8ed 	bl	8002802 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8e0 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8ef 	bl	8002814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b04      	cmp	r3, #4
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b04      	cmp	r3, #4
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0204 	mvn.w	r2, #4
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8c3 	bl	8002802 <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8b6 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8c5 	bl	8002814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0208 	mvn.w	r2, #8
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2204      	movs	r2, #4
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f899 	bl	8002802 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f88c 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f89b 	bl	8002814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d122      	bne.n	8002738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d11b      	bne.n	8002738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0210 	mvn.w	r2, #16
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2208      	movs	r2, #8
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f86f 	bl	8002802 <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f862 	bl	80027f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f871 	bl	8002814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0201 	mvn.w	r2, #1
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe f8ca 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8bf 	bl	800290e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d107      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f835 	bl	8002826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0220 	mvn.w	r2, #32
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f88a 	bl	80028fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a29      	ldr	r2, [pc, #164]	; (80028f0 <TIM_Base_SetConfig+0xb8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00b      	beq.n	8002868 <TIM_Base_SetConfig+0x30>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002856:	d007      	beq.n	8002868 <TIM_Base_SetConfig+0x30>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <TIM_Base_SetConfig+0xbc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d003      	beq.n	8002868 <TIM_Base_SetConfig+0x30>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <TIM_Base_SetConfig+0xc0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d108      	bne.n	800287a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <TIM_Base_SetConfig+0xb8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00b      	beq.n	800289a <TIM_Base_SetConfig+0x62>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0x62>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <TIM_Base_SetConfig+0xbc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0x62>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <TIM_Base_SetConfig+0xc0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <TIM_Base_SetConfig+0xb8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d103      	bne.n	80028e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	615a      	str	r2, [r3, #20]
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800

080028fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e03f      	b.n	80029b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe f8ae 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fd9b 	bl	80034a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b08a      	sub	sp, #40	; 0x28
 80029be:	af02      	add	r7, sp, #8
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d17c      	bne.n	8002ad4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_UART_Transmit+0x2c>
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e075      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_UART_Transmit+0x3e>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e06e      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2221      	movs	r2, #33	; 0x21
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe f9cb 	bl	8000da8 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a28:	d108      	bne.n	8002a3c <HAL_UART_Transmit+0x82>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e003      	b.n	8002a44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a4c:	e02a      	b.n	8002aa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fb0d 	bl	8003078 <UART_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e036      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10b      	bne.n	8002a86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3302      	adds	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	e007      	b.n	8002a96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	3301      	adds	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1cf      	bne.n	8002a4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2140      	movs	r1, #64	; 0x40
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fadd 	bl	8003078 <UART_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e006      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d13c      	bne.n	8002b72 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e035      	b.n	8002b74 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e02e      	b.n	8002b74 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 faee 	bl	800310c <UART_Start_Receive_DMA>
 8002b30:	4603      	mov	r3, r0
 8002b32:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d119      	bne.n	8002b6e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d113      	bne.n	8002b6a <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0210 	orr.w	r2, r2, #16
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	e001      	b.n	8002b6e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	e000      	b.n	8002b74 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8002b72:	2302      	movs	r3, #2
  }
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_UART_IRQHandler+0x52>
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fbc0 	bl	800334c <UART_Receive_IT>
      return;
 8002bcc:	e17b      	b.n	8002ec6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80b1 	beq.w	8002d38 <HAL_UART_IRQHandler+0x1bc>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_UART_IRQHandler+0x70>
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80a6 	beq.w	8002d38 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_UART_IRQHandler+0x90>
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_UART_IRQHandler+0xb0>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0202 	orr.w	r2, r3, #2
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_UART_IRQHandler+0xd0>
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00f      	beq.n	8002c76 <HAL_UART_IRQHandler+0xfa>
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <HAL_UART_IRQHandler+0xee>
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f043 0208 	orr.w	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 811e 	beq.w	8002ebc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_UART_IRQHandler+0x11e>
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fb59 	bl	800334c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x146>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d031      	beq.n	8002d26 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fa9b 	bl	80031fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d023      	beq.n	8002d1e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d013      	beq.n	8002d16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	4a76      	ldr	r2, [pc, #472]	; (8002ecc <HAL_UART_IRQHandler+0x350>)
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fa32 	bl	8001164 <HAL_DMA_Abort_IT>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d10:	4610      	mov	r0, r2
 8002d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e00e      	b.n	8002d34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8f5 	bl	8002f06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	e00a      	b.n	8002d34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8f1 	bl	8002f06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	e006      	b.n	8002d34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f8ed 	bl	8002f06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d32:	e0c3      	b.n	8002ebc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d34:	bf00      	nop
    return;
 8002d36:	e0c1      	b.n	8002ebc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	f040 80a1 	bne.w	8002e84 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 809b 	beq.w	8002e84 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8095 	beq.w	8002e84 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d04e      	beq.n	8002e1c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002d88:	8a3b      	ldrh	r3, [r7, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8098 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d94:	8a3a      	ldrh	r2, [r7, #16]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	f080 8092 	bcs.w	8002ec0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8a3a      	ldrh	r2, [r7, #16]
 8002da0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d02b      	beq.n	8002e04 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dda:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0210 	bic.w	r2, r2, #16
 8002df8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe f975 	bl	80010ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7fd fcd7 	bl	80007c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e1a:	e051      	b.n	8002ec0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d047      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002e34:	8a7b      	ldrh	r3, [r7, #18]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d044      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0210 	bic.w	r2, r2, #16
 8002e76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e78:	8a7b      	ldrh	r3, [r7, #18]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fd fca3 	bl	80007c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e82:	e01f      	b.n	8002ec4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x324>
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f9f0 	bl	800327e <UART_Transmit_IT>
    return;
 8002e9e:	e012      	b.n	8002ec6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x34a>
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fa31 	bl	800331c <UART_EndTransmit_IT>
    return;
 8002eba:	e004      	b.n	8002ec6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002ebc:	bf00      	nop
 8002ebe:	e002      	b.n	8002ec6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002ec0:	bf00      	nop
 8002ec2:	e000      	b.n	8002ec6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002ec4:	bf00      	nop
  }
}
 8002ec6:	3728      	adds	r7, #40	; 0x28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	08003257 	.word	0x08003257

08002ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d12a      	bne.n	8002f8a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f68:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d107      	bne.n	8002f8a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0210 	bic.w	r2, r2, #16
 8002f88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d106      	bne.n	8002fa0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f96:	4619      	mov	r1, r3
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7fd fc15 	bl	80007c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f9e:	e002      	b.n	8002fa6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff ff9e 	bl	8002ee2 <HAL_UART_RxCpltCallback>
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d108      	bne.n	8002fd6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4619      	mov	r1, r3
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7fd fbfa 	bl	80007c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fd4:	e002      	b.n	8002fdc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff ff8c 	bl	8002ef4 <HAL_UART_RxHalfCpltCallback>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b21      	cmp	r3, #33	; 0x21
 8003016:	d108      	bne.n	800302a <UART_DMAError+0x46>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2200      	movs	r2, #0
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003024:	68b8      	ldr	r0, [r7, #8]
 8003026:	f000 f8d5 	bl	80031d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b22      	cmp	r3, #34	; 0x22
 800304a:	d108      	bne.n	800305e <UART_DMAError+0x7a>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2200      	movs	r2, #0
 8003056:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003058:	68b8      	ldr	r0, [r7, #8]
 800305a:	f000 f8d0 	bl	80031fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f043 0210 	orr.w	r2, r3, #16
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800306a:	68b8      	ldr	r0, [r7, #8]
 800306c:	f7ff ff4b 	bl	8002f06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003088:	e02c      	b.n	80030e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d028      	beq.n	80030e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003098:	f7fd fe86 	bl	8000da8 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d21d      	bcs.n	80030e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e00f      	b.n	8003104 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d0c3      	beq.n	800308a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	88fa      	ldrh	r2, [r7, #6]
 8003124:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2222      	movs	r2, #34	; 0x22
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <UART_Start_Receive_DMA+0xbc>)
 800313a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <UART_Start_Receive_DMA+0xc0>)
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <UART_Start_Receive_DMA+0xc4>)
 800314a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	2200      	movs	r2, #0
 8003152:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3304      	adds	r3, #4
 8003164:	4619      	mov	r1, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	f7fd ff60 	bl	8001030 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031bc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	08002f19 	.word	0x08002f19
 80031cc:	08002faf 	.word	0x08002faf
 80031d0:	08002fe5 	.word	0x08002fe5

080031d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80031ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003214:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0210 	bic.w	r2, r2, #16
 800323c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff fe48 	bl	8002f06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b21      	cmp	r3, #33	; 0x21
 8003290:	d13e      	bne.n	8003310 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329a:	d114      	bne.n	80032c6 <UART_Transmit_IT+0x48>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d110      	bne.n	80032c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	1c9a      	adds	r2, r3, #2
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	621a      	str	r2, [r3, #32]
 80032c4:	e008      	b.n	80032d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6211      	str	r1, [r2, #32]
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4619      	mov	r1, r3
 80032e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10f      	bne.n	800330c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800330a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003332:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff fdc7 	bl	8002ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b22      	cmp	r3, #34	; 0x22
 800335e:	f040 8099 	bne.w	8003494 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336a:	d117      	bne.n	800339c <UART_Receive_IT+0x50>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d113      	bne.n	800339c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	b29a      	uxth	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
 800339a:	e026      	b.n	80033ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ae:	d007      	beq.n	80033c0 <UART_Receive_IT+0x74>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <UART_Receive_IT+0x82>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e008      	b.n	80033e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4619      	mov	r1, r3
 80033f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d148      	bne.n	8003490 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0220 	bic.w	r2, r2, #32
 800340c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800341c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	2b01      	cmp	r3, #1
 800343c:	d123      	bne.n	8003486 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0210 	bic.w	r2, r2, #16
 8003452:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b10      	cmp	r3, #16
 8003460:	d10a      	bne.n	8003478 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd f9a2 	bl	80007c8 <HAL_UARTEx_RxEventCallback>
 8003484:	e002      	b.n	800348c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff fd2b 	bl	8002ee2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e002      	b.n	8003496 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034da:	f023 030c 	bic.w	r3, r3, #12
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	430b      	orrs	r3, r1
 80034e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2c      	ldr	r2, [pc, #176]	; (80035b4 <UART_SetConfig+0x114>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d103      	bne.n	8003510 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7fe feda 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	e002      	b.n	8003516 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7fe fec2 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8003514:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009a      	lsls	r2, r3, #2
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <UART_SetConfig+0x118>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	0119      	lsls	r1, r3, #4
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009a      	lsls	r2, r3, #2
 8003540:	441a      	add	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	fbb2 f2f3 	udiv	r2, r2, r3
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <UART_SetConfig+0x118>)
 800354e:	fba3 0302 	umull	r0, r3, r3, r2
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2064      	movs	r0, #100	; 0x64
 8003556:	fb00 f303 	mul.w	r3, r0, r3
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	3332      	adds	r3, #50	; 0x32
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <UART_SetConfig+0x118>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356c:	4419      	add	r1, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009a      	lsls	r2, r3, #2
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	fbb2 f2f3 	udiv	r2, r2, r3
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <UART_SetConfig+0x118>)
 8003586:	fba3 0302 	umull	r0, r3, r3, r2
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2064      	movs	r0, #100	; 0x64
 800358e:	fb00 f303 	mul.w	r3, r0, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	3332      	adds	r3, #50	; 0x32
 8003598:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <UART_SetConfig+0x118>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	f003 020f 	and.w	r2, r3, #15
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	440a      	add	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40013800 	.word	0x40013800
 80035b8:	51eb851f 	.word	0x51eb851f

080035bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ce:	2b84      	cmp	r3, #132	; 0x84
 80035d0:	d005      	beq.n	80035de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80035d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	3303      	adds	r3, #3
 80035dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035f0:	f3ef 8305 	mrs	r3, IPSR
 80035f4:	607b      	str	r3, [r7, #4]
  return(result);
 80035f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003610:	f001 f92c 	bl	800486c <vTaskStartScheduler>
  
  return osOK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	bd80      	pop	{r7, pc}

0800361a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800361a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361c:	b089      	sub	sp, #36	; 0x24
 800361e:	af04      	add	r7, sp, #16
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <osThreadCreate+0x54>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01c      	beq.n	800366e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685c      	ldr	r4, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681d      	ldr	r5, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691e      	ldr	r6, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ffb8 	bl	80035bc <makeFreeRtosPriority>
 800364c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003656:	9202      	str	r2, [sp, #8]
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	9100      	str	r1, [sp, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4632      	mov	r2, r6
 8003660:	4629      	mov	r1, r5
 8003662:	4620      	mov	r0, r4
 8003664:	f000 ff43 	bl	80044ee <xTaskCreateStatic>
 8003668:	4603      	mov	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e01c      	b.n	80036a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685c      	ldr	r4, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800367a:	b29e      	uxth	r6, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff9a 	bl	80035bc <makeFreeRtosPriority>
 8003688:	4602      	mov	r2, r0
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	9200      	str	r2, [sp, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	4632      	mov	r2, r6
 8003696:	4629      	mov	r1, r5
 8003698:	4620      	mov	r0, r4
 800369a:	f000 ff84 	bl	80045a6 <xTaskCreate>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d001      	beq.n	80036a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80036a8:	68fb      	ldr	r3, [r7, #12]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <osDelay+0x16>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	e000      	b.n	80036ca <osDelay+0x18>
 80036c8:	2301      	movs	r3, #1
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 f89a 	bl	8004804 <vTaskDelay>
  
  return osOK;
 80036d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af02      	add	r7, sp, #8
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00f      	beq.n	800370c <osSemaphoreCreate+0x32>
    if (count == 1) {
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10a      	bne.n	8003708 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2203      	movs	r2, #3
 80036f8:	9200      	str	r2, [sp, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	2100      	movs	r1, #0
 80036fe:	2001      	movs	r0, #1
 8003700:	f000 f9e2 	bl	8003ac8 <xQueueGenericCreateStatic>
 8003704:	4603      	mov	r3, r0
 8003706:	e016      	b.n	8003736 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003708:	2300      	movs	r3, #0
 800370a:	e014      	b.n	8003736 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d110      	bne.n	8003734 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003712:	2203      	movs	r2, #3
 8003714:	2100      	movs	r1, #0
 8003716:	2001      	movs	r0, #1
 8003718:	f000 fa4d 	bl	8003bb6 <xQueueGenericCreate>
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <osSemaphoreCreate+0x56>
 8003724:	2300      	movs	r3, #0
 8003726:	2200      	movs	r2, #0
 8003728:	2100      	movs	r1, #0
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 faa0 	bl	8003c70 <xQueueGenericSend>
      return sema;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	e000      	b.n	8003736 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003734:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	e03a      	b.n	80037ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d103      	bne.n	800376c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e009      	b.n	8003780 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d006      	beq.n	8003780 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <osSemaphoreWait+0x40>
      ticks = 1;
 800377c:	2301      	movs	r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003780:	f7ff ff33 	bl	80035ea <inHandlerMode>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800378a:	f107 0308 	add.w	r3, r7, #8
 800378e:	461a      	mov	r2, r3
 8003790:	2100      	movs	r1, #0
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fd04 	bl	80041a0 <xQueueReceiveFromISR>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800379e:	23ff      	movs	r3, #255	; 0xff
 80037a0:	e015      	b.n	80037ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d011      	beq.n	80037cc <osSemaphoreWait+0x8c>
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <osSemaphoreWait+0x98>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	e008      	b.n	80037cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80037ba:	68f9      	ldr	r1, [r7, #12]
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fbe3 	bl	8003f88 <xQueueSemaphoreTake>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80037c8:	23ff      	movs	r3, #255	; 0xff
 80037ca:	e000      	b.n	80037ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80037ec:	f7ff fefd 	bl	80035ea <inHandlerMode>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4619      	mov	r1, r3
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fb35 	bl	8003e6c <xQueueGiveFromISR>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003808:	23ff      	movs	r3, #255	; 0xff
 800380a:	e017      	b.n	800383c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d013      	beq.n	800383a <osSemaphoreRelease+0x5e>
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <osSemaphoreRelease+0x68>)
 8003814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	e00a      	b.n	800383a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003824:	2300      	movs	r3, #0
 8003826:	2200      	movs	r2, #0
 8003828:	2100      	movs	r1, #0
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa20 	bl	8003c70 <xQueueGenericSend>
 8003830:	4603      	mov	r3, r0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d001      	beq.n	800383a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003836:	23ff      	movs	r3, #255	; 0xff
 8003838:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800383a:	68fb      	ldr	r3, [r7, #12]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b085      	sub	sp, #20
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d011      	beq.n	800387e <osMessageCreate+0x36>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2400      	movs	r4, #0
 8003874:	9400      	str	r4, [sp, #0]
 8003876:	f000 f927 	bl	8003ac8 <xQueueGenericCreateStatic>
 800387a:	4603      	mov	r3, r0
 800387c:	e008      	b.n	8003890 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	4619      	mov	r1, r3
 800388a:	f000 f994 	bl	8003bb6 <xQueueGenericCreate>
 800388e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}

08003898 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f103 0208 	add.w	r2, r3, #8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295
 80038b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f103 0208 	add.w	r2, r3, #8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f103 0208 	add.w	r2, r3, #8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d103      	bne.n	8003954 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e00c      	b.n	800396e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3308      	adds	r3, #8
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e002      	b.n	8003962 <vListInsert+0x2e>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	d2f6      	bcs.n	800395c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6892      	ldr	r2, [r2, #8]
 80039ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6852      	ldr	r2, [r2, #4]
 80039c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d103      	bne.n	80039d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	1e5a      	subs	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
	...

080039f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a22:	f001 fe5b 	bl	80056dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	68f9      	ldr	r1, [r7, #12]
 8003a30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	441a      	add	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	3b01      	subs	r3, #1
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	441a      	add	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	22ff      	movs	r2, #255	; 0xff
 8003a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	22ff      	movs	r2, #255	; 0xff
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d114      	bne.n	8003aa2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01a      	beq.n	8003ab6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3310      	adds	r3, #16
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 f937 	bl	8004cf8 <xTaskRemoveFromEventList>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <xQueueGenericReset+0xcc>)
 8003a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	e009      	b.n	8003ab6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3310      	adds	r3, #16
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fef6 	bl	8003898 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3324      	adds	r3, #36	; 0x24
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fef1 	bl	8003898 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ab6:	f001 fe41 	bl	800573c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003aba:	2301      	movs	r3, #1
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	e000ed04 	.word	0xe000ed04

08003ac8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08e      	sub	sp, #56	; 0x38
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <xQueueGenericCreateStatic+0x52>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <xQueueGenericCreateStatic+0x56>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <xQueueGenericCreateStatic+0x58>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	623b      	str	r3, [r7, #32]
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <xQueueGenericCreateStatic+0x7e>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <xQueueGenericCreateStatic+0x82>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <xQueueGenericCreateStatic+0x84>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	61fb      	str	r3, [r7, #28]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b66:	2348      	movs	r3, #72	; 0x48
 8003b68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b48      	cmp	r3, #72	; 0x48
 8003b6e:	d00a      	beq.n	8003b86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	61bb      	str	r3, [r7, #24]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b98:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f843 	bl	8003c32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3730      	adds	r7, #48	; 0x30
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b08a      	sub	sp, #40	; 0x28
 8003bba:	af02      	add	r7, sp, #8
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	613b      	str	r3, [r7, #16]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	e004      	b.n	8003bf6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3348      	adds	r3, #72	; 0x48
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fe6e 	bl	80058dc <pvPortMalloc>
 8003c00:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00f      	beq.n	8003c28 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	3348      	adds	r3, #72	; 0x48
 8003c0c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c16:	79fa      	ldrb	r2, [r7, #7]
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f805 	bl	8003c32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003c28:	69bb      	ldr	r3, [r7, #24]
	}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e002      	b.n	8003c54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c60:	2101      	movs	r1, #1
 8003c62:	69b8      	ldr	r0, [r7, #24]
 8003c64:	f7ff fec8 	bl	80039f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08e      	sub	sp, #56	; 0x38
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <xQueueGenericSend+0x32>
	__asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d103      	bne.n	8003cb0 <xQueueGenericSend+0x40>
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <xQueueGenericSend+0x44>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <xQueueGenericSend+0x46>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xQueueGenericSend+0x60>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d103      	bne.n	8003cde <xQueueGenericSend+0x6e>
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <xQueueGenericSend+0x72>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <xQueueGenericSend+0x74>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10a      	bne.n	8003cfe <xQueueGenericSend+0x8e>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	623b      	str	r3, [r7, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	e7fe      	b.n	8003cfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cfe:	f001 f9bb 	bl	8005078 <xTaskGetSchedulerState>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <xQueueGenericSend+0x9e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <xQueueGenericSend+0xa2>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <xQueueGenericSend+0xa4>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <xQueueGenericSend+0xbe>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	61fb      	str	r3, [r7, #28]
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d2e:	f001 fcd5 	bl	80056dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <xQueueGenericSend+0xd4>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d129      	bne.n	8003d98 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d4a:	f000 fac0 	bl	80042ce <prvCopyDataToQueue>
 8003d4e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	3324      	adds	r3, #36	; 0x24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ffcb 	bl	8004cf8 <xTaskRemoveFromEventList>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d68:	4b3f      	ldr	r3, [pc, #252]	; (8003e68 <xQueueGenericSend+0x1f8>)
 8003d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	e00a      	b.n	8003d90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d80:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <xQueueGenericSend+0x1f8>)
 8003d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d90:	f001 fcd4 	bl	800573c <vPortExitCritical>
				return pdPASS;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e063      	b.n	8003e60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d9e:	f001 fccd 	bl	800573c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e05c      	b.n	8003e60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d106      	bne.n	8003dba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 f803 	bl	8004dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003db6:	2301      	movs	r3, #1
 8003db8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dba:	f001 fcbf 	bl	800573c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dbe:	f000 fdb5 	bl	800492c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dc2:	f001 fc8b 	bl	80056dc <vPortEnterCritical>
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d103      	bne.n	8003ddc <xQueueGenericSend+0x16c>
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d103      	bne.n	8003df2 <xQueueGenericSend+0x182>
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003df2:	f001 fca3 	bl	800573c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003df6:	1d3a      	adds	r2, r7, #4
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fff2 	bl	8004de8 <xTaskCheckForTimeOut>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d124      	bne.n	8003e54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e0c:	f000 fb57 	bl	80044be <prvIsQueueFull>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	3310      	adds	r3, #16
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 ff46 	bl	8004cb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e26:	f000 fae2 	bl	80043ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e2a:	f000 fd8d 	bl	8004948 <xTaskResumeAll>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f47f af7c 	bne.w	8003d2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <xQueueGenericSend+0x1f8>)
 8003e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	e772      	b.n	8003d2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e4a:	f000 fad0 	bl	80043ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e4e:	f000 fd7b 	bl	8004948 <xTaskResumeAll>
 8003e52:	e76c      	b.n	8003d2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e56:	f000 faca 	bl	80043ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e5a:	f000 fd75 	bl	8004948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e5e:	2300      	movs	r3, #0
		}
	}
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3738      	adds	r7, #56	; 0x38
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08e      	sub	sp, #56	; 0x38
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	623b      	str	r3, [r7, #32]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	61fb      	str	r3, [r7, #28]
}
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <xQueueGiveFromISR+0x58>
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <xQueueGiveFromISR+0x5c>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <xQueueGiveFromISR+0x5e>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	61bb      	str	r3, [r7, #24]
}
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ee4:	f001 fcbc 	bl	8005860 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ee8:	f3ef 8211 	mrs	r2, BASEPRI
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	617a      	str	r2, [r7, #20]
 8003efe:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f00:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d22b      	bcs.n	8003f6c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d112      	bne.n	8003f56 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	3324      	adds	r3, #36	; 0x24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fedb 	bl	8004cf8 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	b25a      	sxtb	r2, r3
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f66:	2301      	movs	r3, #1
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6a:	e001      	b.n	8003f70 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f72:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3738      	adds	r7, #56	; 0x38
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08e      	sub	sp, #56	; 0x38
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	623b      	str	r3, [r7, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	61fb      	str	r3, [r7, #28]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fd8:	f001 f84e 	bl	8005078 <xTaskGetSchedulerState>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <xQueueSemaphoreTake+0x60>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <xQueueSemaphoreTake+0x64>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <xQueueSemaphoreTake+0x66>
 8003fec:	2300      	movs	r3, #0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	61bb      	str	r3, [r7, #24]
}
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004008:	f001 fb68 	bl	80056dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d024      	beq.n	8004062 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	1e5a      	subs	r2, r3, #1
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004028:	f001 f9f0 	bl	800540c <pvTaskIncrementMutexHeldCount>
 800402c:	4602      	mov	r2, r0
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00f      	beq.n	800405a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	3310      	adds	r3, #16
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fe5a 	bl	8004cf8 <xTaskRemoveFromEventList>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800404a:	4b54      	ldr	r3, [pc, #336]	; (800419c <xQueueSemaphoreTake+0x214>)
 800404c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800405a:	f001 fb6f 	bl	800573c <vPortExitCritical>
				return pdPASS;
 800405e:	2301      	movs	r3, #1
 8004060:	e097      	b.n	8004192 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d111      	bne.n	800408c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	617b      	str	r3, [r7, #20]
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004084:	f001 fb5a 	bl	800573c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004088:	2300      	movs	r3, #0
 800408a:	e082      	b.n	8004192 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800408c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fe90 	bl	8004dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040a0:	f001 fb4c 	bl	800573c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040a4:	f000 fc42 	bl	800492c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040a8:	f001 fb18 	bl	80056dc <vPortEnterCritical>
 80040ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d103      	bne.n	80040c2 <xQueueSemaphoreTake+0x13a>
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d103      	bne.n	80040d8 <xQueueSemaphoreTake+0x150>
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d8:	f001 fb30 	bl	800573c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040dc:	463a      	mov	r2, r7
 80040de:	f107 030c 	add.w	r3, r7, #12
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fe7f 	bl	8004de8 <xTaskCheckForTimeOut>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d132      	bne.n	8004156 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040f2:	f000 f9ce 	bl	8004492 <prvIsQueueEmpty>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d026      	beq.n	800414a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d109      	bne.n	8004118 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004104:	f001 faea 	bl	80056dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 ffd1 	bl	80050b4 <xTaskPriorityInherit>
 8004112:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004114:	f001 fb12 	bl	800573c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	3324      	adds	r3, #36	; 0x24
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fdc5 	bl	8004cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004128:	f000 f961 	bl	80043ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800412c:	f000 fc0c 	bl	8004948 <xTaskResumeAll>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	f47f af68 	bne.w	8004008 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <xQueueSemaphoreTake+0x214>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	e75e      	b.n	8004008 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800414a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800414c:	f000 f94f 	bl	80043ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004150:	f000 fbfa 	bl	8004948 <xTaskResumeAll>
 8004154:	e758      	b.n	8004008 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004158:	f000 f949 	bl	80043ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800415c:	f000 fbf4 	bl	8004948 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004162:	f000 f996 	bl	8004492 <prvIsQueueEmpty>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	f43f af4d 	beq.w	8004008 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00d      	beq.n	8004190 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004174:	f001 fab2 	bl	80056dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800417a:	f000 f891 	bl	80042a0 <prvGetDisinheritPriorityAfterTimeout>
 800417e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004186:	4618      	mov	r0, r3
 8004188:	f001 f8a0 	bl	80052cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800418c:	f001 fad6 	bl	800573c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004190:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004192:	4618      	mov	r0, r3
 8004194:	3738      	adds	r7, #56	; 0x38
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10a      	bne.n	80041cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	623b      	str	r3, [r7, #32]
}
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <xQueueReceiveFromISR+0x3a>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <xQueueReceiveFromISR+0x3e>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <xQueueReceiveFromISR+0x40>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	61fb      	str	r3, [r7, #28]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041fa:	f001 fb31 	bl	8005860 <vPortValidateInterruptPriority>
	__asm volatile
 80041fe:	f3ef 8211 	mrs	r2, BASEPRI
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	61ba      	str	r2, [r7, #24]
 8004214:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004216:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02f      	beq.n	8004286 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004234:	f000 f8b5 	bl	80043a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	1e5a      	subs	r2, r3, #1
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d112      	bne.n	8004270 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	3310      	adds	r3, #16
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fd4e 	bl	8004cf8 <xTaskRemoveFromEventList>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00e      	beq.n	8004280 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e007      	b.n	8004280 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004274:	3301      	adds	r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	b25a      	sxtb	r2, r3
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004280:	2301      	movs	r3, #1
 8004282:	637b      	str	r3, [r7, #52]	; 0x34
 8004284:	e001      	b.n	800428a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004286:	2300      	movs	r3, #0
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f383 8811 	msr	BASEPRI, r3
}
 8004294:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004298:	4618      	mov	r0, r3
 800429a:	3738      	adds	r7, #56	; 0x38
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f1c3 0307 	rsb	r3, r3, #7
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e001      	b.n	80042c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80042c2:	68fb      	ldr	r3, [r7, #12]
	}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10d      	bne.n	8004308 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d14d      	bne.n	8004390 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 ff61 	bl	80051c0 <xTaskPriorityDisinherit>
 80042fe:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	e043      	b.n	8004390 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d119      	bne.n	8004342 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6898      	ldr	r0, [r3, #8]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	461a      	mov	r2, r3
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	f001 fcff 	bl	8005d1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	441a      	add	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d32b      	bcc.n	8004390 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	e026      	b.n	8004390 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68d8      	ldr	r0, [r3, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	461a      	mov	r2, r3
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	f001 fce5 	bl	8005d1c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	425b      	negs	r3, r3
 800435c:	441a      	add	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d207      	bcs.n	800437e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	425b      	negs	r3, r3
 8004378:	441a      	add	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d105      	bne.n	8004390 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	3b01      	subs	r3, #1
 800438e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004398:	697b      	ldr	r3, [r7, #20]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d018      	beq.n	80043e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d303      	bcc.n	80043d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68d9      	ldr	r1, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	461a      	mov	r2, r3
 80043e0:	6838      	ldr	r0, [r7, #0]
 80043e2:	f001 fc9b 	bl	8005d1c <memcpy>
	}
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043f6:	f001 f971 	bl	80056dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004400:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004402:	e011      	b.n	8004428 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d012      	beq.n	8004432 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3324      	adds	r3, #36	; 0x24
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fc71 	bl	8004cf8 <xTaskRemoveFromEventList>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800441c:	f000 fd46 	bl	8004eac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	3b01      	subs	r3, #1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	dce9      	bgt.n	8004404 <prvUnlockQueue+0x16>
 8004430:	e000      	b.n	8004434 <prvUnlockQueue+0x46>
					break;
 8004432:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	22ff      	movs	r2, #255	; 0xff
 8004438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800443c:	f001 f97e 	bl	800573c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004440:	f001 f94c 	bl	80056dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800444a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800444c:	e011      	b.n	8004472 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d012      	beq.n	800447c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3310      	adds	r3, #16
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fc4c 	bl	8004cf8 <xTaskRemoveFromEventList>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004466:	f000 fd21 	bl	8004eac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800446a:	7bbb      	ldrb	r3, [r7, #14]
 800446c:	3b01      	subs	r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004476:	2b00      	cmp	r3, #0
 8004478:	dce9      	bgt.n	800444e <prvUnlockQueue+0x60>
 800447a:	e000      	b.n	800447e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800447c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	22ff      	movs	r2, #255	; 0xff
 8004482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004486:	f001 f959 	bl	800573c <vPortExitCritical>
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800449a:	f001 f91f 	bl	80056dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e001      	b.n	80044b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044b0:	f001 f944 	bl	800573c <vPortExitCritical>

	return xReturn;
 80044b4:	68fb      	ldr	r3, [r7, #12]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044c6:	f001 f909 	bl	80056dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d102      	bne.n	80044dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e001      	b.n	80044e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044e0:	f001 f92c 	bl	800573c <vPortExitCritical>

	return xReturn;
 80044e4:	68fb      	ldr	r3, [r7, #12]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b08e      	sub	sp, #56	; 0x38
 80044f2:	af04      	add	r7, sp, #16
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	623b      	str	r3, [r7, #32]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <xTaskCreateStatic+0x46>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	61fb      	str	r3, [r7, #28]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004534:	2354      	movs	r3, #84	; 0x54
 8004536:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b54      	cmp	r3, #84	; 0x54
 800453c:	d00a      	beq.n	8004554 <xTaskCreateStatic+0x66>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	61bb      	str	r3, [r7, #24]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01e      	beq.n	8004598 <xTaskCreateStatic+0xaa>
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01b      	beq.n	8004598 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004568:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	2202      	movs	r2, #2
 800456e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004572:	2300      	movs	r3, #0
 8004574:	9303      	str	r3, [sp, #12]
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	9302      	str	r3, [sp, #8]
 800457a:	f107 0314 	add.w	r3, r7, #20
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f850 	bl	8004630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004592:	f000 f8cd 	bl	8004730 <prvAddNewTaskToReadyList>
 8004596:	e001      	b.n	800459c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800459c:	697b      	ldr	r3, [r7, #20]
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	3728      	adds	r7, #40	; 0x28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b08c      	sub	sp, #48	; 0x30
 80045aa:	af04      	add	r7, sp, #16
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	603b      	str	r3, [r7, #0]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 f98e 	bl	80058dc <pvPortMalloc>
 80045c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80045c8:	2054      	movs	r0, #84	; 0x54
 80045ca:	f001 f987 	bl	80058dc <pvPortMalloc>
 80045ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
 80045dc:	e005      	b.n	80045ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045de:	6978      	ldr	r0, [r7, #20]
 80045e0:	f001 fa40 	bl	8005a64 <vPortFree>
 80045e4:	e001      	b.n	80045ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d017      	beq.n	8004620 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9303      	str	r3, [sp, #12]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	9302      	str	r3, [sp, #8]
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f80e 	bl	8004630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004614:	69f8      	ldr	r0, [r7, #28]
 8004616:	f000 f88b 	bl	8004730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800461a:	2301      	movs	r3, #1
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	e002      	b.n	8004626 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004620:	f04f 33ff 	mov.w	r3, #4294967295
 8004624:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004626:	69bb      	ldr	r3, [r7, #24]
	}
 8004628:	4618      	mov	r0, r3
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004648:	3b01      	subs	r3, #1
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f023 0307 	bic.w	r3, r3, #7
 8004656:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	617b      	str	r3, [r7, #20]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e012      	b.n	80046a4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	7819      	ldrb	r1, [r3, #0]
 8004686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	4413      	add	r3, r2
 800468c:	3334      	adds	r3, #52	; 0x34
 800468e:	460a      	mov	r2, r1
 8004690:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d006      	beq.n	80046ac <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3301      	adds	r3, #1
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b0f      	cmp	r3, #15
 80046a8:	d9e9      	bls.n	800467e <prvInitialiseNewTask+0x4e>
 80046aa:	e000      	b.n	80046ae <prvInitialiseNewTask+0x7e>
		{
			break;
 80046ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	2b06      	cmp	r3, #6
 80046ba:	d901      	bls.n	80046c0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046bc:	2306      	movs	r3, #6
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	2200      	movs	r2, #0
 80046d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	3304      	adds	r3, #4
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff f8fd 	bl	80038d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	3318      	adds	r3, #24
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff f8f8 	bl	80038d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	f1c3 0207 	rsb	r2, r3, #7
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	2200      	movs	r2, #0
 8004700:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	68f9      	ldr	r1, [r7, #12]
 800470e:	69b8      	ldr	r0, [r7, #24]
 8004710:	f000 fef6 	bl	8005500 <pxPortInitialiseStack>
 8004714:	4602      	mov	r2, r0
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004726:	bf00      	nop
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004738:	f000 ffd0 	bl	80056dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <prvAddNewTaskToReadyList+0xb8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <prvAddNewTaskToReadyList+0xb8>)
 8004744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004746:	4b29      	ldr	r3, [pc, #164]	; (80047ec <prvAddNewTaskToReadyList+0xbc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800474e:	4a27      	ldr	r2, [pc, #156]	; (80047ec <prvAddNewTaskToReadyList+0xbc>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004754:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <prvAddNewTaskToReadyList+0xb8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d110      	bne.n	800477e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800475c:	f000 fbca 	bl	8004ef4 <prvInitialiseTaskLists>
 8004760:	e00d      	b.n	800477e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004762:	4b23      	ldr	r3, [pc, #140]	; (80047f0 <prvAddNewTaskToReadyList+0xc0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <prvAddNewTaskToReadyList+0xbc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	429a      	cmp	r2, r3
 8004776:	d802      	bhi.n	800477e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004778:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <prvAddNewTaskToReadyList+0xbc>)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <prvAddNewTaskToReadyList+0xc4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3301      	adds	r3, #1
 8004784:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <prvAddNewTaskToReadyList+0xc4>)
 8004786:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	2201      	movs	r2, #1
 800478e:	409a      	lsls	r2, r3
 8004790:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <prvAddNewTaskToReadyList+0xc8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4313      	orrs	r3, r2
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <prvAddNewTaskToReadyList+0xc8>)
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4a15      	ldr	r2, [pc, #84]	; (80047fc <prvAddNewTaskToReadyList+0xcc>)
 80047a8:	441a      	add	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7ff f89c 	bl	80038ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047b6:	f000 ffc1 	bl	800573c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <prvAddNewTaskToReadyList+0xc0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00e      	beq.n	80047e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <prvAddNewTaskToReadyList+0xbc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d207      	bcs.n	80047e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <prvAddNewTaskToReadyList+0xd0>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	200005b4 	.word	0x200005b4
 80047ec:	200004b4 	.word	0x200004b4
 80047f0:	200005c0 	.word	0x200005c0
 80047f4:	200005d0 	.word	0x200005d0
 80047f8:	200005bc 	.word	0x200005bc
 80047fc:	200004b8 	.word	0x200004b8
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d017      	beq.n	8004846 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <vTaskDelay+0x60>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <vTaskDelay+0x30>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	60bb      	str	r3, [r7, #8]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004834:	f000 f87a 	bl	800492c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004838:	2100      	movs	r1, #0
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fdfa 	bl	8005434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004840:	f000 f882 	bl	8004948 <xTaskResumeAll>
 8004844:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <vTaskDelay+0x64>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	200005dc 	.word	0x200005dc
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800487a:	463a      	mov	r2, r7
 800487c:	1d39      	adds	r1, r7, #4
 800487e:	f107 0308 	add.w	r3, r7, #8
 8004882:	4618      	mov	r0, r3
 8004884:	f7fb fd84 	bl	8000390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004888:	6839      	ldr	r1, [r7, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	9202      	str	r2, [sp, #8]
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	2300      	movs	r3, #0
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	2300      	movs	r3, #0
 8004898:	460a      	mov	r2, r1
 800489a:	491e      	ldr	r1, [pc, #120]	; (8004914 <vTaskStartScheduler+0xa8>)
 800489c:	481e      	ldr	r0, [pc, #120]	; (8004918 <vTaskStartScheduler+0xac>)
 800489e:	f7ff fe26 	bl	80044ee <xTaskCreateStatic>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4a1d      	ldr	r2, [pc, #116]	; (800491c <vTaskStartScheduler+0xb0>)
 80048a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048a8:	4b1c      	ldr	r3, [pc, #112]	; (800491c <vTaskStartScheduler+0xb0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048b0:	2301      	movs	r3, #1
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	e001      	b.n	80048ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d116      	bne.n	80048ee <vTaskStartScheduler+0x82>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	613b      	str	r3, [r7, #16]
}
 80048d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048d4:	4b12      	ldr	r3, [pc, #72]	; (8004920 <vTaskStartScheduler+0xb4>)
 80048d6:	f04f 32ff 	mov.w	r2, #4294967295
 80048da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048dc:	4b11      	ldr	r3, [pc, #68]	; (8004924 <vTaskStartScheduler+0xb8>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80048e2:	4b11      	ldr	r3, [pc, #68]	; (8004928 <vTaskStartScheduler+0xbc>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048e8:	f000 fe86 	bl	80055f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048ec:	e00e      	b.n	800490c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d10a      	bne.n	800490c <vTaskStartScheduler+0xa0>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	60fb      	str	r3, [r7, #12]
}
 8004908:	bf00      	nop
 800490a:	e7fe      	b.n	800490a <vTaskStartScheduler+0x9e>
}
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	08005fcc 	.word	0x08005fcc
 8004918:	08004ec5 	.word	0x08004ec5
 800491c:	200005d8 	.word	0x200005d8
 8004920:	200005d4 	.word	0x200005d4
 8004924:	200005c0 	.word	0x200005c0
 8004928:	200005b8 	.word	0x200005b8

0800492c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <vTaskSuspendAll+0x18>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	4a03      	ldr	r2, [pc, #12]	; (8004944 <vTaskSuspendAll+0x18>)
 8004938:	6013      	str	r3, [r2, #0]
}
 800493a:	bf00      	nop
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	200005dc 	.word	0x200005dc

08004948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004956:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <xTaskResumeAll+0x114>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <xTaskResumeAll+0x2c>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	603b      	str	r3, [r7, #0]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004974:	f000 feb2 	bl	80056dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004978:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <xTaskResumeAll+0x114>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3b01      	subs	r3, #1
 800497e:	4a37      	ldr	r2, [pc, #220]	; (8004a5c <xTaskResumeAll+0x114>)
 8004980:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004982:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <xTaskResumeAll+0x114>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d161      	bne.n	8004a4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800498a:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <xTaskResumeAll+0x118>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d05d      	beq.n	8004a4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004992:	e02e      	b.n	80049f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004994:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <xTaskResumeAll+0x11c>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3318      	adds	r3, #24
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe ffff 	bl	80039a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe fffa 	bl	80039a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	2201      	movs	r2, #1
 80049b6:	409a      	lsls	r2, r3
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <xTaskResumeAll+0x120>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4313      	orrs	r3, r2
 80049be:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <xTaskResumeAll+0x120>)
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4a27      	ldr	r2, [pc, #156]	; (8004a6c <xTaskResumeAll+0x124>)
 80049d0:	441a      	add	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f7fe ff88 	bl	80038ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <xTaskResumeAll+0x128>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d302      	bcc.n	80049f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <xTaskResumeAll+0x12c>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049f2:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <xTaskResumeAll+0x11c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1cc      	bne.n	8004994 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a00:	f000 fb16 	bl	8005030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a04:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <xTaskResumeAll+0x130>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a10:	f000 f836 	bl	8004a80 <xTaskIncrementTick>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <xTaskResumeAll+0x12c>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f1      	bne.n	8004a10 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <xTaskResumeAll+0x130>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <xTaskResumeAll+0x12c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <xTaskResumeAll+0x134>)
 8004a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a4e:	f000 fe75 	bl	800573c <vPortExitCritical>

	return xAlreadyYielded;
 8004a52:	68bb      	ldr	r3, [r7, #8]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	200005dc 	.word	0x200005dc
 8004a60:	200005b4 	.word	0x200005b4
 8004a64:	20000574 	.word	0x20000574
 8004a68:	200005bc 	.word	0x200005bc
 8004a6c:	200004b8 	.word	0x200004b8
 8004a70:	200004b4 	.word	0x200004b4
 8004a74:	200005c8 	.word	0x200005c8
 8004a78:	200005c4 	.word	0x200005c4
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a8a:	4b51      	ldr	r3, [pc, #324]	; (8004bd0 <xTaskIncrementTick+0x150>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 808d 	bne.w	8004bae <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a94:	4b4f      	ldr	r3, [pc, #316]	; (8004bd4 <xTaskIncrementTick+0x154>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a9c:	4a4d      	ldr	r2, [pc, #308]	; (8004bd4 <xTaskIncrementTick+0x154>)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d120      	bne.n	8004aea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004aa8:	4b4b      	ldr	r3, [pc, #300]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	603b      	str	r3, [r7, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <xTaskIncrementTick+0x46>
 8004ac8:	4b43      	ldr	r3, [pc, #268]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b43      	ldr	r3, [pc, #268]	; (8004bdc <xTaskIncrementTick+0x15c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a41      	ldr	r2, [pc, #260]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4a41      	ldr	r2, [pc, #260]	; (8004bdc <xTaskIncrementTick+0x15c>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b40      	ldr	r3, [pc, #256]	; (8004be0 <xTaskIncrementTick+0x160>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	4a3f      	ldr	r2, [pc, #252]	; (8004be0 <xTaskIncrementTick+0x160>)
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	f000 faa3 	bl	8005030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004aea:	4b3e      	ldr	r3, [pc, #248]	; (8004be4 <xTaskIncrementTick+0x164>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d34d      	bcc.n	8004b90 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af4:	4b38      	ldr	r3, [pc, #224]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <xTaskIncrementTick+0x82>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <xTaskIncrementTick+0x84>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b08:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <xTaskIncrementTick+0x164>)
 8004b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0e:	601a      	str	r2, [r3, #0]
					break;
 8004b10:	e03e      	b.n	8004b90 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b12:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d203      	bcs.n	8004b32 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b2a:	4a2e      	ldr	r2, [pc, #184]	; (8004be4 <xTaskIncrementTick+0x164>)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6013      	str	r3, [r2, #0]
						break;
 8004b30:	e02e      	b.n	8004b90 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe ff34 	bl	80039a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3318      	adds	r3, #24
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe ff2b 	bl	80039a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	2201      	movs	r2, #1
 8004b54:	409a      	lsls	r2, r3
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <xTaskIncrementTick+0x168>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <xTaskIncrementTick+0x168>)
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4a1f      	ldr	r2, [pc, #124]	; (8004bec <xTaskIncrementTick+0x16c>)
 8004b6e:	441a      	add	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f7fe feb9 	bl	80038ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <xTaskIncrementTick+0x170>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d3b4      	bcc.n	8004af4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8e:	e7b1      	b.n	8004af4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b90:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <xTaskIncrementTick+0x170>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	4915      	ldr	r1, [pc, #84]	; (8004bec <xTaskIncrementTick+0x16c>)
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d907      	bls.n	8004bb8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e004      	b.n	8004bb8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <xTaskIncrementTick+0x174>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	4a0f      	ldr	r2, [pc, #60]	; (8004bf4 <xTaskIncrementTick+0x174>)
 8004bb6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <xTaskIncrementTick+0x178>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bc4:	697b      	ldr	r3, [r7, #20]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200005dc 	.word	0x200005dc
 8004bd4:	200005b8 	.word	0x200005b8
 8004bd8:	2000056c 	.word	0x2000056c
 8004bdc:	20000570 	.word	0x20000570
 8004be0:	200005cc 	.word	0x200005cc
 8004be4:	200005d4 	.word	0x200005d4
 8004be8:	200005bc 	.word	0x200005bc
 8004bec:	200004b8 	.word	0x200004b8
 8004bf0:	200004b4 	.word	0x200004b4
 8004bf4:	200005c4 	.word	0x200005c4
 8004bf8:	200005c8 	.word	0x200005c8

08004bfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c02:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <vTaskSwitchContext+0xa0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c0a:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <vTaskSwitchContext+0xa4>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c10:	e03f      	b.n	8004c92 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004c12:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <vTaskSwitchContext+0xa4>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c18:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <vTaskSwitchContext+0xa8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c26:	7afb      	ldrb	r3, [r7, #11]
 8004c28:	f1c3 031f 	rsb	r3, r3, #31
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	491e      	ldr	r1, [pc, #120]	; (8004ca8 <vTaskSwitchContext+0xac>)
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	607b      	str	r3, [r7, #4]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <vTaskSwitchContext+0x5a>
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4a11      	ldr	r2, [pc, #68]	; (8004ca8 <vTaskSwitchContext+0xac>)
 8004c64:	4413      	add	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d104      	bne.n	8004c88 <vTaskSwitchContext+0x8c>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	605a      	str	r2, [r3, #4]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	4a07      	ldr	r2, [pc, #28]	; (8004cac <vTaskSwitchContext+0xb0>)
 8004c90:	6013      	str	r3, [r2, #0]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	200005dc 	.word	0x200005dc
 8004ca0:	200005c8 	.word	0x200005c8
 8004ca4:	200005bc 	.word	0x200005bc
 8004ca8:	200004b8 	.word	0x200004b8
 8004cac:	200004b4 	.word	0x200004b4

08004cb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <vTaskPlaceOnEventList+0x44>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3318      	adds	r3, #24
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fe fe28 	bl	8003934 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	6838      	ldr	r0, [r7, #0]
 8004ce8:	f000 fba4 	bl	8005434 <prvAddCurrentTaskToDelayedList>
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	200004b4 	.word	0x200004b4

08004cf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	60fb      	str	r3, [r7, #12]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3318      	adds	r3, #24
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe fe3b 	bl	80039a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2e:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <xTaskRemoveFromEventList+0xac>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11c      	bne.n	8004d70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe fe32 	bl	80039a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	2201      	movs	r2, #1
 8004d46:	409a      	lsls	r2, r3
 8004d48:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <xTaskRemoveFromEventList+0xb0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	4a16      	ldr	r2, [pc, #88]	; (8004da8 <xTaskRemoveFromEventList+0xb0>)
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4a13      	ldr	r2, [pc, #76]	; (8004dac <xTaskRemoveFromEventList+0xb4>)
 8004d60:	441a      	add	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f7fe fdc0 	bl	80038ee <vListInsertEnd>
 8004d6e:	e005      	b.n	8004d7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3318      	adds	r3, #24
 8004d74:	4619      	mov	r1, r3
 8004d76:	480e      	ldr	r0, [pc, #56]	; (8004db0 <xTaskRemoveFromEventList+0xb8>)
 8004d78:	f7fe fdb9 	bl	80038ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <xTaskRemoveFromEventList+0xbc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d905      	bls.n	8004d96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <xTaskRemoveFromEventList+0xc0>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e001      	b.n	8004d9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d9a:	697b      	ldr	r3, [r7, #20]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	200005dc 	.word	0x200005dc
 8004da8:	200005bc 	.word	0x200005bc
 8004dac:	200004b8 	.word	0x200004b8
 8004db0:	20000574 	.word	0x20000574
 8004db4:	200004b4 	.word	0x200004b4
 8004db8:	200005c8 	.word	0x200005c8

08004dbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <vTaskInternalSetTimeOutState+0x24>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <vTaskInternalSetTimeOutState+0x28>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	605a      	str	r2, [r3, #4]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	200005cc 	.word	0x200005cc
 8004de4:	200005b8 	.word	0x200005b8

08004de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	613b      	str	r3, [r7, #16]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	60fb      	str	r3, [r7, #12]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e2a:	f000 fc57 	bl	80056dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <xTaskCheckForTimeOut+0xbc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d102      	bne.n	8004e4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	e023      	b.n	8004e96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <xTaskCheckForTimeOut+0xc0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d007      	beq.n	8004e6a <xTaskCheckForTimeOut+0x82>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d302      	bcc.n	8004e6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e015      	b.n	8004e96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d20b      	bcs.n	8004e8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff9b 	bl	8004dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e004      	b.n	8004e96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e92:	2301      	movs	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e96:	f000 fc51 	bl	800573c <vPortExitCritical>

	return xReturn;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	200005b8 	.word	0x200005b8
 8004ea8:	200005cc 	.word	0x200005cc

08004eac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <vTaskMissedYield+0x14>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	200005c8 	.word	0x200005c8

08004ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ecc:	f000 f852 	bl	8004f74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <prvIdleTask+0x28>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d9f9      	bls.n	8004ecc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <prvIdleTask+0x2c>)
 8004eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ee8:	e7f0      	b.n	8004ecc <prvIdleTask+0x8>
 8004eea:	bf00      	nop
 8004eec:	200004b8 	.word	0x200004b8
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004efa:	2300      	movs	r3, #0
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	e00c      	b.n	8004f1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <prvInitialiseTaskLists+0x60>)
 8004f0c:	4413      	add	r3, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fcc2 	bl	8003898 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3301      	adds	r3, #1
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b06      	cmp	r3, #6
 8004f1e:	d9ef      	bls.n	8004f00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f20:	480d      	ldr	r0, [pc, #52]	; (8004f58 <prvInitialiseTaskLists+0x64>)
 8004f22:	f7fe fcb9 	bl	8003898 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f26:	480d      	ldr	r0, [pc, #52]	; (8004f5c <prvInitialiseTaskLists+0x68>)
 8004f28:	f7fe fcb6 	bl	8003898 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f2c:	480c      	ldr	r0, [pc, #48]	; (8004f60 <prvInitialiseTaskLists+0x6c>)
 8004f2e:	f7fe fcb3 	bl	8003898 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f32:	480c      	ldr	r0, [pc, #48]	; (8004f64 <prvInitialiseTaskLists+0x70>)
 8004f34:	f7fe fcb0 	bl	8003898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f38:	480b      	ldr	r0, [pc, #44]	; (8004f68 <prvInitialiseTaskLists+0x74>)
 8004f3a:	f7fe fcad 	bl	8003898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <prvInitialiseTaskLists+0x78>)
 8004f40:	4a05      	ldr	r2, [pc, #20]	; (8004f58 <prvInitialiseTaskLists+0x64>)
 8004f42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <prvInitialiseTaskLists+0x7c>)
 8004f46:	4a05      	ldr	r2, [pc, #20]	; (8004f5c <prvInitialiseTaskLists+0x68>)
 8004f48:	601a      	str	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200004b8 	.word	0x200004b8
 8004f58:	20000544 	.word	0x20000544
 8004f5c:	20000558 	.word	0x20000558
 8004f60:	20000574 	.word	0x20000574
 8004f64:	20000588 	.word	0x20000588
 8004f68:	200005a0 	.word	0x200005a0
 8004f6c:	2000056c 	.word	0x2000056c
 8004f70:	20000570 	.word	0x20000570

08004f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f7a:	e019      	b.n	8004fb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f7c:	f000 fbae 	bl	80056dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f80:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <prvCheckTasksWaitingTermination+0x50>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe fd09 	bl	80039a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <prvCheckTasksWaitingTermination+0x54>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	4a0b      	ldr	r2, [pc, #44]	; (8004fc8 <prvCheckTasksWaitingTermination+0x54>)
 8004f9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <prvCheckTasksWaitingTermination+0x58>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <prvCheckTasksWaitingTermination+0x58>)
 8004fa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fa6:	f000 fbc9 	bl	800573c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f810 	bl	8004fd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <prvCheckTasksWaitingTermination+0x58>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e1      	bne.n	8004f7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000588 	.word	0x20000588
 8004fc8:	200005b4 	.word	0x200005b4
 8004fcc:	2000059c 	.word	0x2000059c

08004fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d108      	bne.n	8004ff4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fd3c 	bl	8005a64 <vPortFree>
				vPortFree( pxTCB );
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fd39 	bl	8005a64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ff2:	e018      	b.n	8005026 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d103      	bne.n	8005006 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fd30 	bl	8005a64 <vPortFree>
	}
 8005004:	e00f      	b.n	8005026 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800500c:	2b02      	cmp	r3, #2
 800500e:	d00a      	beq.n	8005026 <prvDeleteTCB+0x56>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <prvDeleteTCB+0x54>
	}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005036:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <prvResetNextTaskUnblockTime+0x40>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <prvResetNextTaskUnblockTime+0x14>
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <prvResetNextTaskUnblockTime+0x16>
 8005044:	2300      	movs	r3, #0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800504a:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <prvResetNextTaskUnblockTime+0x44>)
 800504c:	f04f 32ff 	mov.w	r2, #4294967295
 8005050:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005052:	e008      	b.n	8005066 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <prvResetNextTaskUnblockTime+0x40>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4a04      	ldr	r2, [pc, #16]	; (8005074 <prvResetNextTaskUnblockTime+0x44>)
 8005064:	6013      	str	r3, [r2, #0]
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr
 8005070:	2000056c 	.word	0x2000056c
 8005074:	200005d4 	.word	0x200005d4

08005078 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <xTaskGetSchedulerState+0x34>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005086:	2301      	movs	r3, #1
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	e008      	b.n	800509e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800508c:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <xTaskGetSchedulerState+0x38>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005094:	2302      	movs	r3, #2
 8005096:	607b      	str	r3, [r7, #4]
 8005098:	e001      	b.n	800509e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800509a:	2300      	movs	r3, #0
 800509c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800509e:	687b      	ldr	r3, [r7, #4]
	}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	200005c0 	.word	0x200005c0
 80050b0:	200005dc 	.word	0x200005dc

080050b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d06e      	beq.n	80051a8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <xTaskPriorityInherit+0x100>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d25e      	bcs.n	8005196 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	db06      	blt.n	80050ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e0:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <xTaskPriorityInherit+0x100>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f1c3 0207 	rsb	r2, r3, #7
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	6959      	ldr	r1, [r3, #20]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4a2e      	ldr	r2, [pc, #184]	; (80051b8 <xTaskPriorityInherit+0x104>)
 8005100:	4413      	add	r3, r2
 8005102:	4299      	cmp	r1, r3
 8005104:	d101      	bne.n	800510a <xTaskPriorityInherit+0x56>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <xTaskPriorityInherit+0x58>
 800510a:	2300      	movs	r3, #0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d03a      	beq.n	8005186 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	3304      	adds	r3, #4
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe fc45 	bl	80039a4 <uxListRemove>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d115      	bne.n	800514c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005124:	4924      	ldr	r1, [pc, #144]	; (80051b8 <xTaskPriorityInherit+0x104>)
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <xTaskPriorityInherit+0x98>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	2201      	movs	r2, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43da      	mvns	r2, r3
 8005142:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <xTaskPriorityInherit+0x108>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4013      	ands	r3, r2
 8005148:	4a1c      	ldr	r2, [pc, #112]	; (80051bc <xTaskPriorityInherit+0x108>)
 800514a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <xTaskPriorityInherit+0x100>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	2201      	movs	r2, #1
 800515c:	409a      	lsls	r2, r3
 800515e:	4b17      	ldr	r3, [pc, #92]	; (80051bc <xTaskPriorityInherit+0x108>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4313      	orrs	r3, r2
 8005164:	4a15      	ldr	r2, [pc, #84]	; (80051bc <xTaskPriorityInherit+0x108>)
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <xTaskPriorityInherit+0x104>)
 8005176:	441a      	add	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f7fe fbb5 	bl	80038ee <vListInsertEnd>
 8005184:	e004      	b.n	8005190 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <xTaskPriorityInherit+0x100>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005190:	2301      	movs	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e008      	b.n	80051a8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <xTaskPriorityInherit+0x100>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d201      	bcs.n	80051a8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051a8:	68fb      	ldr	r3, [r7, #12]
	}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200004b4 	.word	0x200004b4
 80051b8:	200004b8 	.word	0x200004b8
 80051bc:	200005bc 	.word	0x200005bc

080051c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d06e      	beq.n	80052b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051d6:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <xTaskPriorityDisinherit+0x100>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d00a      	beq.n	80051f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60fb      	str	r3, [r7, #12]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60bb      	str	r3, [r7, #8]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005218:	1e5a      	subs	r2, r3, #1
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	429a      	cmp	r2, r3
 8005228:	d044      	beq.n	80052b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	2b00      	cmp	r3, #0
 8005230:	d140      	bne.n	80052b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3304      	adds	r3, #4
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe fbb4 	bl	80039a4 <uxListRemove>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d115      	bne.n	800526e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	491f      	ldr	r1, [pc, #124]	; (80052c4 <xTaskPriorityDisinherit+0x104>)
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xTaskPriorityDisinherit+0xae>
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	2201      	movs	r2, #1
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43da      	mvns	r2, r3
 8005264:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <xTaskPriorityDisinherit+0x108>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4013      	ands	r3, r2
 800526a:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <xTaskPriorityDisinherit+0x108>)
 800526c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	f1c3 0207 	rsb	r2, r3, #7
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	2201      	movs	r2, #1
 8005288:	409a      	lsls	r2, r3
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <xTaskPriorityDisinherit+0x108>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	4a0d      	ldr	r2, [pc, #52]	; (80052c8 <xTaskPriorityDisinherit+0x108>)
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <xTaskPriorityDisinherit+0x104>)
 80052a2:	441a      	add	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7fe fb1f 	bl	80038ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052b4:	697b      	ldr	r3, [r7, #20]
	}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	200004b4 	.word	0x200004b4
 80052c4:	200004b8 	.word	0x200004b8
 80052c8:	200005bc 	.word	0x200005bc

080052cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052da:	2301      	movs	r3, #1
 80052dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8088 	beq.w	80053f6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	60fb      	str	r3, [r7, #12]
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d902      	bls.n	8005314 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	e002      	b.n	800531a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	429a      	cmp	r2, r3
 8005322:	d068      	beq.n	80053f6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	429a      	cmp	r2, r3
 800532c:	d163      	bne.n	80053f6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800532e:	4b34      	ldr	r3, [pc, #208]	; (8005400 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	429a      	cmp	r2, r3
 8005336:	d10a      	bne.n	800534e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	60bb      	str	r3, [r7, #8]
}
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	2b00      	cmp	r3, #0
 8005360:	db04      	blt.n	800536c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f1c3 0207 	rsb	r2, r3, #7
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	6959      	ldr	r1, [r3, #20]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4a22      	ldr	r2, [pc, #136]	; (8005404 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800537c:	4413      	add	r3, r2
 800537e:	4299      	cmp	r1, r3
 8005380:	d101      	bne.n	8005386 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d034      	beq.n	80053f6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3304      	adds	r3, #4
 8005390:	4618      	mov	r0, r3
 8005392:	f7fe fb07 	bl	80039a4 <uxListRemove>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d115      	bne.n	80053c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a0:	4918      	ldr	r1, [pc, #96]	; (8005404 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	2201      	movs	r2, #1
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	43da      	mvns	r2, r3
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4013      	ands	r3, r2
 80053c4:	4a10      	ldr	r2, [pc, #64]	; (8005408 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80053c6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	2201      	movs	r2, #1
 80053ce:	409a      	lsls	r2, r3
 80053d0:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	4a0c      	ldr	r2, [pc, #48]	; (8005408 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4a07      	ldr	r2, [pc, #28]	; (8005404 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80053e8:	441a      	add	r2, r3
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f7fe fa7c 	bl	80038ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053f6:	bf00      	nop
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	200004b4 	.word	0x200004b4
 8005404:	200004b8 	.word	0x200004b8
 8005408:	200005bc 	.word	0x200005bc

0800540c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005410:	4b07      	ldr	r3, [pc, #28]	; (8005430 <pvTaskIncrementMutexHeldCount+0x24>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <pvTaskIncrementMutexHeldCount+0x24>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800541e:	3201      	adds	r2, #1
 8005420:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005422:	4b03      	ldr	r3, [pc, #12]	; (8005430 <pvTaskIncrementMutexHeldCount+0x24>)
 8005424:	681b      	ldr	r3, [r3, #0]
	}
 8005426:	4618      	mov	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	200004b4 	.word	0x200004b4

08005434 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800543e:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005444:	4b28      	ldr	r3, [pc, #160]	; (80054e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3304      	adds	r3, #4
 800544a:	4618      	mov	r0, r3
 800544c:	f7fe faaa 	bl	80039a4 <uxListRemove>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005456:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	2201      	movs	r2, #1
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43da      	mvns	r2, r3
 8005464:	4b21      	ldr	r3, [pc, #132]	; (80054ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4013      	ands	r3, r2
 800546a:	4a20      	ldr	r2, [pc, #128]	; (80054ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800546c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d10a      	bne.n	800548c <prvAddCurrentTaskToDelayedList+0x58>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800547c:	4b1a      	ldr	r3, [pc, #104]	; (80054e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3304      	adds	r3, #4
 8005482:	4619      	mov	r1, r3
 8005484:	481a      	ldr	r0, [pc, #104]	; (80054f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005486:	f7fe fa32 	bl	80038ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800548a:	e026      	b.n	80054da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4413      	add	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005494:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d209      	bcs.n	80054b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f7fe fa3f 	bl	8003934 <vListInsert>
}
 80054b6:	e010      	b.n	80054da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054b8:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f7fe fa35 	bl	8003934 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d202      	bcs.n	80054da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80054d4:	4a09      	ldr	r2, [pc, #36]	; (80054fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6013      	str	r3, [r2, #0]
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	200005b8 	.word	0x200005b8
 80054e8:	200004b4 	.word	0x200004b4
 80054ec:	200005bc 	.word	0x200005bc
 80054f0:	200005a0 	.word	0x200005a0
 80054f4:	20000570 	.word	0x20000570
 80054f8:	2000056c 	.word	0x2000056c
 80054fc:	200005d4 	.word	0x200005d4

08005500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3b04      	subs	r3, #4
 8005510:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b04      	subs	r3, #4
 800551e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3b04      	subs	r3, #4
 800552e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005530:	4a08      	ldr	r2, [pc, #32]	; (8005554 <pxPortInitialiseStack+0x54>)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3b14      	subs	r3, #20
 800553a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3b20      	subs	r3, #32
 8005546:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005548:	68fb      	ldr	r3, [r7, #12]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr
 8005554:	08005559 	.word	0x08005559

08005558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800555e:	2300      	movs	r3, #0
 8005560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005562:	4b12      	ldr	r3, [pc, #72]	; (80055ac <prvTaskExitError+0x54>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d00a      	beq.n	8005582 <prvTaskExitError+0x2a>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60fb      	str	r3, [r7, #12]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <prvTaskExitError+0x28>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60bb      	str	r3, [r7, #8]
}
 8005594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005596:	bf00      	nop
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0fc      	beq.n	8005598 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	2000000c 	.word	0x2000000c

080055b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <pxCurrentTCBConst2>)
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	6808      	ldr	r0, [r1, #0]
 80055b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055ba:	f380 8809 	msr	PSP, r0
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8811 	msr	BASEPRI, r0
 80055ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80055ce:	4770      	bx	lr

080055d0 <pxCurrentTCBConst2>:
 80055d0:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80055d8:	4806      	ldr	r0, [pc, #24]	; (80055f4 <prvPortStartFirstTask+0x1c>)
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	6800      	ldr	r0, [r0, #0]
 80055de:	f380 8808 	msr	MSP, r0
 80055e2:	b662      	cpsie	i
 80055e4:	b661      	cpsie	f
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	df00      	svc	0
 80055f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055f2:	bf00      	nop
 80055f4:	e000ed08 	.word	0xe000ed08

080055f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055fe:	4b32      	ldr	r3, [pc, #200]	; (80056c8 <xPortStartScheduler+0xd0>)
 8005600:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005620:	b2da      	uxtb	r2, r3
 8005622:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <xPortStartScheduler+0xd4>)
 8005624:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005626:	4b2a      	ldr	r3, [pc, #168]	; (80056d0 <xPortStartScheduler+0xd8>)
 8005628:	2207      	movs	r2, #7
 800562a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800562c:	e009      	b.n	8005642 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800562e:	4b28      	ldr	r3, [pc, #160]	; (80056d0 <xPortStartScheduler+0xd8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3b01      	subs	r3, #1
 8005634:	4a26      	ldr	r2, [pc, #152]	; (80056d0 <xPortStartScheduler+0xd8>)
 8005636:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d0ef      	beq.n	800562e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800564e:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <xPortStartScheduler+0xd8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1c3 0307 	rsb	r3, r3, #7
 8005656:	2b04      	cmp	r3, #4
 8005658:	d00a      	beq.n	8005670 <xPortStartScheduler+0x78>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60bb      	str	r3, [r7, #8]
}
 800566c:	bf00      	nop
 800566e:	e7fe      	b.n	800566e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005670:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <xPortStartScheduler+0xd8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <xPortStartScheduler+0xd8>)
 8005678:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <xPortStartScheduler+0xd8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005682:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <xPortStartScheduler+0xd8>)
 8005684:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <xPortStartScheduler+0xdc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <xPortStartScheduler+0xdc>)
 8005694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005698:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800569a:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <xPortStartScheduler+0xdc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a0d      	ldr	r2, [pc, #52]	; (80056d4 <xPortStartScheduler+0xdc>)
 80056a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056a6:	f000 f8b9 	bl	800581c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <xPortStartScheduler+0xe0>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056b0:	f7ff ff92 	bl	80055d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056b4:	f7ff faa2 	bl	8004bfc <vTaskSwitchContext>
	prvTaskExitError();
 80056b8:	f7ff ff4e 	bl	8005558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	e000e400 	.word	0xe000e400
 80056cc:	200005e0 	.word	0x200005e0
 80056d0:	200005e4 	.word	0x200005e4
 80056d4:	e000ed20 	.word	0xe000ed20
 80056d8:	2000000c 	.word	0x2000000c

080056dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	607b      	str	r3, [r7, #4]
}
 80056f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056f6:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <vPortEnterCritical+0x58>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <vPortEnterCritical+0x58>)
 80056fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <vPortEnterCritical+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d10f      	bne.n	8005728 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <vPortEnterCritical+0x5c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <vPortEnterCritical+0x4c>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	603b      	str	r3, [r7, #0]
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <vPortEnterCritical+0x4a>
	}
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	2000000c 	.word	0x2000000c
 8005738:	e000ed04 	.word	0xe000ed04

0800573c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005742:	4b11      	ldr	r3, [pc, #68]	; (8005788 <vPortExitCritical+0x4c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <vPortExitCritical+0x24>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	607b      	str	r3, [r7, #4]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <vPortExitCritical+0x4c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3b01      	subs	r3, #1
 8005766:	4a08      	ldr	r2, [pc, #32]	; (8005788 <vPortExitCritical+0x4c>)
 8005768:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800576a:	4b07      	ldr	r3, [pc, #28]	; (8005788 <vPortExitCritical+0x4c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <vPortExitCritical+0x42>
 8005772:	2300      	movs	r3, #0
 8005774:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	f383 8811 	msr	BASEPRI, r3
}
 800577c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	2000000c 	.word	0x2000000c
 800578c:	00000000 	.word	0x00000000

08005790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005790:	f3ef 8009 	mrs	r0, PSP
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <pxCurrentTCBConst>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057a0:	6010      	str	r0, [r2, #0]
 80057a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80057a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057aa:	f380 8811 	msr	BASEPRI, r0
 80057ae:	f7ff fa25 	bl	8004bfc <vTaskSwitchContext>
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8811 	msr	BASEPRI, r0
 80057ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	6808      	ldr	r0, [r1, #0]
 80057c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057c6:	f380 8809 	msr	PSP, r0
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	4770      	bx	lr

080057d0 <pxCurrentTCBConst>:
 80057d0:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop

080057d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	607b      	str	r3, [r7, #4]
}
 80057f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057f2:	f7ff f945 	bl	8004a80 <xTaskIncrementTick>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <SysTick_Handler+0x40>)
 80057fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	2300      	movs	r3, #0
 8005806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f383 8811 	msr	BASEPRI, r3
}
 800580e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <vPortSetupTimerInterrupt+0x30>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005826:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <vPortSetupTimerInterrupt+0x34>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800582c:	4b09      	ldr	r3, [pc, #36]	; (8005854 <vPortSetupTimerInterrupt+0x38>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a09      	ldr	r2, [pc, #36]	; (8005858 <vPortSetupTimerInterrupt+0x3c>)
 8005832:	fba2 2303 	umull	r2, r3, r2, r3
 8005836:	099b      	lsrs	r3, r3, #6
 8005838:	4a08      	ldr	r2, [pc, #32]	; (800585c <vPortSetupTimerInterrupt+0x40>)
 800583a:	3b01      	subs	r3, #1
 800583c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800583e:	4b03      	ldr	r3, [pc, #12]	; (800584c <vPortSetupTimerInterrupt+0x30>)
 8005840:	2207      	movs	r2, #7
 8005842:	601a      	str	r2, [r3, #0]
}
 8005844:	bf00      	nop
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	e000e010 	.word	0xe000e010
 8005850:	e000e018 	.word	0xe000e018
 8005854:	20000000 	.word	0x20000000
 8005858:	10624dd3 	.word	0x10624dd3
 800585c:	e000e014 	.word	0xe000e014

08005860 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005866:	f3ef 8305 	mrs	r3, IPSR
 800586a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b0f      	cmp	r3, #15
 8005870:	d914      	bls.n	800589c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005872:	4a16      	ldr	r2, [pc, #88]	; (80058cc <vPortValidateInterruptPriority+0x6c>)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800587c:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <vPortValidateInterruptPriority+0x70>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	7afa      	ldrb	r2, [r7, #11]
 8005882:	429a      	cmp	r2, r3
 8005884:	d20a      	bcs.n	800589c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	607b      	str	r3, [r7, #4]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800589c:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <vPortValidateInterruptPriority+0x74>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <vPortValidateInterruptPriority+0x78>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d90a      	bls.n	80058c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	603b      	str	r3, [r7, #0]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <vPortValidateInterruptPriority+0x60>
	}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	e000e3f0 	.word	0xe000e3f0
 80058d0:	200005e0 	.word	0x200005e0
 80058d4:	e000ed0c 	.word	0xe000ed0c
 80058d8:	200005e4 	.word	0x200005e4

080058dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	; 0x28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058e8:	f7ff f820 	bl	800492c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058ec:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <pvPortMalloc+0x174>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058f4:	f000 f910 	bl	8005b18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058f8:	4b56      	ldr	r3, [pc, #344]	; (8005a54 <pvPortMalloc+0x178>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	f040 808e 	bne.w	8005a22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01d      	beq.n	8005948 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800590c:	2208      	movs	r2, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	2b00      	cmp	r3, #0
 800591c:	d014      	beq.n	8005948 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	3308      	adds	r3, #8
 8005926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <pvPortMalloc+0x6c>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	617b      	str	r3, [r7, #20]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d069      	beq.n	8005a22 <pvPortMalloc+0x146>
 800594e:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <pvPortMalloc+0x17c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d864      	bhi.n	8005a22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005958:	4b40      	ldr	r3, [pc, #256]	; (8005a5c <pvPortMalloc+0x180>)
 800595a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800595c:	4b3f      	ldr	r3, [pc, #252]	; (8005a5c <pvPortMalloc+0x180>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005962:	e004      	b.n	800596e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	d903      	bls.n	8005980 <pvPortMalloc+0xa4>
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f1      	bne.n	8005964 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005980:	4b33      	ldr	r3, [pc, #204]	; (8005a50 <pvPortMalloc+0x174>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005986:	429a      	cmp	r2, r3
 8005988:	d04b      	beq.n	8005a22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2208      	movs	r2, #8
 8005990:	4413      	add	r3, r2
 8005992:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	2308      	movs	r3, #8
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d91f      	bls.n	80059ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <pvPortMalloc+0xf8>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	613b      	str	r3, [r7, #16]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	1ad2      	subs	r2, r2, r3
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059e6:	69b8      	ldr	r0, [r7, #24]
 80059e8:	f000 f8f8 	bl	8005bdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <pvPortMalloc+0x17c>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <pvPortMalloc+0x17c>)
 80059f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059fa:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <pvPortMalloc+0x17c>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <pvPortMalloc+0x184>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d203      	bcs.n	8005a0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <pvPortMalloc+0x17c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <pvPortMalloc+0x184>)
 8005a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <pvPortMalloc+0x178>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a22:	f7fe ff91 	bl	8004948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <pvPortMalloc+0x16a>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	60fb      	str	r3, [r7, #12]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <pvPortMalloc+0x168>
	return pvReturn;
 8005a46:	69fb      	ldr	r3, [r7, #28]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3728      	adds	r7, #40	; 0x28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	200011f0 	.word	0x200011f0
 8005a54:	200011fc 	.word	0x200011fc
 8005a58:	200011f4 	.word	0x200011f4
 8005a5c:	200011e8 	.word	0x200011e8
 8005a60:	200011f8 	.word	0x200011f8

08005a64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d048      	beq.n	8005b08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a76:	2308      	movs	r3, #8
 8005a78:	425b      	negs	r3, r3
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <vPortFree+0xac>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <vPortFree+0x44>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60fb      	str	r3, [r7, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <vPortFree+0x62>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	60bb      	str	r3, [r7, #8]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <vPortFree+0xac>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d019      	beq.n	8005b08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d115      	bne.n	8005b08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <vPortFree+0xac>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	401a      	ands	r2, r3
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005aec:	f7fe ff1e 	bl	800492c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <vPortFree+0xb0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4413      	add	r3, r2
 8005afa:	4a06      	ldr	r2, [pc, #24]	; (8005b14 <vPortFree+0xb0>)
 8005afc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005afe:	6938      	ldr	r0, [r7, #16]
 8005b00:	f000 f86c 	bl	8005bdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b04:	f7fe ff20 	bl	8004948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b08:	bf00      	nop
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200011fc 	.word	0x200011fc
 8005b14:	200011f4 	.word	0x200011f4

08005b18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b24:	4b27      	ldr	r3, [pc, #156]	; (8005bc4 <prvHeapInit+0xac>)
 8005b26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3307      	adds	r3, #7
 8005b36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0307 	bic.w	r3, r3, #7
 8005b3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	4a1f      	ldr	r2, [pc, #124]	; (8005bc4 <prvHeapInit+0xac>)
 8005b48:	4413      	add	r3, r2
 8005b4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b50:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <prvHeapInit+0xb0>)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b56:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <prvHeapInit+0xb0>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	4413      	add	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b64:	2208      	movs	r2, #8
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0307 	bic.w	r3, r3, #7
 8005b72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <prvHeapInit+0xb4>)
 8005b78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <prvHeapInit+0xb4>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <prvHeapInit+0xb4>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	1ad2      	subs	r2, r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <prvHeapInit+0xb4>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <prvHeapInit+0xb8>)
 8005ba6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <prvHeapInit+0xbc>)
 8005bae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bb0:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <prvHeapInit+0xc0>)
 8005bb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bb6:	601a      	str	r2, [r3, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	200005e8 	.word	0x200005e8
 8005bc8:	200011e8 	.word	0x200011e8
 8005bcc:	200011f0 	.word	0x200011f0
 8005bd0:	200011f8 	.word	0x200011f8
 8005bd4:	200011f4 	.word	0x200011f4
 8005bd8:	200011fc 	.word	0x200011fc

08005bdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005be4:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <prvInsertBlockIntoFreeList+0xa8>)
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e002      	b.n	8005bf0 <prvInsertBlockIntoFreeList+0x14>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d8f7      	bhi.n	8005bea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	4413      	add	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d108      	bne.n	8005c1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	441a      	add	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	441a      	add	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d118      	bne.n	8005c64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <prvInsertBlockIntoFreeList+0xac>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d00d      	beq.n	8005c5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	441a      	add	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	e008      	b.n	8005c6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <prvInsertBlockIntoFreeList+0xac>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e003      	b.n	8005c6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d002      	beq.n	8005c7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr
 8005c84:	200011e8 	.word	0x200011e8
 8005c88:	200011f0 	.word	0x200011f0

08005c8c <atoi>:
 8005c8c:	220a      	movs	r2, #10
 8005c8e:	2100      	movs	r1, #0
 8005c90:	f000 b8d6 	b.w	8005e40 <strtol>

08005c94 <__errno>:
 8005c94:	4b01      	ldr	r3, [pc, #4]	; (8005c9c <__errno+0x8>)
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20000010 	.word	0x20000010

08005ca0 <__libc_init_array>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	4d0c      	ldr	r5, [pc, #48]	; (8005cd8 <__libc_init_array+0x38>)
 8005ca6:	4c0d      	ldr	r4, [pc, #52]	; (8005cdc <__libc_init_array+0x3c>)
 8005ca8:	1b64      	subs	r4, r4, r5
 8005caa:	10a4      	asrs	r4, r4, #2
 8005cac:	42a6      	cmp	r6, r4
 8005cae:	d109      	bne.n	8005cc4 <__libc_init_array+0x24>
 8005cb0:	f000 f912 	bl	8005ed8 <_init>
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	4d0a      	ldr	r5, [pc, #40]	; (8005ce0 <__libc_init_array+0x40>)
 8005cb8:	4c0a      	ldr	r4, [pc, #40]	; (8005ce4 <__libc_init_array+0x44>)
 8005cba:	1b64      	subs	r4, r4, r5
 8005cbc:	10a4      	asrs	r4, r4, #2
 8005cbe:	42a6      	cmp	r6, r4
 8005cc0:	d105      	bne.n	8005cce <__libc_init_array+0x2e>
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
 8005cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc8:	4798      	blx	r3
 8005cca:	3601      	adds	r6, #1
 8005ccc:	e7ee      	b.n	8005cac <__libc_init_array+0xc>
 8005cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd2:	4798      	blx	r3
 8005cd4:	3601      	adds	r6, #1
 8005cd6:	e7f2      	b.n	8005cbe <__libc_init_array+0x1e>
 8005cd8:	08006114 	.word	0x08006114
 8005cdc:	08006114 	.word	0x08006114
 8005ce0:	08006114 	.word	0x08006114
 8005ce4:	08006118 	.word	0x08006118

08005ce8 <__itoa>:
 8005ce8:	1e93      	subs	r3, r2, #2
 8005cea:	2b22      	cmp	r3, #34	; 0x22
 8005cec:	b510      	push	{r4, lr}
 8005cee:	460c      	mov	r4, r1
 8005cf0:	d904      	bls.n	8005cfc <__itoa+0x14>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	461c      	mov	r4, r3
 8005cf6:	700b      	strb	r3, [r1, #0]
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	bd10      	pop	{r4, pc}
 8005cfc:	2a0a      	cmp	r2, #10
 8005cfe:	d109      	bne.n	8005d14 <__itoa+0x2c>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	da07      	bge.n	8005d14 <__itoa+0x2c>
 8005d04:	232d      	movs	r3, #45	; 0x2d
 8005d06:	700b      	strb	r3, [r1, #0]
 8005d08:	2101      	movs	r1, #1
 8005d0a:	4240      	negs	r0, r0
 8005d0c:	4421      	add	r1, r4
 8005d0e:	f000 f8a1 	bl	8005e54 <__utoa>
 8005d12:	e7f1      	b.n	8005cf8 <__itoa+0x10>
 8005d14:	2100      	movs	r1, #0
 8005d16:	e7f9      	b.n	8005d0c <__itoa+0x24>

08005d18 <itoa>:
 8005d18:	f7ff bfe6 	b.w	8005ce8 <__itoa>

08005d1c <memcpy>:
 8005d1c:	440a      	add	r2, r1
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d24:	d100      	bne.n	8005d28 <memcpy+0xc>
 8005d26:	4770      	bx	lr
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2e:	4291      	cmp	r1, r2
 8005d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d34:	d1f9      	bne.n	8005d2a <memcpy+0xe>
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <memset>:
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4402      	add	r2, r0
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d100      	bne.n	8005d42 <memset+0xa>
 8005d40:	4770      	bx	lr
 8005d42:	f803 1b01 	strb.w	r1, [r3], #1
 8005d46:	e7f9      	b.n	8005d3c <memset+0x4>

08005d48 <_strtol_l.constprop.0>:
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4e:	4680      	mov	r8, r0
 8005d50:	d001      	beq.n	8005d56 <_strtol_l.constprop.0+0xe>
 8005d52:	2b24      	cmp	r3, #36	; 0x24
 8005d54:	d906      	bls.n	8005d64 <_strtol_l.constprop.0+0x1c>
 8005d56:	f7ff ff9d 	bl	8005c94 <__errno>
 8005d5a:	2316      	movs	r3, #22
 8005d5c:	6003      	str	r3, [r0, #0]
 8005d5e:	2000      	movs	r0, #0
 8005d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d64:	460d      	mov	r5, r1
 8005d66:	4f35      	ldr	r7, [pc, #212]	; (8005e3c <_strtol_l.constprop.0+0xf4>)
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d6e:	5de6      	ldrb	r6, [r4, r7]
 8005d70:	f016 0608 	ands.w	r6, r6, #8
 8005d74:	d1f8      	bne.n	8005d68 <_strtol_l.constprop.0+0x20>
 8005d76:	2c2d      	cmp	r4, #45	; 0x2d
 8005d78:	d12f      	bne.n	8005dda <_strtol_l.constprop.0+0x92>
 8005d7a:	2601      	movs	r6, #1
 8005d7c:	782c      	ldrb	r4, [r5, #0]
 8005d7e:	1c85      	adds	r5, r0, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d057      	beq.n	8005e34 <_strtol_l.constprop.0+0xec>
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d109      	bne.n	8005d9c <_strtol_l.constprop.0+0x54>
 8005d88:	2c30      	cmp	r4, #48	; 0x30
 8005d8a:	d107      	bne.n	8005d9c <_strtol_l.constprop.0+0x54>
 8005d8c:	7828      	ldrb	r0, [r5, #0]
 8005d8e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005d92:	2858      	cmp	r0, #88	; 0x58
 8005d94:	d149      	bne.n	8005e2a <_strtol_l.constprop.0+0xe2>
 8005d96:	2310      	movs	r3, #16
 8005d98:	786c      	ldrb	r4, [r5, #1]
 8005d9a:	3502      	adds	r5, #2
 8005d9c:	2700      	movs	r7, #0
 8005d9e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005da2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005da6:	fbbe f9f3 	udiv	r9, lr, r3
 8005daa:	4638      	mov	r0, r7
 8005dac:	fb03 ea19 	mls	sl, r3, r9, lr
 8005db0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005db4:	f1bc 0f09 	cmp.w	ip, #9
 8005db8:	d814      	bhi.n	8005de4 <_strtol_l.constprop.0+0x9c>
 8005dba:	4664      	mov	r4, ip
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	dd22      	ble.n	8005e06 <_strtol_l.constprop.0+0xbe>
 8005dc0:	2f00      	cmp	r7, #0
 8005dc2:	db1d      	blt.n	8005e00 <_strtol_l.constprop.0+0xb8>
 8005dc4:	4581      	cmp	r9, r0
 8005dc6:	d31b      	bcc.n	8005e00 <_strtol_l.constprop.0+0xb8>
 8005dc8:	d101      	bne.n	8005dce <_strtol_l.constprop.0+0x86>
 8005dca:	45a2      	cmp	sl, r4
 8005dcc:	db18      	blt.n	8005e00 <_strtol_l.constprop.0+0xb8>
 8005dce:	2701      	movs	r7, #1
 8005dd0:	fb00 4003 	mla	r0, r0, r3, r4
 8005dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dd8:	e7ea      	b.n	8005db0 <_strtol_l.constprop.0+0x68>
 8005dda:	2c2b      	cmp	r4, #43	; 0x2b
 8005ddc:	bf04      	itt	eq
 8005dde:	782c      	ldrbeq	r4, [r5, #0]
 8005de0:	1c85      	addeq	r5, r0, #2
 8005de2:	e7cd      	b.n	8005d80 <_strtol_l.constprop.0+0x38>
 8005de4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005de8:	f1bc 0f19 	cmp.w	ip, #25
 8005dec:	d801      	bhi.n	8005df2 <_strtol_l.constprop.0+0xaa>
 8005dee:	3c37      	subs	r4, #55	; 0x37
 8005df0:	e7e4      	b.n	8005dbc <_strtol_l.constprop.0+0x74>
 8005df2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005df6:	f1bc 0f19 	cmp.w	ip, #25
 8005dfa:	d804      	bhi.n	8005e06 <_strtol_l.constprop.0+0xbe>
 8005dfc:	3c57      	subs	r4, #87	; 0x57
 8005dfe:	e7dd      	b.n	8005dbc <_strtol_l.constprop.0+0x74>
 8005e00:	f04f 37ff 	mov.w	r7, #4294967295
 8005e04:	e7e6      	b.n	8005dd4 <_strtol_l.constprop.0+0x8c>
 8005e06:	2f00      	cmp	r7, #0
 8005e08:	da07      	bge.n	8005e1a <_strtol_l.constprop.0+0xd2>
 8005e0a:	2322      	movs	r3, #34	; 0x22
 8005e0c:	4670      	mov	r0, lr
 8005e0e:	f8c8 3000 	str.w	r3, [r8]
 8005e12:	2a00      	cmp	r2, #0
 8005e14:	d0a4      	beq.n	8005d60 <_strtol_l.constprop.0+0x18>
 8005e16:	1e69      	subs	r1, r5, #1
 8005e18:	e005      	b.n	8005e26 <_strtol_l.constprop.0+0xde>
 8005e1a:	b106      	cbz	r6, 8005e1e <_strtol_l.constprop.0+0xd6>
 8005e1c:	4240      	negs	r0, r0
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	d09e      	beq.n	8005d60 <_strtol_l.constprop.0+0x18>
 8005e22:	2f00      	cmp	r7, #0
 8005e24:	d1f7      	bne.n	8005e16 <_strtol_l.constprop.0+0xce>
 8005e26:	6011      	str	r1, [r2, #0]
 8005e28:	e79a      	b.n	8005d60 <_strtol_l.constprop.0+0x18>
 8005e2a:	2430      	movs	r4, #48	; 0x30
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1b5      	bne.n	8005d9c <_strtol_l.constprop.0+0x54>
 8005e30:	2308      	movs	r3, #8
 8005e32:	e7b3      	b.n	8005d9c <_strtol_l.constprop.0+0x54>
 8005e34:	2c30      	cmp	r4, #48	; 0x30
 8005e36:	d0a9      	beq.n	8005d8c <_strtol_l.constprop.0+0x44>
 8005e38:	230a      	movs	r3, #10
 8005e3a:	e7af      	b.n	8005d9c <_strtol_l.constprop.0+0x54>
 8005e3c:	08006012 	.word	0x08006012

08005e40 <strtol>:
 8005e40:	4613      	mov	r3, r2
 8005e42:	460a      	mov	r2, r1
 8005e44:	4601      	mov	r1, r0
 8005e46:	4802      	ldr	r0, [pc, #8]	; (8005e50 <strtol+0x10>)
 8005e48:	6800      	ldr	r0, [r0, #0]
 8005e4a:	f7ff bf7d 	b.w	8005d48 <_strtol_l.constprop.0>
 8005e4e:	bf00      	nop
 8005e50:	20000010 	.word	0x20000010

08005e54 <__utoa>:
 8005e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e56:	b08b      	sub	sp, #44	; 0x2c
 8005e58:	4605      	mov	r5, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	466e      	mov	r6, sp
 8005e5e:	4c1d      	ldr	r4, [pc, #116]	; (8005ed4 <__utoa+0x80>)
 8005e60:	f104 0c20 	add.w	ip, r4, #32
 8005e64:	4637      	mov	r7, r6
 8005e66:	6820      	ldr	r0, [r4, #0]
 8005e68:	6861      	ldr	r1, [r4, #4]
 8005e6a:	3408      	adds	r4, #8
 8005e6c:	c703      	stmia	r7!, {r0, r1}
 8005e6e:	4564      	cmp	r4, ip
 8005e70:	463e      	mov	r6, r7
 8005e72:	d1f7      	bne.n	8005e64 <__utoa+0x10>
 8005e74:	7921      	ldrb	r1, [r4, #4]
 8005e76:	6820      	ldr	r0, [r4, #0]
 8005e78:	7139      	strb	r1, [r7, #4]
 8005e7a:	1e91      	subs	r1, r2, #2
 8005e7c:	2922      	cmp	r1, #34	; 0x22
 8005e7e:	6038      	str	r0, [r7, #0]
 8005e80:	f04f 0100 	mov.w	r1, #0
 8005e84:	d904      	bls.n	8005e90 <__utoa+0x3c>
 8005e86:	7019      	strb	r1, [r3, #0]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	b00b      	add	sp, #44	; 0x2c
 8005e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e90:	1e58      	subs	r0, r3, #1
 8005e92:	4684      	mov	ip, r0
 8005e94:	fbb5 f7f2 	udiv	r7, r5, r2
 8005e98:	fb02 5617 	mls	r6, r2, r7, r5
 8005e9c:	3628      	adds	r6, #40	; 0x28
 8005e9e:	446e      	add	r6, sp
 8005ea0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005eaa:	462e      	mov	r6, r5
 8005eac:	42b2      	cmp	r2, r6
 8005eae:	463d      	mov	r5, r7
 8005eb0:	f101 0101 	add.w	r1, r1, #1
 8005eb4:	d9ee      	bls.n	8005e94 <__utoa+0x40>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	545a      	strb	r2, [r3, r1]
 8005eba:	1919      	adds	r1, r3, r4
 8005ebc:	1aa5      	subs	r5, r4, r2
 8005ebe:	42aa      	cmp	r2, r5
 8005ec0:	dae3      	bge.n	8005e8a <__utoa+0x36>
 8005ec2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005ec6:	780e      	ldrb	r6, [r1, #0]
 8005ec8:	3201      	adds	r2, #1
 8005eca:	7006      	strb	r6, [r0, #0]
 8005ecc:	f801 5901 	strb.w	r5, [r1], #-1
 8005ed0:	e7f4      	b.n	8005ebc <__utoa+0x68>
 8005ed2:	bf00      	nop
 8005ed4:	08005fec 	.word	0x08005fec

08005ed8 <_init>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr

08005ee4 <_fini>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	bf00      	nop
 8005ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eea:	bc08      	pop	{r3}
 8005eec:	469e      	mov	lr, r3
 8005eee:	4770      	bx	lr
