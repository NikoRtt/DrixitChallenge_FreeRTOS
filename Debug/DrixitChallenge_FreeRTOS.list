
DrixitChallenge_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008760  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a94  08008a94  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008a94  08008a94  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a94  08008a94  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c8  20000074  08008b10  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08008b10  0002123c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f58  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003817  00000000  00000000  00037ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0003b810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  0003cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aedd  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f85  00000000  00000000  0005949d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098b7b  00000000  00000000  00073422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bf9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006570  00000000  00000000  0010bff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08008858 	.word	0x08008858

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08008858 	.word	0x08008858

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_d2f>:
 8000630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000638:	bf24      	itt	cs
 800063a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800063e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000642:	d90d      	bls.n	8000660 <__aeabi_d2f+0x30>
 8000644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800064c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000658:	bf08      	it	eq
 800065a:	f020 0001 	biceq.w	r0, r0, #1
 800065e:	4770      	bx	lr
 8000660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000664:	d121      	bne.n	80006aa <__aeabi_d2f+0x7a>
 8000666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800066a:	bfbc      	itt	lt
 800066c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000670:	4770      	bxlt	lr
 8000672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000676:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800067a:	f1c2 0218 	rsb	r2, r2, #24
 800067e:	f1c2 0c20 	rsb	ip, r2, #32
 8000682:	fa10 f30c 	lsls.w	r3, r0, ip
 8000686:	fa20 f002 	lsr.w	r0, r0, r2
 800068a:	bf18      	it	ne
 800068c:	f040 0001 	orrne.w	r0, r0, #1
 8000690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000698:	fa03 fc0c 	lsl.w	ip, r3, ip
 800069c:	ea40 000c 	orr.w	r0, r0, ip
 80006a0:	fa23 f302 	lsr.w	r3, r3, r2
 80006a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a8:	e7cc      	b.n	8000644 <__aeabi_d2f+0x14>
 80006aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006ae:	d107      	bne.n	80006c0 <__aeabi_d2f+0x90>
 80006b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006b4:	bf1e      	ittt	ne
 80006b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006be:	4770      	bxne	lr
 80006c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <__aeabi_frsub>:
 80006d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006d4:	e002      	b.n	80006dc <__addsf3>
 80006d6:	bf00      	nop

080006d8 <__aeabi_fsub>:
 80006d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006dc <__addsf3>:
 80006dc:	0042      	lsls	r2, r0, #1
 80006de:	bf1f      	itttt	ne
 80006e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006e4:	ea92 0f03 	teqne	r2, r3
 80006e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f0:	d06a      	beq.n	80007c8 <__addsf3+0xec>
 80006f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006fa:	bfc1      	itttt	gt
 80006fc:	18d2      	addgt	r2, r2, r3
 80006fe:	4041      	eorgt	r1, r0
 8000700:	4048      	eorgt	r0, r1
 8000702:	4041      	eorgt	r1, r0
 8000704:	bfb8      	it	lt
 8000706:	425b      	neglt	r3, r3
 8000708:	2b19      	cmp	r3, #25
 800070a:	bf88      	it	hi
 800070c:	4770      	bxhi	lr
 800070e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000712:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000716:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800071a:	bf18      	it	ne
 800071c:	4240      	negne	r0, r0
 800071e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000722:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000726:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800072a:	bf18      	it	ne
 800072c:	4249      	negne	r1, r1
 800072e:	ea92 0f03 	teq	r2, r3
 8000732:	d03f      	beq.n	80007b4 <__addsf3+0xd8>
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	fa41 fc03 	asr.w	ip, r1, r3
 800073c:	eb10 000c 	adds.w	r0, r0, ip
 8000740:	f1c3 0320 	rsb	r3, r3, #32
 8000744:	fa01 f103 	lsl.w	r1, r1, r3
 8000748:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800074c:	d502      	bpl.n	8000754 <__addsf3+0x78>
 800074e:	4249      	negs	r1, r1
 8000750:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000754:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000758:	d313      	bcc.n	8000782 <__addsf3+0xa6>
 800075a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075e:	d306      	bcc.n	800076e <__addsf3+0x92>
 8000760:	0840      	lsrs	r0, r0, #1
 8000762:	ea4f 0131 	mov.w	r1, r1, rrx
 8000766:	f102 0201 	add.w	r2, r2, #1
 800076a:	2afe      	cmp	r2, #254	; 0xfe
 800076c:	d251      	bcs.n	8000812 <__addsf3+0x136>
 800076e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000772:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000776:	bf08      	it	eq
 8000778:	f020 0001 	biceq.w	r0, r0, #1
 800077c:	ea40 0003 	orr.w	r0, r0, r3
 8000780:	4770      	bx	lr
 8000782:	0049      	lsls	r1, r1, #1
 8000784:	eb40 0000 	adc.w	r0, r0, r0
 8000788:	3a01      	subs	r2, #1
 800078a:	bf28      	it	cs
 800078c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000790:	d2ed      	bcs.n	800076e <__addsf3+0x92>
 8000792:	fab0 fc80 	clz	ip, r0
 8000796:	f1ac 0c08 	sub.w	ip, ip, #8
 800079a:	ebb2 020c 	subs.w	r2, r2, ip
 800079e:	fa00 f00c 	lsl.w	r0, r0, ip
 80007a2:	bfaa      	itet	ge
 80007a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007a8:	4252      	neglt	r2, r2
 80007aa:	4318      	orrge	r0, r3
 80007ac:	bfbc      	itt	lt
 80007ae:	40d0      	lsrlt	r0, r2
 80007b0:	4318      	orrlt	r0, r3
 80007b2:	4770      	bx	lr
 80007b4:	f092 0f00 	teq	r2, #0
 80007b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007bc:	bf06      	itte	eq
 80007be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007c2:	3201      	addeq	r2, #1
 80007c4:	3b01      	subne	r3, #1
 80007c6:	e7b5      	b.n	8000734 <__addsf3+0x58>
 80007c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007d0:	bf18      	it	ne
 80007d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007d6:	d021      	beq.n	800081c <__addsf3+0x140>
 80007d8:	ea92 0f03 	teq	r2, r3
 80007dc:	d004      	beq.n	80007e8 <__addsf3+0x10c>
 80007de:	f092 0f00 	teq	r2, #0
 80007e2:	bf08      	it	eq
 80007e4:	4608      	moveq	r0, r1
 80007e6:	4770      	bx	lr
 80007e8:	ea90 0f01 	teq	r0, r1
 80007ec:	bf1c      	itt	ne
 80007ee:	2000      	movne	r0, #0
 80007f0:	4770      	bxne	lr
 80007f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007f6:	d104      	bne.n	8000802 <__addsf3+0x126>
 80007f8:	0040      	lsls	r0, r0, #1
 80007fa:	bf28      	it	cs
 80007fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000800:	4770      	bx	lr
 8000802:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000806:	bf3c      	itt	cc
 8000808:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800080c:	4770      	bxcc	lr
 800080e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000812:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000816:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081a:	4770      	bx	lr
 800081c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000820:	bf16      	itet	ne
 8000822:	4608      	movne	r0, r1
 8000824:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000828:	4601      	movne	r1, r0
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	bf06      	itte	eq
 800082e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000832:	ea90 0f01 	teqeq	r0, r1
 8000836:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800083a:	4770      	bx	lr

0800083c <__aeabi_ui2f>:
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	e004      	b.n	800084c <__aeabi_i2f+0x8>
 8000842:	bf00      	nop

08000844 <__aeabi_i2f>:
 8000844:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000848:	bf48      	it	mi
 800084a:	4240      	negmi	r0, r0
 800084c:	ea5f 0c00 	movs.w	ip, r0
 8000850:	bf08      	it	eq
 8000852:	4770      	bxeq	lr
 8000854:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000858:	4601      	mov	r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	e01c      	b.n	800089a <__aeabi_l2f+0x2a>

08000860 <__aeabi_ul2f>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e00a      	b.n	8000884 <__aeabi_l2f+0x14>
 800086e:	bf00      	nop

08000870 <__aeabi_l2f>:
 8000870:	ea50 0201 	orrs.w	r2, r0, r1
 8000874:	bf08      	it	eq
 8000876:	4770      	bxeq	lr
 8000878:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800087c:	d502      	bpl.n	8000884 <__aeabi_l2f+0x14>
 800087e:	4240      	negs	r0, r0
 8000880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000884:	ea5f 0c01 	movs.w	ip, r1
 8000888:	bf02      	ittt	eq
 800088a:	4684      	moveq	ip, r0
 800088c:	4601      	moveq	r1, r0
 800088e:	2000      	moveq	r0, #0
 8000890:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000894:	bf08      	it	eq
 8000896:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800089a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800089e:	fabc f28c 	clz	r2, ip
 80008a2:	3a08      	subs	r2, #8
 80008a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008a8:	db10      	blt.n	80008cc <__aeabi_l2f+0x5c>
 80008aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80008ae:	4463      	add	r3, ip
 80008b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80008b4:	f1c2 0220 	rsb	r2, r2, #32
 80008b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008bc:	fa20 f202 	lsr.w	r2, r0, r2
 80008c0:	eb43 0002 	adc.w	r0, r3, r2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f102 0220 	add.w	r2, r2, #32
 80008d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80008d4:	f1c2 0220 	rsb	r2, r2, #32
 80008d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008dc:	fa21 f202 	lsr.w	r2, r1, r2
 80008e0:	eb43 0002 	adc.w	r0, r3, r2
 80008e4:	bf08      	it	eq
 80008e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008ea:	4770      	bx	lr

080008ec <lis3mdl_Init>:

/*==================[internal functions definition]==========================*/

/*==================[Initialization functions definition]====================*/

uint8_t lis3mdl_Init ( LIS3MDL_Data_t* dev, I2C_HandleTypeDef *i2cHandle ){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]

	// Set the struct parameters first

	dev->i2cHandle = i2cHandle;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	601a      	str	r2, [r3, #0]
	dev->mag_x = 0.0f;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
	dev->mag_y = 0.0f;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f04f 0200 	mov.w	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
	dev->mag_z = 0.0f;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
	dev->temp = 0.0f;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	615a      	str	r2, [r3, #20]

	// Variable to accumulate errors to determine how many transaction errors we have.

	uint8_t accumulatedErrors = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
	uint8_t regValue;
	HAL_StatusTypeDef status;

	// Checking the device ID

	status = lis3mdl_ReadRegister(dev, LIS3MDL_REG_WHO_AM_I, &regValue);
 8000920:	f107 030d 	add.w	r3, r7, #13
 8000924:	461a      	mov	r2, r3
 8000926:	210f      	movs	r1, #15
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 f94e 	bl	8000bca <lis3mdl_ReadRegister>
 800092e:	4603      	mov	r3, r0
 8000930:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000932:	7bbb      	ldrb	r3, [r7, #14]
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	461a      	mov	r2, r3
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	4413      	add	r3, r2
 8000944:	73fb      	strb	r3, [r7, #15]

    if (regValue != LIS3MDL_DEVICE_ID) {
 8000946:	7b7b      	ldrb	r3, [r7, #13]
 8000948:	2b3d      	cmp	r3, #61	; 0x3d
 800094a:	d001      	beq.n	8000950 <lis3mdl_Init+0x64>

    	return FAIL;
 800094c:	23ff      	movs	r3, #255	; 0xff
 800094e:	e057      	b.n	8000a00 <lis3mdl_Init+0x114>
		3. Write 0Ch in CTRL_REG4. Sets UHP mode on the Z-axis.
		4. Write 00h in CTRL_REG3. Sets continuous-measurement mode. */

    // FS = +/-12G

    regValue = dev->scale << 5;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7e1b      	ldrb	r3, [r3, #24]
 8000954:	015b      	lsls	r3, r3, #5
 8000956:	b2db      	uxtb	r3, r3
 8000958:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_2, &regValue);
 800095a:	f107 030d 	add.w	r3, r7, #13
 800095e:	461a      	mov	r2, r3
 8000960:	2121      	movs	r1, #33	; 0x21
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f94c 	bl	8000c00 <lis3mdl_WriteRegister>
 8000968:	4603      	mov	r3, r0
 800096a:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf14      	ite	ne
 8000972:	2301      	movne	r3, #1
 8000974:	2300      	moveq	r3, #0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	461a      	mov	r2, r3
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	4413      	add	r3, r2
 800097e:	73fb      	strb	r3, [r7, #15]

    // Ultra-High performance in X and Y axes, ODR at 80Hz and temperature enable.

    regValue = LIS3MDL_REG_CTL_1_TEMP_EN | (LIS3MDL_PERFORMANCE_ULTRA_HIGH << 5) | (LIS3MDL_DATA_RATE_80_HZ << 2);
 8000980:	23fc      	movs	r3, #252	; 0xfc
 8000982:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_1, &regValue);
 8000984:	f107 030d 	add.w	r3, r7, #13
 8000988:	461a      	mov	r2, r3
 800098a:	2120      	movs	r1, #32
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f937 	bl	8000c00 <lis3mdl_WriteRegister>
 8000992:	4603      	mov	r3, r0
 8000994:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4413      	add	r3, r2
 80009a8:	73fb      	strb	r3, [r7, #15]

    // Ultra-High performance in Z axe.

    regValue = 0x00 | (LIS3MDL_PERFORMANCE_ULTRA_HIGH << 2);
 80009aa:	230c      	movs	r3, #12
 80009ac:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_4, &regValue);
 80009ae:	f107 030d 	add.w	r3, r7, #13
 80009b2:	461a      	mov	r2, r3
 80009b4:	2123      	movs	r1, #35	; 0x23
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f922 	bl	8000c00 <lis3mdl_WriteRegister>
 80009bc:	4603      	mov	r3, r0
 80009be:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 80009c0:	7bbb      	ldrb	r3, [r7, #14]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf14      	ite	ne
 80009c6:	2301      	movne	r3, #1
 80009c8:	2300      	moveq	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	4413      	add	r3, r2
 80009d2:	73fb      	strb	r3, [r7, #15]

    // Sets continuous-measurement mode.

    regValue = 0x00 | LIS3MDL_MODE_CONTINUOUS_MEASUREMENT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	737b      	strb	r3, [r7, #13]

	status = lis3mdl_WriteRegister(dev, LIS3MDL_REG_CTRL_3, &regValue);
 80009d8:	f107 030d 	add.w	r3, r7, #13
 80009dc:	461a      	mov	r2, r3
 80009de:	2122      	movs	r1, #34	; 0x22
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f90d 	bl	8000c00 <lis3mdl_WriteRegister>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73bb      	strb	r3, [r7, #14]

	accumulatedErrors += (status != HAL_OK);
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	4413      	add	r3, r2
 80009fc:	73fb      	strb	r3, [r7, #15]

    return accumulatedErrors;
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <lis3mdl_DataReady>:

/*==================[Measurement functions definition]=======================*/

HAL_StatusTypeDef lis3mdl_DataReady ( LIS3MDL_Data_t* dev ){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	uint8_t regValue;
	HAL_StatusTypeDef status;

	// First we have to know if there is any data ready to read

	status = lis3mdl_ReadRegister(dev, LIS3MDL_REG_STATUS, &regValue);
 8000a10:	f107 030e 	add.w	r3, r7, #14
 8000a14:	461a      	mov	r2, r3
 8000a16:	2127      	movs	r1, #39	; 0x27
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f8d6 	bl	8000bca <lis3mdl_ReadRegister>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	73fb      	strb	r3, [r7, #15]

	if(status == HAL_OK){
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d101      	bne.n	8000a2c <lis3mdl_DataReady+0x24>

		if(!(((regValue & LIS3MDL_STATUS_ZYXDA) >> 3) && ((status & LIS3MDL_STATUS_ZYXOR) >> 7))){

			status = HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <lis3mdl_ReadMagnetometer>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_ReadMagnetometer ( LIS3MDL_Data_t* dev ){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	uint8_t regValue[6];
	HAL_StatusTypeDef status;

	// Reading the axes registers

	status = lis3mdl_ReadRegisters(dev, LIS3MDL_REG_OUT_TEMP_L, regValue, 6);
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	2306      	movs	r3, #6
 8000a46:	212e      	movs	r1, #46	; 0x2e
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f8f4 	bl	8000c36 <lis3mdl_ReadRegisters>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	74fb      	strb	r3, [r7, #19]

	if(status == HAL_OK){
 8000a52:	7cfb      	ldrb	r3, [r7, #19]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d154      	bne.n	8000b02 <lis3mdl_ReadMagnetometer+0xca>

		float sensitivity;

		switch(dev->scale){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7e1b      	ldrb	r3, [r3, #24]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d817      	bhi.n	8000a90 <lis3mdl_ReadMagnetometer+0x58>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <lis3mdl_ReadMagnetometer+0x30>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000a7f 	.word	0x08000a7f
 8000a70:	08000a85 	.word	0x08000a85
 8000a74:	08000a8b 	.word	0x08000a8b

			case LIS3MDL_SCALE_4_GAUSS:

				sensitivity = 1.0/6842;
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <lis3mdl_ReadMagnetometer+0xd4>)
 8000a7a:	617b      	str	r3, [r7, #20]

				break;
 8000a7c:	e008      	b.n	8000a90 <lis3mdl_ReadMagnetometer+0x58>

			case LIS3MDL_SCALE_8_GAUSS:

				sensitivity = 1.0/3421;
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <lis3mdl_ReadMagnetometer+0xd8>)
 8000a80:	617b      	str	r3, [r7, #20]

				break;
 8000a82:	e005      	b.n	8000a90 <lis3mdl_ReadMagnetometer+0x58>

			case LIS3MDL_SCALE_12_GAUSS:

				sensitivity = 1.0/2281;
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <lis3mdl_ReadMagnetometer+0xdc>)
 8000a86:	617b      	str	r3, [r7, #20]

				break;
 8000a88:	e002      	b.n	8000a90 <lis3mdl_ReadMagnetometer+0x58>

			case LIS3MDL_SCALE_16_GAUSS:

				sensitivity = 1.0/1711;
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <lis3mdl_ReadMagnetometer+0xe0>)
 8000a8c:	617b      	str	r3, [r7, #20]

				break;
 8000a8e:	bf00      	nop
		}

		dev->mag_x = ((int16_t)((regValue[1] << 8) | regValue[0])) * sensitivity;
 8000a90:	7b7b      	ldrb	r3, [r7, #13]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	7b3b      	ldrb	r3, [r7, #12]
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fed0 	bl	8000844 <__aeabi_i2f>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	6979      	ldr	r1, [r7, #20]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fb51 	bl	8000150 <__aeabi_fmul>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	609a      	str	r2, [r3, #8]

		dev->mag_y = ((int16_t)((regValue[3] << 8) | regValue[2])) * sensitivity;
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff febd 	bl	8000844 <__aeabi_i2f>
 8000aca:	4603      	mov	r3, r0
 8000acc:	6979      	ldr	r1, [r7, #20]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fb3e 	bl	8000150 <__aeabi_fmul>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60da      	str	r2, [r3, #12]

		dev->mag_z = ((int16_t)((regValue[5] << 8) | regValue[4])) * sensitivity;
 8000adc:	7c7b      	ldrb	r3, [r7, #17]
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	b21a      	sxth	r2, r3
 8000ae2:	7c3b      	ldrb	r3, [r7, #16]
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff feaa 	bl	8000844 <__aeabi_i2f>
 8000af0:	4603      	mov	r3, r0
 8000af2:	6979      	ldr	r1, [r7, #20]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fb2b 	bl	8000150 <__aeabi_fmul>
 8000afa:	4603      	mov	r3, r0
 8000afc:	461a      	mov	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	611a      	str	r2, [r3, #16]
	}

	return status;
 8000b02:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	3919417a 	.word	0x3919417a
 8000b10:	3999417a 	.word	0x3999417a
 8000b14:	39e5d99e 	.word	0x39e5d99e
 8000b18:	3a193603 	.word	0x3a193603

08000b1c <lis3mdl_ReadTemperature>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_ReadTemperature ( LIS3MDL_Data_t* dev ){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	uint8_t regValue[2];
	HAL_StatusTypeDef status;

	// Reading the temperature registers

	status = lis3mdl_ReadRegisters(dev, LIS3MDL_REG_OUT_TEMP_L, regValue, 2);
 8000b24:	f107 020c 	add.w	r2, r7, #12
 8000b28:	2302      	movs	r3, #2
 8000b2a:	212e      	movs	r1, #46	; 0x2e
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 f882 	bl	8000c36 <lis3mdl_ReadRegisters>
 8000b32:	4603      	mov	r3, r0
 8000b34:	73fb      	strb	r3, [r7, #15]

	if(status == HAL_OK){
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d119      	bne.n	8000b70 <lis3mdl_ReadTemperature+0x54>

		// From the datasheet, the nominal sensitivity is 8 LSB/°C (>>3) and 0 output means T=25 °C

		dev->temp = (((int16_t)((regValue[1] << 8) | regValue[0])) >> 3) + 25.0;
 8000b3c:	7b7b      	ldrb	r3, [r7, #13]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	7b3b      	ldrb	r3, [r7, #12]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	10db      	asrs	r3, r3, #3
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fd04 	bl	800055c <__aeabi_i2d>
 8000b54:	f04f 0200 	mov.w	r2, #0
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <lis3mdl_ReadTemperature+0x60>)
 8000b5a:	f7ff fbb3 	bl	80002c4 <__adddf3>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	460b      	mov	r3, r1
 8000b62:	4610      	mov	r0, r2
 8000b64:	4619      	mov	r1, r3
 8000b66:	f7ff fd63 	bl	8000630 <__aeabi_d2f>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	615a      	str	r2, [r3, #20]

	}

	return status;
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40390000 	.word	0x40390000

08000b80 <lis3mdl_ConvertToStoreData>:


/*************************************************************/

LIS3MDL_StoreData_t lis3mdl_ConvertToStoreData ( LIS3MDL_Data_t* dev ){
 8000b80:	b4b0      	push	{r4, r5, r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]

	LIS3MDL_StoreData_t newData;

	newData.mag_x = dev->mag_x;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	60fb      	str	r3, [r7, #12]

	newData.mag_y = dev->mag_y;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	613b      	str	r3, [r7, #16]

	newData.mag_z = dev->mag_z;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	617b      	str	r3, [r7, #20]

	newData.temp = dev->temp;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	61bb      	str	r3, [r7, #24]

	newData.uid = dev->uid;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	889b      	ldrh	r3, [r3, #4]
 8000ba6:	813b      	strh	r3, [r7, #8]

	newData.readData = FALSE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	773b      	strb	r3, [r7, #28]

	return newData;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	461d      	mov	r5, r3
 8000bb0:	f107 0408 	add.w	r4, r7, #8
 8000bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bbc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	3724      	adds	r7, #36	; 0x24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bcb0      	pop	{r4, r5, r7}
 8000bc8:	4770      	bx	lr

08000bca <lis3mdl_ReadRegister>:

/*==================[low level functions definition]=========================*/

HAL_StatusTypeDef lis3mdl_ReadRegister( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value ){
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b088      	sub	sp, #32
 8000bce:	af04      	add	r7, sp, #16
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, 1, HAL_MAX_DELAY);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	7afb      	ldrb	r3, [r7, #11]
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	2301      	movs	r3, #1
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	213c      	movs	r1, #60	; 0x3c
 8000bf2:	f002 f8af 	bl	8002d54 <HAL_I2C_Mem_Read>
 8000bf6:	4603      	mov	r3, r0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <lis3mdl_WriteRegister>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_WriteRegister( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value ){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af04      	add	r7, sp, #16
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, 1, HAL_MAX_DELAY);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6818      	ldr	r0, [r3, #0]
 8000c12:	7afb      	ldrb	r3, [r7, #11]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	213c      	movs	r1, #60	; 0x3c
 8000c28:	f001 ff9a 	bl	8002b60 <HAL_I2C_Mem_Write>
 8000c2c:	4603      	mov	r3, r0

}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <lis3mdl_ReadRegisters>:

/*************************************************************/

HAL_StatusTypeDef lis3mdl_ReadRegisters( LIS3MDL_Data_t* dev, uint8_t reg, uint8_t* value, uint8_t lenght ){
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b088      	sub	sp, #32
 8000c3a:	af04      	add	r7, sp, #16
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	461a      	mov	r2, r3
 8000c42:	460b      	mov	r3, r1
 8000c44:	72fb      	strb	r3, [r7, #11]
 8000c46:	4613      	mov	r3, r2
 8000c48:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read(dev->i2cHandle, LIS3MDL_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, value, lenght, HAL_MAX_DELAY);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6818      	ldr	r0, [r3, #0]
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	7abb      	ldrb	r3, [r7, #10]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5a:	9102      	str	r1, [sp, #8]
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	213c      	movs	r1, #60	; 0x3c
 8000c66:	f002 f875 	bl	8002d54 <HAL_I2C_Mem_Read>
 8000c6a:	4603      	mov	r3, r0

}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <StoreUSARTData>:

/*************************************************************/
//-Store in a buffer all the receive data (circular buffer)
/*************************************************************/

bool_t StoreUSARTData(uint8_t* data, uint16_t size){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]

	bool_t retVal = FALSE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]

	uint8_t auxSize = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]

	if((Escritura_BufferUsart1 + size) >= UART_MAX_RECEIVE_DATA){
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <StoreUSARTData+0xc4>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	887b      	ldrh	r3, [r7, #2]
 8000c90:	4413      	add	r3, r2
 8000c92:	2b18      	cmp	r3, #24
 8000c94:	dd29      	ble.n	8000cea <StoreUSARTData+0x76>

		auxSize = (Escritura_BufferUsart1 + size) - UART_MAX_RECEIVE_DATA;
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <StoreUSARTData+0xc4>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	3b19      	subs	r3, #25
 8000ca4:	73bb      	strb	r3, [r7, #14]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, (size - auxSize));
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <StoreUSARTData+0xc4>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <StoreUSARTData+0xc8>)
 8000cae:	18d0      	adds	r0, r2, r3
 8000cb0:	887a      	ldrh	r2, [r7, #2]
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	f007 fcef 	bl	800869c <memcpy>

		Escritura_BufferUsart1 = 0;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <StoreUSARTData+0xc4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]

		memcpy((BufferUsart1 + Escritura_BufferUsart1), (data + (size - auxSize)), auxSize);
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <StoreUSARTData+0xc4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <StoreUSARTData+0xc8>)
 8000ccc:	18d0      	adds	r0, r2, r3
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	7bba      	ldrb	r2, [r7, #14]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f007 fcdd 	bl	800869c <memcpy>

		Escritura_BufferUsart1 = auxSize;
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <StoreUSARTData+0xc4>)
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	7013      	strb	r3, [r2, #0]
 8000ce8:	e011      	b.n	8000d0e <StoreUSARTData+0x9a>
	}

	else {

		memcpy((BufferUsart1 + Escritura_BufferUsart1), data, size);
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <StoreUSARTData+0xc4>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <StoreUSARTData+0xc8>)
 8000cf2:	4413      	add	r3, r2
 8000cf4:	887a      	ldrh	r2, [r7, #2]
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f007 fccf 	bl	800869c <memcpy>

		Escritura_BufferUsart1 = Escritura_BufferUsart1 + size;
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <StoreUSARTData+0xc4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <StoreUSARTData+0xc4>)
 8000d0c:	701a      	strb	r2, [r3, #0]
	}

	if(BufferUsart1[Escritura_BufferUsart1 - 1] == '\r' || BufferUsart1[Escritura_BufferUsart1 - 1] == '\n'){
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <StoreUSARTData+0xc4>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <StoreUSARTData+0xc8>)
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	2b0d      	cmp	r3, #13
 8000d1a:	d006      	beq.n	8000d2a <StoreUSARTData+0xb6>
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <StoreUSARTData+0xc4>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <StoreUSARTData+0xc8>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	2b0a      	cmp	r3, #10
 8000d28:	d101      	bne.n	8000d2e <StoreUSARTData+0xba>

		retVal = TRUE;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]
	}

	return retVal;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000a9 	.word	0x200000a9
 8000d3c:	20000090 	.word	0x20000090

08000d40 <DecodeReceivedData>:

/*************************************************************/
//-Decode the data received from uart
/*************************************************************/

bool_t DecodeReceivedData( uint16_t* NumberReceived ){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

	bool_t retVal = FALSE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t j = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	char DatosRecibidos[UART_MAX_RECEIVE_DATA];

	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 8000d54:	e03f      	b.n	8000dd6 <DecodeReceivedData+0x96>

		// I remove the characters that are not information
		// If it is any of these characters, nothing is done.
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <DecodeReceivedData+0xe0>)
 8000d5e:	5c9b      	ldrb	r3, [r3, r2]
 8000d60:	2b0d      	cmp	r3, #13
 8000d62:	d02b      	beq.n	8000dbc <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <DecodeReceivedData+0xe0>)
 8000d6c:	5c9b      	ldrb	r3, [r3, r2]
		if( BufferUsart1[Lectura_BufferUsart1] == '\r' ||
 8000d6e:	2b0a      	cmp	r3, #10
 8000d70:	d024      	beq.n	8000dbc <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <DecodeReceivedData+0xe0>)
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\n' ||
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d01d      	beq.n	8000dbc <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <DecodeReceivedData+0xe0>)
 8000d88:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == '\0' ||
 8000d8a:	2b20      	cmp	r3, #32
 8000d8c:	d016      	beq.n	8000dbc <DecodeReceivedData+0x7c>
			BufferUsart1[Lectura_BufferUsart1] == 0xff){}
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <DecodeReceivedData+0xe0>)
 8000d96:	5c9b      	ldrb	r3, [r3, r2]
			BufferUsart1[Lectura_BufferUsart1] == ' '  ||
 8000d98:	2bff      	cmp	r3, #255	; 0xff
 8000d9a:	d00f      	beq.n	8000dbc <DecodeReceivedData+0x7c>

		else {

			*(DatosRecibidos + j) = BufferUsart1[Lectura_BufferUsart1];
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000da6:	f107 020c 	add.w	r2, r7, #12
 8000daa:	4413      	add	r3, r2
 8000dac:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <DecodeReceivedData+0xe0>)
 8000dae:	5c52      	ldrb	r2, [r2, r1]
 8000db0:	701a      	strb	r2, [r3, #0]

			j++;
 8000db2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db6:	3301      	adds	r3, #1
 8000db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		Lectura_BufferUsart1++;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000dc6:	701a      	strb	r2, [r3, #0]

		if(Lectura_BufferUsart1 >= UART_MAX_RECEIVE_DATA){
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b18      	cmp	r3, #24
 8000dce:	d902      	bls.n	8000dd6 <DecodeReceivedData+0x96>

			Lectura_BufferUsart1 = 0;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	while( (Lectura_BufferUsart1 != Escritura_BufferUsart1) ){
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <DecodeReceivedData+0xdc>)
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <DecodeReceivedData+0xe4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d1b9      	bne.n	8000d56 <DecodeReceivedData+0x16>
		}
	}

	*(DatosRecibidos + j) = '\0';
 8000de2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000de6:	f107 020c 	add.w	r2, r7, #12
 8000dea:	4413      	add	r3, r2
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]

	*NumberReceived = atoi(DatosRecibidos);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4618      	mov	r0, r3
 8000df6:	f007 fc09 	bl	800860c <atoi>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	801a      	strh	r2, [r3, #0]

	if(*NumberReceived != 0){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <DecodeReceivedData+0xd0>

		retVal = TRUE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return retVal; //si no recibi nada valido, vuelve por FALSE
 8000e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200000aa 	.word	0x200000aa
 8000e20:	20000090 	.word	0x20000090
 8000e24:	200000a9 	.word	0x200000a9

08000e28 <PrintString>:

/*************************************************************/
//-Prints string
/*************************************************************/

void PrintString( UART_HandleTypeDef printer, char* string, uint16_t size ){
 8000e28:	b084      	sub	sp, #16
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	f107 0c08 	add.w	ip, r7, #8
 8000e32:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_UART_Transmit( &printer, (uint8_t*)string, size, HAL_MAX_DELAY );
 8000e36:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000e40:	f107 0008 	add.w	r0, r7, #8
 8000e44:	f004 f995 	bl	8005172 <HAL_UART_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e50:	b004      	add	sp, #16
 8000e52:	4770      	bx	lr

08000e54 <PrintIntFormat>:

/*************************************************************/
//-Prints integer
/*************************************************************/

void PrintIntFormat( UART_HandleTypeDef printer, int16_t number ){
 8000e54:	b084      	sub	sp, #16
 8000e56:	b5b0      	push	{r4, r5, r7, lr}
 8000e58:	b094      	sub	sp, #80	; 0x50
 8000e5a:	af10      	add	r7, sp, #64	; 0x40
 8000e5c:	f107 0420 	add.w	r4, r7, #32
 8000e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char DataNumber[10];

	memset (DataNumber,'\0', 10);
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	220a      	movs	r2, #10
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f007 fc24 	bl	80086b8 <memset>

	itoa(number, DataNumber, 10);
 8000e70:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8000e74:	1d39      	adds	r1, r7, #4
 8000e76:	220a      	movs	r2, #10
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f007 fc0d 	bl	8008698 <itoa>

	PrintString( printer, DataNumber, sizeof(DataNumber) );
 8000e7e:	230a      	movs	r3, #10
 8000e80:	930e      	str	r3, [sp, #56]	; 0x38
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	930d      	str	r3, [sp, #52]	; 0x34
 8000e86:	466d      	mov	r5, sp
 8000e88:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	602b      	str	r3, [r5, #0]
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea2:	f7ff ffc1 	bl	8000e28 <PrintString>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000eb0:	b004      	add	sp, #16
 8000eb2:	4770      	bx	lr

08000eb4 <w25q80dv_Read>:

/*==================[internal functions definition]==========================*/

/*==================[low level functions definition]=========================*/

HAL_StatusTypeDef w25q80dv_Read( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght, uint8_t* value, uint8_t valueLenght ){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	71fb      	strb	r3, [r7, #7]

	uint8_t retVal;

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_RESET);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6898      	ldr	r0, [r3, #8]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	889b      	ldrh	r3, [r3, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f001 fcc8 	bl	8002864 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(dev->W25Q80DV_SPI, data, dataLenght, HAL_MAX_DELAY);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	f003 f9c7 	bl	8004274 <HAL_SPI_Transmit>

	retVal = HAL_SPI_Receive(dev->W25Q80DV_SPI, value, valueLenght, HAL_MAX_DELAY);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	f003 faf9 	bl	80044ec <HAL_SPI_Receive>
 8000efa:	4603      	mov	r3, r0
 8000efc:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_SET);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6898      	ldr	r0, [r3, #8]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	889b      	ldrh	r3, [r3, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f001 fcab 	bl	8002864 <HAL_GPIO_WritePin>

	return retVal;
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <w25q80dv_Write>:

/*************************************************************/

HAL_StatusTypeDef w25q80dv_Write( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght ){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	4613      	mov	r3, r2
 8000f24:	71fb      	strb	r3, [r7, #7]

	uint8_t retVal;

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_RESET);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6898      	ldr	r0, [r3, #8]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	889b      	ldrh	r3, [r3, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	f001 fc97 	bl	8002864 <HAL_GPIO_WritePin>

	retVal = HAL_SPI_Transmit(dev->W25Q80DV_SPI, data, dataLenght, HAL_MAX_DELAY);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	f003 f996 	bl	8004274 <HAL_SPI_Transmit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(dev->csPort, dev->csPin, GPIO_PIN_SET);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6898      	ldr	r0, [r3, #8]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	889b      	ldrh	r3, [r3, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	f001 fc84 	bl	8002864 <HAL_GPIO_WritePin>

	return retVal;
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <w25q80dv_InstructionReadID>:

/*==================[Instruction functions definition]=======================*/

bool_t w25q80dv_InstructionReadID( W25Q80DV_Data_t* dev ){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	6078      	str	r0, [r7, #4]

	uint8_t instruction[] = {W25Q80DV_DEVID, W25Q80DV_DUMMY_BYTE, W25Q80DV_DUMMY_BYTE, W25Q80DV_DUMMY_BYTE};
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <w25q80dv_InstructionReadID+0x44>)
 8000f72:	613b      	str	r3, [r7, #16]

	uint8_t devID = W25Q80DV_ERROR_BYTE;
 8000f74:	23ff      	movs	r3, #255	; 0xff
 8000f76:	73fb      	strb	r3, [r7, #15]

	bool_t retVal = FALSE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	75fb      	strb	r3, [r7, #23]

	if(w25q80dv_Read(dev, instruction, 4, &devID, 1) == HAL_OK){
 8000f7c:	f107 030f 	add.w	r3, r7, #15
 8000f80:	f107 0110 	add.w	r1, r7, #16
 8000f84:	2201      	movs	r2, #1
 8000f86:	9200      	str	r2, [sp, #0]
 8000f88:	2204      	movs	r2, #4
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff92 	bl	8000eb4 <w25q80dv_Read>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d104      	bne.n	8000fa0 <w25q80dv_InstructionReadID+0x38>

		if(devID == W25Q80DV_ID){
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2b13      	cmp	r3, #19
 8000f9a:	d101      	bne.n	8000fa0 <w25q80dv_InstructionReadID+0x38>

			retVal = TRUE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	75fb      	strb	r3, [r7, #23]
		}
	}

	return retVal;
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	aaaaaaab 	.word	0xaaaaaaab

08000fb0 <w25q80dv_InstructionWriteEnable>:

/*************************************************************/

HAL_StatusTypeDef w25q80dv_InstructionWriteEnable( W25Q80DV_Data_t* dev ){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	uint8_t instruction = W25Q80DV_WRITE_ENABLE;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	73fb      	strb	r3, [r7, #15]

	return w25q80dv_Write(dev, &instruction, 1);
 8000fbc:	f107 030f 	add.w	r3, r7, #15
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ffa7 	bl	8000f18 <w25q80dv_Write>
 8000fca:	4603      	mov	r3, r0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <w25q80dv_InstructionReadStatusRegister>:
	return w25q80dv_Write(dev, &instruction, 1);
}

/*************************************************************/

uint8_t w25q80dv_InstructionReadStatusRegister( W25Q80DV_Data_t* dev, uint8_t selectRegister){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]

	uint8_t instruction;

	uint8_t statusRegister = W25Q80DV_ERROR_BYTE;
 8000fe0:	23ff      	movs	r3, #255	; 0xff
 8000fe2:	73bb      	strb	r3, [r7, #14]

	if (selectRegister == W25Q80DV_STATUSREGISTER_1 ){
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10c      	bne.n	8001004 <w25q80dv_InstructionReadStatusRegister+0x30>

		instruction = W25Q80DV_READ_SR1;
 8000fea:	2305      	movs	r3, #5
 8000fec:	73fb      	strb	r3, [r7, #15]

		w25q80dv_Read(dev, &instruction, 1, &statusRegister, 1);
 8000fee:	f107 030e 	add.w	r3, r7, #14
 8000ff2:	f107 010f 	add.w	r1, r7, #15
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	9200      	str	r2, [sp, #0]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff59 	bl	8000eb4 <w25q80dv_Read>
 8001002:	e00e      	b.n	8001022 <w25q80dv_InstructionReadStatusRegister+0x4e>
	}

	else if (selectRegister == 2){
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d10b      	bne.n	8001022 <w25q80dv_InstructionReadStatusRegister+0x4e>

		instruction = W25Q80DV_READ_SR2;
 800100a:	2335      	movs	r3, #53	; 0x35
 800100c:	73fb      	strb	r3, [r7, #15]

		w25q80dv_Read(dev, &instruction, 1, &statusRegister, 1);
 800100e:	f107 030e 	add.w	r3, r7, #14
 8001012:	f107 010f 	add.w	r1, r7, #15
 8001016:	2201      	movs	r2, #1
 8001018:	9200      	str	r2, [sp, #0]
 800101a:	2201      	movs	r2, #1
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff49 	bl	8000eb4 <w25q80dv_Read>
	}

	return statusRegister;
 8001022:	7bbb      	ldrb	r3, [r7, #14]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <w25q80dv_InstructionWaitForWriteEnd>:

/*************************************************************/

void w25q80dv_InstructionWaitForWriteEnd( W25Q80DV_Data_t* dev ){
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

	uint8_t statusRegister1;

	do{
		statusRegister1 = w25q80dv_InstructionReadStatusRegister(dev, W25Q80DV_READ_SR1);
 8001034:	2105      	movs	r1, #5
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffcc 	bl	8000fd4 <w25q80dv_InstructionReadStatusRegister>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]

		osDelay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f004 ff12 	bl	8005e6a <osDelay>

	} while ((statusRegister1 & W25Q80DV_WEL_BIT) == W25Q80DV_WEL_ENABLE);
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f1      	bne.n	8001034 <w25q80dv_InstructionWaitForWriteEnd+0x8>
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <w25q80dv_Init>:

/*==================[Initialization functions definition]====================*/

uint8_t w25q80dv_Init( W25Q80DV_Data_t* dev, SPI_HandleTypeDef* spi, uint16_t pin, GPIO_TypeDef* port ){
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4613      	mov	r3, r2
 8001068:	80fb      	strh	r3, [r7, #6]

	dev->block = TRUE;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	731a      	strb	r2, [r3, #12]

	dev->W25Q80DV_SPI = spi;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	601a      	str	r2, [r3, #0]

	dev->csPort = port;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	609a      	str	r2, [r3, #8]

	dev->csPin = pin;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	88fa      	ldrh	r2, [r7, #6]
 8001080:	809a      	strh	r2, [r3, #4]

	dev->lastPage = 0;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2200      	movs	r2, #0
 8001086:	829a      	strh	r2, [r3, #20]

	dev->lastAddress = W25Q80DV_FIRST_PAGE_ADDRESS;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]

	// We make sure that the memory start properly

	uint8_t instruction = W25Q80DV_RELEASE_PD;
 800108e:	23ab      	movs	r3, #171	; 0xab
 8001090:	75bb      	strb	r3, [r7, #22]

	w25q80dv_Write(dev, &instruction, 1);
 8001092:	f107 0316 	add.w	r3, r7, #22
 8001096:	2201      	movs	r2, #1
 8001098:	4619      	mov	r1, r3
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff ff3c 	bl	8000f18 <w25q80dv_Write>

	osDelay(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f004 fee2 	bl	8005e6a <osDelay>

	// Check the flash memory

	bool_t retVal = FALSE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]

	if(w25q80dv_InstructionReadID(dev)){
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f7ff ff5c 	bl	8000f68 <w25q80dv_InstructionReadID>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <w25q80dv_Init+0x60>

		retVal = TRUE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	75fb      	strb	r3, [r7, #23]
	}

	dev->block = FALSE;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2200      	movs	r2, #0
 80010be:	731a      	strb	r2, [r3, #12]

	return retVal;
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <w25q80dv_InitAddress>:

/*************************************************************/

bool_t w25q80dv_InitAddress( W25Q80DV_Data_t* dev ){
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]

	dev->block = TRUE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	731a      	strb	r2, [r3, #12]

	// We read the first 6 bytes of the memory where the data of last address
	// and page are store, to know if the memory was used or not.

	dev->lastPage = 0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	829a      	strh	r2, [r3, #20]

	dev->lastAddress = W25Q80DV_FIRST_PAGE_ADDRESS;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]

	uint8_t data[6];

	w25q80dv_ReadBytes(dev, data, 6);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2206      	movs	r2, #6
 80010ea:	4619      	mov	r1, r3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f8e4 	bl	80012ba <w25q80dv_ReadBytes>

	// Check the data in memory

	bool_t retVal = FALSE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	75fb      	strb	r3, [r7, #23]

	uint32_t _lastAddress = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 80010f6:	7a3b      	ldrb	r3, [r7, #8]
 80010f8:	061a      	lsls	r2, r3, #24
 80010fa:	7a7b      	ldrb	r3, [r7, #9]
 80010fc:	041b      	lsls	r3, r3, #16
 80010fe:	431a      	orrs	r2, r3
 8001100:	7abb      	ldrb	r3, [r7, #10]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	4313      	orrs	r3, r2
 8001106:	7afa      	ldrb	r2, [r7, #11]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

	uint16_t _lastPage = (data[4] << 8) | data[5];
 800110c:	7b3b      	ldrb	r3, [r7, #12]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	7b7b      	ldrb	r3, [r7, #13]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	81fb      	strh	r3, [r7, #14]

	if(_lastPage != W25Q80DV_NO_PAGE){
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001122:	4293      	cmp	r3, r2
 8001124:	d007      	beq.n	8001136 <w25q80dv_InitAddress+0x6c>

		retVal = TRUE;
 8001126:	2301      	movs	r3, #1
 8001128:	75fb      	strb	r3, [r7, #23]

		dev->lastAddress = _lastAddress;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	611a      	str	r2, [r3, #16]

		dev->lastPage = _lastPage;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	89fa      	ldrh	r2, [r7, #14]
 8001134:	829a      	strh	r2, [r3, #20]
	}

	dev->block = FALSE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	731a      	strb	r2, [r3, #12]

	return retVal;
 800113c:	7dfb      	ldrb	r3, [r7, #23]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <w25q80dv_EraseChip>:

/*==================[Basic functions definition]============================*/

void w25q80dv_EraseChip( W25Q80DV_Data_t* dev ){
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]

	while (dev->block == TRUE){
 800114e:	e002      	b.n	8001156 <w25q80dv_EraseChip+0x10>

		osDelay(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f004 fe8a 	bl	8005e6a <osDelay>
	while (dev->block == TRUE){
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7b1b      	ldrb	r3, [r3, #12]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d0f8      	beq.n	8001150 <w25q80dv_EraseChip+0xa>
	}

	dev->block = TRUE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	731a      	strb	r2, [r3, #12]

	w25q80dv_InstructionWaitForWriteEnd(dev);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff61 	bl	800102c <w25q80dv_InstructionWaitForWriteEnd>

	w25q80dv_InstructionWriteEnable(dev);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff20 	bl	8000fb0 <w25q80dv_InstructionWriteEnable>

	uint8_t instruction = W25Q80DV_CHIP_ERASE;
 8001170:	23c7      	movs	r3, #199	; 0xc7
 8001172:	73fb      	strb	r3, [r7, #15]

	w25q80dv_Write(dev, &instruction, 1);
 8001174:	f107 030f 	add.w	r3, r7, #15
 8001178:	2201      	movs	r2, #1
 800117a:	4619      	mov	r1, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fecb 	bl	8000f18 <w25q80dv_Write>

	w25q80dv_InstructionWaitForWriteEnd(dev);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff52 	bl	800102c <w25q80dv_InstructionWaitForWriteEnd>

	dev->block = FALSE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	731a      	strb	r2, [r3, #12]
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <w25q80dv_WriteBytes>:

/*************************************************************/

void w25q80dv_WriteBytes( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght ){
 8001196:	b580      	push	{r7, lr}
 8001198:	b0c6      	sub	sp, #280	; 0x118
 800119a:	af00      	add	r7, sp, #0
 800119c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011a4:	6018      	str	r0, [r3, #0]
 80011a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80011ae:	6019      	str	r1, [r3, #0]
 80011b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011b4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80011b8:	701a      	strb	r2, [r3, #0]

	while (dev->block == TRUE){
 80011ba:	e002      	b.n	80011c2 <w25q80dv_WriteBytes+0x2c>

		osDelay(1);
 80011bc:	2001      	movs	r0, #1
 80011be:	f004 fe54 	bl	8005e6a <osDelay>
	while (dev->block == TRUE){
 80011c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	7b1b      	ldrb	r3, [r3, #12]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d0f4      	beq.n	80011bc <w25q80dv_WriteBytes+0x26>
	}

	dev->block = TRUE;
 80011d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2201      	movs	r2, #1
 80011de:	731a      	strb	r2, [r3, #12]

	w25q80dv_InstructionWaitForWriteEnd(dev);
 80011e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f7ff ff1f 	bl	800102c <w25q80dv_InstructionWaitForWriteEnd>

	w25q80dv_InstructionWriteEnable(dev);
 80011ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f7ff feda 	bl	8000fb0 <w25q80dv_InstructionWriteEnable>

	uint8_t instruction[4 + W25Q80DV_PAGE_SIZE]; // Instruction + 3 byte Address + Data

	instruction[0] = W25Q80DV_PAGE_PROGRAM;
 80011fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001204:	2202      	movs	r2, #2
 8001206:	701a      	strb	r2, [r3, #0]

	instruction[1] = (dev->lastAddress & 0xFF0000) >> 16;
 8001208:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800120c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	0c1b      	lsrs	r3, r3, #16
 8001216:	b2da      	uxtb	r2, r3
 8001218:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800121c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001220:	705a      	strb	r2, [r3, #1]

	instruction[2] = (dev->lastAddress & 0xFF00) >> 8;
 8001222:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001226:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	b2da      	uxtb	r2, r3
 8001232:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800123a:	709a      	strb	r2, [r3, #2]

	instruction[3] = (dev->lastAddress & 0xFF);
 800123c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001240:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800124e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001252:	70da      	strb	r2, [r3, #3]

	memcpy((instruction + 4), data, dataLenght);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	3304      	adds	r3, #4
 800125a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800125e:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001268:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800126c:	6809      	ldr	r1, [r1, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f007 fa14 	bl	800869c <memcpy>

	w25q80dv_Write(dev, instruction, 4 + dataLenght);
 8001274:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001278:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	3304      	adds	r3, #4
 8001280:	b2da      	uxtb	r2, r3
 8001282:	f107 0114 	add.w	r1, r7, #20
 8001286:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800128a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	f7ff fe42 	bl	8000f18 <w25q80dv_Write>

	w25q80dv_InstructionWaitForWriteEnd(dev);
 8001294:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001298:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	f7ff fec5 	bl	800102c <w25q80dv_InstructionWaitForWriteEnd>

	dev->block = FALSE;
 80012a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	731a      	strb	r2, [r3, #12]
}
 80012b0:	bf00      	nop
 80012b2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <w25q80dv_ReadBytes>:

/*************************************************************/

void w25q80dv_ReadBytes( W25Q80DV_Data_t* dev, uint8_t* data, uint8_t dataLenght ){
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b088      	sub	sp, #32
 80012be:	af02      	add	r7, sp, #8
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71fb      	strb	r3, [r7, #7]

	while (dev->block == TRUE){
 80012c8:	e002      	b.n	80012d0 <w25q80dv_ReadBytes+0x16>

		osDelay(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f004 fdcd 	bl	8005e6a <osDelay>
	while (dev->block == TRUE){
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	7b1b      	ldrb	r3, [r3, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d0f8      	beq.n	80012ca <w25q80dv_ReadBytes+0x10>
	}

	dev->block = TRUE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2201      	movs	r2, #1
 80012dc:	731a      	strb	r2, [r3, #12]

	uint8_t instruction[4]; // Instruction + 3 byte Address

	instruction[0] = W25Q80DV_READ_DATA;
 80012de:	2303      	movs	r3, #3
 80012e0:	753b      	strb	r3, [r7, #20]

	instruction[1] = (dev->lastAddress & 0xFF0000) >> 16;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	0c1b      	lsrs	r3, r3, #16
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	757b      	strb	r3, [r7, #21]

	instruction[2] = (dev->lastAddress & 0xFF00) >> 8;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	75bb      	strb	r3, [r7, #22]

	instruction[3] = (dev->lastAddress & 0xFF);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	75fb      	strb	r3, [r7, #23]

	w25q80dv_Read(dev, instruction, 4, data, dataLenght);
 80012fe:	f107 0114 	add.w	r1, r7, #20
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2204      	movs	r2, #4
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff fdd2 	bl	8000eb4 <w25q80dv_Read>

	dev->block = FALSE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	731a      	strb	r2, [r3, #12]
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <vApplicationGetIdleTaskMemory+0x28>)
 8001330:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <vApplicationGetIdleTaskMemory+0x2c>)
 8001336:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	200000ac 	.word	0x200000ac
 800134c:	20000100 	.word	0x20000100

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b0a2      	sub	sp, #136	; 0x88
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001356:	f000 fd51 	bl	8001dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135a:	f000 f89f 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135e:	f000 f99f 	bl	80016a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001362:	f000 f97f 	bl	8001664 <MX_DMA_Init>
  MX_I2C1_Init();
 8001366:	f000 f8df 	bl	8001528 <MX_I2C1_Init>
  MX_SPI1_Init();
 800136a:	f000 f90b 	bl	8001584 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800136e:	f000 f93f 	bl	80015f0 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemaphoreUART */
  osSemaphoreDef(binarySemaphoreUART);
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  binarySemaphoreUARTHandle = osSemaphoreCreate(osSemaphore(binarySemaphoreUART), 1);
 800137e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001382:	2101      	movs	r1, #1
 8001384:	4618      	mov	r0, r3
 8001386:	f004 fd84 	bl	8005e92 <osSemaphoreCreate>
 800138a:	4603      	mov	r3, r0
 800138c:	4a36      	ldr	r2, [pc, #216]	; (8001468 <main+0x118>)
 800138e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of usartReceptionQueue */
  osMessageQDef(usartReceptionQueue, 16, uint8_t);
 8001390:	4b36      	ldr	r3, [pc, #216]	; (800146c <main+0x11c>)
 8001392:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usartReceptionQueueHandle = osMessageCreate(osMessageQ(usartReceptionQueue), NULL);
 800139c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 fe2c 	bl	8006000 <osMessageCreate>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a31      	ldr	r2, [pc, #196]	; (8001470 <main+0x120>)
 80013ac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  queueDataProcessing = xQueueCreate(16, sizeof(LIS3MDL_StoreData_t));
 80013ae:	2200      	movs	r2, #0
 80013b0:	2118      	movs	r1, #24
 80013b2:	2010      	movs	r0, #16
 80013b4:	f004 ffdb 	bl	800636e <xQueueGenericCreate>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <main+0x124>)
 80013bc:	6013      	str	r3, [r2, #0]
  queueUsartReception = xQueueCreate(16, sizeof(uint16_t));
 80013be:	2200      	movs	r2, #0
 80013c0:	2102      	movs	r1, #2
 80013c2:	2010      	movs	r0, #16
 80013c4:	f004 ffd3 	bl	800636e <xQueueGenericCreate>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a2b      	ldr	r2, [pc, #172]	; (8001478 <main+0x128>)
 80013cc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of measurementTask */
  osThreadDef(measurementTask, measurementFunction, osPriorityNormal, 0, 128);
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <main+0x12c>)
 80013d0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80013d4:	461d      	mov	r5, r3
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  measurementTaskHandle = osThreadCreate(osThread(measurementTask), NULL);
 80013e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 fcf2 	bl	8005dd2 <osThreadCreate>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a23      	ldr	r2, [pc, #140]	; (8001480 <main+0x130>)
 80013f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of recordingTask */
  osThreadDef(recordingTask, recordingFunction, osPriorityNormal, 0, 128);
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <main+0x134>)
 80013f6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013fa:	461d      	mov	r5, r3
 80013fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001400:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001404:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  recordingTaskHandle = osThreadCreate(osThread(recordingTask), NULL);
 8001408:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f004 fcdf 	bl	8005dd2 <osThreadCreate>
 8001414:	4603      	mov	r3, r0
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <main+0x138>)
 8001418:	6013      	str	r3, [r2, #0]

  /* definition and creation of receptionTask */
  osThreadDef(receptionTask, receptionFunction, osPriorityNormal, 0, 128);
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <main+0x13c>)
 800141c:	f107 041c 	add.w	r4, r7, #28
 8001420:	461d      	mov	r5, r3
 8001422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001426:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800142a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receptionTaskHandle = osThreadCreate(osThread(receptionTask), NULL);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f004 fccc 	bl	8005dd2 <osThreadCreate>
 800143a:	4603      	mov	r3, r0
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <main+0x140>)
 800143e:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendingTask */
  osThreadDef(sendingTask, sendingFunction, osPriorityNormal, 0, 128);
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <main+0x144>)
 8001442:	463c      	mov	r4, r7
 8001444:	461d      	mov	r5, r3
 8001446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800144e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendingTaskHandle = osThreadCreate(osThread(sendingTask), NULL);
 8001452:	463b      	mov	r3, r7
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f004 fcbb 	bl	8005dd2 <osThreadCreate>
 800145c:	4603      	mov	r3, r0
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <main+0x148>)
 8001460:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001462:	f004 fcaf 	bl	8005dc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001466:	e7fe      	b.n	8001466 <main+0x116>
 8001468:	20000448 	.word	0x20000448
 800146c:	080088ac 	.word	0x080088ac
 8001470:	20000444 	.word	0x20000444
 8001474:	2000044c 	.word	0x2000044c
 8001478:	20000450 	.word	0x20000450
 800147c:	080088bc 	.word	0x080088bc
 8001480:	20000434 	.word	0x20000434
 8001484:	080088d8 	.word	0x080088d8
 8001488:	20000438 	.word	0x20000438
 800148c:	080088f4 	.word	0x080088f4
 8001490:	2000043c 	.word	0x2000043c
 8001494:	08008910 	.word	0x08008910
 8001498:	20000440 	.word	0x20000440

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b090      	sub	sp, #64	; 0x40
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	2228      	movs	r2, #40	; 0x28
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f007 f904 	bl	80086b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d0:	2302      	movs	r3, #2
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 f9f7 	bl	80038d8 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014f0:	f000 fa66 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	2302      	movs	r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2102      	movs	r1, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fc64 	bl	8003ddc <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800151a:	f000 fa51 	bl	80019c0 <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3740      	adds	r7, #64	; 0x40
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_I2C1_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <MX_I2C1_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_I2C1_Init+0x50>)
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_I2C1_Init+0x58>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_I2C1_Init+0x50>)
 8001546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_I2C1_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_I2C1_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_I2C1_Init+0x50>)
 8001566:	f001 f9b7 	bl	80028d8 <HAL_I2C_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001570:	f000 fa26 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000300 	.word	0x20000300
 800157c:	40005400 	.word	0x40005400
 8001580:	000186a0 	.word	0x000186a0

08001584 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_SPI1_Init+0x64>)
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <MX_SPI1_Init+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b8:	2208      	movs	r2, #8
 80015ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d0:	220a      	movs	r2, #10
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d6:	f002 fdc9 	bl	800416c <HAL_SPI_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015e0:	f000 f9ee 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000354 	.word	0x20000354
 80015ec:	40013000 	.word	0x40013000

080015f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_USART1_UART_Init+0x64>)
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <MX_USART1_UART_Init+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_USART1_UART_Init+0x64>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_USART1_UART_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_USART1_UART_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_USART1_UART_Init+0x64>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART1_UART_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART1_UART_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <MX_USART1_UART_Init+0x64>)
 8001628:	f003 fd56 	bl	80050d8 <HAL_UART_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001632:	f000 f9c5 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 8001636:	2219      	movs	r2, #25
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <MX_USART1_UART_Init+0x6c>)
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_USART1_UART_Init+0x64>)
 800163c:	f003 fe2b 	bl	8005296 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_USART1_UART_Init+0x70>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART1_UART_Init+0x70>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0204 	bic.w	r2, r2, #4
 800164e:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200003ac 	.word	0x200003ac
 8001658:	40013800 	.word	0x40013800
 800165c:	20000454 	.word	0x20000454
 8001660:	200003f0 	.word	0x200003f0

08001664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_DMA_Init+0x38>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <MX_DMA_Init+0x38>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6153      	str	r3, [r2, #20]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_DMA_Init+0x38>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2105      	movs	r1, #5
 8001686:	200f      	movs	r0, #15
 8001688:	f000 fc9f 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800168c:	200f      	movs	r0, #15
 800168e:	f000 fcb8 	bl	8002002 <HAL_NVIC_EnableIRQ>

}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000

080016a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b4:	4b38      	ldr	r3, [pc, #224]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a37      	ldr	r2, [pc, #220]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016cc:	4b32      	ldr	r3, [pc, #200]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a31      	ldr	r2, [pc, #196]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016d2:	f043 0320 	orr.w	r3, r3, #32
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a2b      	ldr	r2, [pc, #172]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <MX_GPIO_Init+0xf8>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a25      	ldr	r2, [pc, #148]	; (8001798 <MX_GPIO_Init+0xf8>)
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <MX_GPIO_Init+0xf8>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171a:	4820      	ldr	r0, [pc, #128]	; (800179c <MX_GPIO_Init+0xfc>)
 800171c:	f001 f8a2 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2110      	movs	r1, #16
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <MX_GPIO_Init+0x100>)
 8001726:	f001 f89d 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800172a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2302      	movs	r3, #2
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4619      	mov	r1, r3
 8001742:	4816      	ldr	r0, [pc, #88]	; (800179c <MX_GPIO_Init+0xfc>)
 8001744:	f000 ff0a 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_Pin;
 8001748:	2310      	movs	r3, #16
 800174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2302      	movs	r3, #2
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <MX_GPIO_Init+0x100>)
 8001760:	f000 fefc 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_GPIO_Init+0x104>)
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	2301      	movs	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4619      	mov	r1, r3
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <MX_GPIO_Init+0x108>)
 800177a:	f000 feef 	bl	800255c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2105      	movs	r1, #5
 8001782:	2028      	movs	r0, #40	; 0x28
 8001784:	f000 fc21 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001788:	2028      	movs	r0, #40	; 0x28
 800178a:	f000 fc3a 	bl	8002002 <HAL_NVIC_EnableIRQ>

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40011000 	.word	0x40011000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	10210000 	.word	0x10210000
 80017a8:	40010c00 	.word	0x40010c00

080017ac <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_UARTEx_RxEventCallback+0x54>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d119      	bne.n	80017f6 <HAL_UARTEx_RxEventCallback+0x4a>
    	if(StoreUSARTData(Rx_data, size)){
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	4619      	mov	r1, r3
 80017c6:	480f      	ldr	r0, [pc, #60]	; (8001804 <HAL_UARTEx_RxEventCallback+0x58>)
 80017c8:	f7ff fa54 	bl	8000c74 <StoreUSARTData>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <HAL_UARTEx_RxEventCallback+0x30>
        	osSemaphoreRelease(binarySemaphoreUARTHandle);
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_UARTEx_RxEventCallback+0x5c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fbdc 	bl	8005f94 <osSemaphoreRelease>
    	}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_data, UART_MAX_RECEIVE_DATA);
 80017dc:	2219      	movs	r2, #25
 80017de:	4909      	ldr	r1, [pc, #36]	; (8001804 <HAL_UARTEx_RxEventCallback+0x58>)
 80017e0:	480a      	ldr	r0, [pc, #40]	; (800180c <HAL_UARTEx_RxEventCallback+0x60>)
 80017e2:	f003 fd58 	bl	8005296 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_UARTEx_RxEventCallback+0x64>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_UARTEx_RxEventCallback+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0204 	bic.w	r2, r2, #4
 80017f4:	601a      	str	r2, [r3, #0]
    }
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40013800 	.word	0x40013800
 8001804:	20000454 	.word	0x20000454
 8001808:	20000448 	.word	0x20000448
 800180c:	200003ac 	.word	0x200003ac
 8001810:	200003f0 	.word	0x200003f0

08001814 <measurementFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_measurementFunction */
void measurementFunction(void const * argument)
{
 8001814:	b5b0      	push	{r4, r5, r7, lr}
 8001816:	b08e      	sub	sp, #56	; 0x38
 8001818:	af00      	add	r7, sp, #0
 800181a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	LIS3MDL_data.scale = LIS3MDL_SCALE_12_GAUSS;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <measurementFunction+0x74>)
 800181e:	2202      	movs	r2, #2
 8001820:	761a      	strb	r2, [r3, #24]

	lis3mdl_Init(&LIS3MDL_data, &hi2c1);
 8001822:	491a      	ldr	r1, [pc, #104]	; (800188c <measurementFunction+0x78>)
 8001824:	4818      	ldr	r0, [pc, #96]	; (8001888 <measurementFunction+0x74>)
 8001826:	f7ff f861 	bl	80008ec <lis3mdl_Init>

	LIS3MDL_StoreData_t dataToSend;

	while(1){

		osDelay(1000);
 800182a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182e:	f004 fb1c 	bl	8005e6a <osDelay>

		LIS3MDL_data.uid++;
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <measurementFunction+0x74>)
 8001834:	889b      	ldrh	r3, [r3, #4]
 8001836:	3301      	adds	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <measurementFunction+0x74>)
 800183c:	809a      	strh	r2, [r3, #4]

		if(lis3mdl_DataReady(&LIS3MDL_data)){
 800183e:	4812      	ldr	r0, [pc, #72]	; (8001888 <measurementFunction+0x74>)
 8001840:	f7ff f8e2 	bl	8000a08 <lis3mdl_DataReady>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0ef      	beq.n	800182a <measurementFunction+0x16>

			lis3mdl_ReadMagnetometer(&LIS3MDL_data);
 800184a:	480f      	ldr	r0, [pc, #60]	; (8001888 <measurementFunction+0x74>)
 800184c:	f7ff f8f4 	bl	8000a38 <lis3mdl_ReadMagnetometer>

			lis3mdl_ReadTemperature(&LIS3MDL_data);
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <measurementFunction+0x74>)
 8001852:	f7ff f963 	bl	8000b1c <lis3mdl_ReadTemperature>

			dataToSend = lis3mdl_ConvertToStoreData(&LIS3MDL_data);
 8001856:	463b      	mov	r3, r7
 8001858:	490b      	ldr	r1, [pc, #44]	; (8001888 <measurementFunction+0x74>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f990 	bl	8000b80 <lis3mdl_ConvertToStoreData>
 8001860:	f107 0420 	add.w	r4, r7, #32
 8001864:	463d      	mov	r5, r7
 8001866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800186e:	e884 0003 	stmia.w	r4, {r0, r1}

			xQueueSend(queueDataProcessing, &dataToSend, portMAX_DELAY);
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <measurementFunction+0x7c>)
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	f107 0120 	add.w	r1, r7, #32
 800187a:	2300      	movs	r3, #0
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	f004 fdd2 	bl	8006428 <xQueueGenericSend>
		osDelay(1000);
 8001884:	e7d1      	b.n	800182a <measurementFunction+0x16>
 8001886:	bf00      	nop
 8001888:	20000470 	.word	0x20000470
 800188c:	20000300 	.word	0x20000300
 8001890:	2000044c 	.word	0x2000044c

08001894 <recordingFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordingFunction */
void recordingFunction(void const * argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN recordingFunction */

	w25q80dv_Init(&W25Q80DV_data, &hspi1, SPI1_NCS_Pin, SPI1_NCS_GPIO_Port);
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <recordingFunction+0x60>)
 800189e:	2210      	movs	r2, #16
 80018a0:	4915      	ldr	r1, [pc, #84]	; (80018f8 <recordingFunction+0x64>)
 80018a2:	4816      	ldr	r0, [pc, #88]	; (80018fc <recordingFunction+0x68>)
 80018a4:	f7ff fbd9 	bl	800105a <w25q80dv_Init>

	// If there's no data save in the memory, we must do an erase to start using it.
	if(w25q80dv_InitAddress(&W25Q80DV_data) == FALSE){
 80018a8:	4814      	ldr	r0, [pc, #80]	; (80018fc <recordingFunction+0x68>)
 80018aa:	f7ff fc0e 	bl	80010ca <w25q80dv_InitAddress>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <recordingFunction+0x26>

		w25q80dv_EraseChip(&W25Q80DV_data);
 80018b4:	4811      	ldr	r0, [pc, #68]	; (80018fc <recordingFunction+0x68>)
 80018b6:	f7ff fc46 	bl	8001146 <w25q80dv_EraseChip>
	}

	LIS3MDL_StoreData_t message;

	uint8_t* ptrMessage = (uint8_t*)&message;
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	627b      	str	r3, [r7, #36]	; 0x24

	while(1){

		xQueueReceive(queueDataProcessing, &message, portMAX_DELAY);
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <recordingFunction+0x6c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f107 010c 	add.w	r1, r7, #12
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	4618      	mov	r0, r3
 80018ce:	f004 ff37 	bl	8006740 <xQueueReceive>

		if(message.readData == FALSE){
 80018d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <recordingFunction+0x52>
			// Check the address

			// We must save the data in memory
			w25q80dv_WriteBytes(&W25Q80DV_data, ptrMessage, sizeof(LIS3MDL_StoreData_t));
 80018da:	2218      	movs	r2, #24
 80018dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <recordingFunction+0x68>)
 80018e0:	f7ff fc59 	bl	8001196 <w25q80dv_WriteBytes>
 80018e4:	e7ec      	b.n	80018c0 <recordingFunction+0x2c>

		else {
			// First we must get the address of that data id

			// We must read the data in memory of the address
			w25q80dv_ReadBytes(&W25Q80DV_data, ptrMessage, sizeof(LIS3MDL_StoreData_t));
 80018e6:	2218      	movs	r2, #24
 80018e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <recordingFunction+0x68>)
 80018ec:	f7ff fce5 	bl	80012ba <w25q80dv_ReadBytes>
		xQueueReceive(queueDataProcessing, &message, portMAX_DELAY);
 80018f0:	e7e6      	b.n	80018c0 <recordingFunction+0x2c>
 80018f2:	bf00      	nop
 80018f4:	40010800 	.word	0x40010800
 80018f8:	20000354 	.word	0x20000354
 80018fc:	2000048c 	.word	0x2000048c
 8001900:	2000044c 	.word	0x2000044c

08001904 <receptionFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receptionFunction */
void receptionFunction(void const * argument)
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	b095      	sub	sp, #84	; 0x54
 8001908:	af10      	add	r7, sp, #64	; 0x40
 800190a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN receptionFunction */
  /* Infinite loop */
	while(1){
		osSemaphoreWait(binarySemaphoreUARTHandle, osWaitForever);
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <receptionFunction+0x7c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	4618      	mov	r0, r3
 8001916:	f004 faef 	bl	8005ef8 <osSemaphoreWait>
		uint16_t measureAsk = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	81fb      	strh	r3, [r7, #14]
		if(DecodeReceivedData(&measureAsk)){
 800191e:	f107 030e 	add.w	r3, r7, #14
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fa0c 	bl	8000d40 <DecodeReceivedData>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0ee      	beq.n	800190c <receptionFunction+0x8>
			PrintString(huart1, "Hola mundo\r\n", sizeof("Hola mundo\r\n"));
 800192e:	4e15      	ldr	r6, [pc, #84]	; (8001984 <receptionFunction+0x80>)
 8001930:	230d      	movs	r3, #13
 8001932:	930e      	str	r3, [sp, #56]	; 0x38
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <receptionFunction+0x84>)
 8001936:	930d      	str	r3, [sp, #52]	; 0x34
 8001938:	466d      	mov	r5, sp
 800193a:	f106 0410 	add.w	r4, r6, #16
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	602b      	str	r3, [r5, #0]
 800194e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001952:	f7ff fa69 	bl	8000e28 <PrintString>
			PrintIntFormat(huart1, measureAsk);
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	b21b      	sxth	r3, r3
 800195a:	4e0a      	ldr	r6, [pc, #40]	; (8001984 <receptionFunction+0x80>)
 800195c:	930d      	str	r3, [sp, #52]	; 0x34
 800195e:	466d      	mov	r5, sp
 8001960:	f106 0410 	add.w	r4, r6, #16
 8001964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	602b      	str	r3, [r5, #0]
 8001974:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001978:	f7ff fa6c 	bl	8000e54 <PrintIntFormat>
	while(1){
 800197c:	e7c6      	b.n	800190c <receptionFunction+0x8>
 800197e:	bf00      	nop
 8001980:	20000448 	.word	0x20000448
 8001984:	200003ac 	.word	0x200003ac
 8001988:	0800892c 	.word	0x0800892c

0800198c <sendingFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendingFunction */
void sendingFunction(void const * argument)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendingFunction */
  /* Infinite loop */
	while(1){
		osDelay(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f004 fa68 	bl	8005e6a <osDelay>
 800199a:	e7fb      	b.n	8001994 <sendingFunction+0x8>

0800199c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ae:	f000 fa3b 	bl	8001e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40012c00 	.word	0x40012c00

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>
	...

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_MspInit+0x68>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_MspInit+0x68>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6193      	str	r3, [r2, #24]
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_MspInit+0x68>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_MspInit+0x68>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <HAL_MspInit+0x68>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x68>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	210f      	movs	r1, #15
 8001a06:	f06f 0001 	mvn.w	r0, #1
 8001a0a:	f000 fade 	bl	8001fca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_MspInit+0x6c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_MspInit+0x6c>)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000

08001a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_I2C_MspInit+0x70>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d123      	bne.n	8001aa4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a74:	23c0      	movs	r3, #192	; 0xc0
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a78:	2312      	movs	r3, #18
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <HAL_I2C_MspInit+0x78>)
 8001a88:	f000 fd68 	bl	800255c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a96:	61d3      	str	r3, [r2, #28]
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_I2C_MspInit+0x74>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010c00 	.word	0x40010c00

08001ab8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <HAL_SPI_MspInit+0x88>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d12f      	bne.n	8001b38 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_SPI_MspInit+0x8c>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_SPI_MspInit+0x8c>)
 8001ade:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_SPI_MspInit+0x8c>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_SPI_MspInit+0x8c>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_SPI_MspInit+0x8c>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_SPI_MspInit+0x8c>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b08:	23a0      	movs	r3, #160	; 0xa0
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480b      	ldr	r0, [pc, #44]	; (8001b48 <HAL_SPI_MspInit+0x90>)
 8001b1c:	f000 fd1e 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b20:	2340      	movs	r3, #64	; 0x40
 8001b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4619      	mov	r1, r3
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <HAL_SPI_MspInit+0x90>)
 8001b34:	f000 fd12 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40013000 	.word	0x40013000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010800 	.word	0x40010800

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <HAL_UART_MspInit+0xe8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d15f      	bne.n	8001c2c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_UART_MspInit+0xec>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a31      	ldr	r2, [pc, #196]	; (8001c38 <HAL_UART_MspInit+0xec>)
 8001b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_UART_MspInit+0xec>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <HAL_UART_MspInit+0xec>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <HAL_UART_MspInit+0xec>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <HAL_UART_MspInit+0xec>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4822      	ldr	r0, [pc, #136]	; (8001c3c <HAL_UART_MspInit+0xf0>)
 8001bb2:	f000 fcd3 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	481c      	ldr	r0, [pc, #112]	; (8001c3c <HAL_UART_MspInit+0xf0>)
 8001bcc:	f000 fcc6 	bl	800255c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_UART_MspInit+0xf8>)
 8001bd4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c00:	480f      	ldr	r0, [pc, #60]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001c02:	f000 fa0d 	bl	8002020 <HAL_DMA_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001c0c:	f7ff fed8 	bl	80019c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_UART_MspInit+0xf4>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2105      	movs	r1, #5
 8001c20:	2025      	movs	r0, #37	; 0x25
 8001c22:	f000 f9d2 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c26:	2025      	movs	r0, #37	; 0x25
 8001c28:	f000 f9eb 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010800 	.word	0x40010800
 8001c40:	200003f0 	.word	0x200003f0
 8001c44:	40020058 	.word	0x40020058

08001c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_InitTick+0xd0>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	4a2d      	ldr	r2, [pc, #180]	; (8001d18 <HAL_InitTick+0xd0>)
 8001c64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c68:	6193      	str	r3, [r2, #24]
 8001c6a:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_InitTick+0xd0>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c76:	f107 020c 	add.w	r2, r7, #12
 8001c7a:	f107 0310 	add.w	r3, r7, #16
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 fa25 	bl	80040d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c86:	f002 fa0f 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 8001c8a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_InitTick+0xd4>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	0c9b      	lsrs	r3, r3, #18
 8001c96:	3b01      	subs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_InitTick+0xd8>)
 8001c9c:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_InitTick+0xdc>)
 8001c9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_InitTick+0xd8>)
 8001ca2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_InitTick+0xd8>)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cc0:	4817      	ldr	r0, [pc, #92]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cc2:	f002 ffbf 	bl	8004c44 <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d11b      	bne.n	8001d0c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001cd4:	4812      	ldr	r0, [pc, #72]	; (8001d20 <HAL_InitTick+0xd8>)
 8001cd6:	f003 f80d 	bl	8004cf4 <HAL_TIM_Base_Start_IT>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d111      	bne.n	8001d0c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ce8:	2019      	movs	r0, #25
 8001cea:	f000 f98a 	bl	8002002 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d808      	bhi.n	8001d06 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	2019      	movs	r0, #25
 8001cfa:	f000 f966 	bl	8001fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_InitTick+0xe0>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	e002      	b.n	8001d0c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3730      	adds	r7, #48	; 0x30
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	431bde83 	.word	0x431bde83
 8001d20:	200004a4 	.word	0x200004a4
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	20000004 	.word	0x20000004

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <DMA1_Channel5_IRQHandler+0x10>)
 8001d5e:	f000 fac9 	bl	80022f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200003f0 	.word	0x200003f0

08001d6c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <TIM1_UP_IRQHandler+0x10>)
 8001d72:	f003 f811 	bl	8004d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200004a4 	.word	0x200004a4

08001d80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <USART1_IRQHandler+0x10>)
 8001d86:	f003 fad5 	bl	8005334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200003ac 	.word	0x200003ac

08001d94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001d98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d9c:	f000 fd7a 	bl	8002894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001db2:	490d      	ldr	r1, [pc, #52]	; (8001de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dd6:	f7ff ffe5 	bl	8001da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dda:	f006 fc21 	bl	8008620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dde:	f7ff fab7 	bl	8001350 <main>
  bx lr
 8001de2:	4770      	bx	lr
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001dec:	08008a9c 	.word	0x08008a9c
  ldr r2, =_sbss
 8001df0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001df4:	2000123c 	.word	0x2000123c

08001df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC1_2_IRQHandler>
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_Init+0x28>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_Init+0x28>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 f8d1 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff ff18 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e18:	f7ff fdd8 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_IncTick+0x1c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_IncTick+0x20>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <HAL_IncTick+0x20>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000008 	.word	0x20000008
 8001e48:	200004ec 	.word	0x200004ec

08001e4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <HAL_GetTick+0x10>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	200004ec 	.word	0x200004ec

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <__NVIC_EnableIRQ+0x34>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100

08001efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	; (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	; (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f1c3 0307 	rsb	r3, r3, #7
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf28      	it	cs
 8001f6e:	2304      	movcs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d902      	bls.n	8001f80 <NVIC_EncodePriority+0x30>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3b03      	subs	r3, #3
 8001f7e:	e000      	b.n	8001f82 <NVIC_EncodePriority+0x32>
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	401a      	ands	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	4313      	orrs	r3, r2
         );
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	; 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff4f 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff64 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ffb2 	bl	8001f50 <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff81 	bl	8001efc <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff57 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e043      	b.n	80020be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_DMA_Init+0xa8>)
 800203e:	4413      	add	r3, r2
 8002040:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_DMA_Init+0xac>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	009a      	lsls	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_DMA_Init+0xb0>)
 8002052:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800206a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800206e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	bffdfff8 	.word	0xbffdfff8
 80020cc:	cccccccd 	.word	0xcccccccd
 80020d0:	40020000 	.word	0x40020000

080020d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_DMA_Start_IT+0x20>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e04a      	b.n	800218a <HAL_DMA_Start_IT+0xb6>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002102:	2b01      	cmp	r3, #1
 8002104:	d13a      	bne.n	800217c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f9e8 	bl	8002500 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 020e 	orr.w	r2, r2, #14
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e00f      	b.n	800216a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0204 	bic.w	r2, r2, #4
 8002158:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 020a 	orr.w	r2, r2, #10
 8002168:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e005      	b.n	8002188 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002184:	2302      	movs	r3, #2
 8002186:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002188:	7dfb      	ldrb	r3, [r7, #23]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d008      	beq.n	80021ba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2204      	movs	r2, #4
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e020      	b.n	80021fc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 020e 	bic.w	r2, r2, #14
 80021c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0201 	bic.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
	...

08002208 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800221a:	2b02      	cmp	r3, #2
 800221c:	d005      	beq.n	800222a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2204      	movs	r2, #4
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e051      	b.n	80022ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 020e 	bic.w	r2, r2, #14
 8002238:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_DMA_Abort_IT+0xd0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d029      	beq.n	80022a8 <HAL_DMA_Abort_IT+0xa0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a20      	ldr	r2, [pc, #128]	; (80022dc <HAL_DMA_Abort_IT+0xd4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d022      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x9c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <HAL_DMA_Abort_IT+0xd8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d01a      	beq.n	800229e <HAL_DMA_Abort_IT+0x96>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <HAL_DMA_Abort_IT+0xdc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d012      	beq.n	8002298 <HAL_DMA_Abort_IT+0x90>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <HAL_DMA_Abort_IT+0xe0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00a      	beq.n	8002292 <HAL_DMA_Abort_IT+0x8a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_DMA_Abort_IT+0xe4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d102      	bne.n	800228c <HAL_DMA_Abort_IT+0x84>
 8002286:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800228a:	e00e      	b.n	80022aa <HAL_DMA_Abort_IT+0xa2>
 800228c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002290:	e00b      	b.n	80022aa <HAL_DMA_Abort_IT+0xa2>
 8002292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002296:	e008      	b.n	80022aa <HAL_DMA_Abort_IT+0xa2>
 8002298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229c:	e005      	b.n	80022aa <HAL_DMA_Abort_IT+0xa2>
 800229e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a2:	e002      	b.n	80022aa <HAL_DMA_Abort_IT+0xa2>
 80022a4:	2310      	movs	r3, #16
 80022a6:	e000      	b.n	80022aa <HAL_DMA_Abort_IT+0xa2>
 80022a8:	2301      	movs	r3, #1
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <HAL_DMA_Abort_IT+0xe8>)
 80022ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
    } 
  }
  return status;
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40020008 	.word	0x40020008
 80022dc:	4002001c 	.word	0x4002001c
 80022e0:	40020030 	.word	0x40020030
 80022e4:	40020044 	.word	0x40020044
 80022e8:	40020058 	.word	0x40020058
 80022ec:	4002006c 	.word	0x4002006c
 80022f0:	40020000 	.word	0x40020000

080022f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	2204      	movs	r2, #4
 8002312:	409a      	lsls	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d04f      	beq.n	80023bc <HAL_DMA_IRQHandler+0xc8>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d04a      	beq.n	80023bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0204 	bic.w	r2, r2, #4
 8002342:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a66      	ldr	r2, [pc, #408]	; (80024e4 <HAL_DMA_IRQHandler+0x1f0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d029      	beq.n	80023a2 <HAL_DMA_IRQHandler+0xae>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a65      	ldr	r2, [pc, #404]	; (80024e8 <HAL_DMA_IRQHandler+0x1f4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d022      	beq.n	800239e <HAL_DMA_IRQHandler+0xaa>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a63      	ldr	r2, [pc, #396]	; (80024ec <HAL_DMA_IRQHandler+0x1f8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01a      	beq.n	8002398 <HAL_DMA_IRQHandler+0xa4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a62      	ldr	r2, [pc, #392]	; (80024f0 <HAL_DMA_IRQHandler+0x1fc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d012      	beq.n	8002392 <HAL_DMA_IRQHandler+0x9e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a60      	ldr	r2, [pc, #384]	; (80024f4 <HAL_DMA_IRQHandler+0x200>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00a      	beq.n	800238c <HAL_DMA_IRQHandler+0x98>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a5f      	ldr	r2, [pc, #380]	; (80024f8 <HAL_DMA_IRQHandler+0x204>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d102      	bne.n	8002386 <HAL_DMA_IRQHandler+0x92>
 8002380:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002384:	e00e      	b.n	80023a4 <HAL_DMA_IRQHandler+0xb0>
 8002386:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800238a:	e00b      	b.n	80023a4 <HAL_DMA_IRQHandler+0xb0>
 800238c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002390:	e008      	b.n	80023a4 <HAL_DMA_IRQHandler+0xb0>
 8002392:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002396:	e005      	b.n	80023a4 <HAL_DMA_IRQHandler+0xb0>
 8002398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239c:	e002      	b.n	80023a4 <HAL_DMA_IRQHandler+0xb0>
 800239e:	2340      	movs	r3, #64	; 0x40
 80023a0:	e000      	b.n	80023a4 <HAL_DMA_IRQHandler+0xb0>
 80023a2:	2304      	movs	r3, #4
 80023a4:	4a55      	ldr	r2, [pc, #340]	; (80024fc <HAL_DMA_IRQHandler+0x208>)
 80023a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8094 	beq.w	80024da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023ba:	e08e      	b.n	80024da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	2202      	movs	r2, #2
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d056      	beq.n	800247a <HAL_DMA_IRQHandler+0x186>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d051      	beq.n	800247a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10b      	bne.n	80023fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 020a 	bic.w	r2, r2, #10
 80023f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a38      	ldr	r2, [pc, #224]	; (80024e4 <HAL_DMA_IRQHandler+0x1f0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d029      	beq.n	800245a <HAL_DMA_IRQHandler+0x166>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a37      	ldr	r2, [pc, #220]	; (80024e8 <HAL_DMA_IRQHandler+0x1f4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d022      	beq.n	8002456 <HAL_DMA_IRQHandler+0x162>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a35      	ldr	r2, [pc, #212]	; (80024ec <HAL_DMA_IRQHandler+0x1f8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01a      	beq.n	8002450 <HAL_DMA_IRQHandler+0x15c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a34      	ldr	r2, [pc, #208]	; (80024f0 <HAL_DMA_IRQHandler+0x1fc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d012      	beq.n	800244a <HAL_DMA_IRQHandler+0x156>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <HAL_DMA_IRQHandler+0x200>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00a      	beq.n	8002444 <HAL_DMA_IRQHandler+0x150>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <HAL_DMA_IRQHandler+0x204>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d102      	bne.n	800243e <HAL_DMA_IRQHandler+0x14a>
 8002438:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800243c:	e00e      	b.n	800245c <HAL_DMA_IRQHandler+0x168>
 800243e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002442:	e00b      	b.n	800245c <HAL_DMA_IRQHandler+0x168>
 8002444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002448:	e008      	b.n	800245c <HAL_DMA_IRQHandler+0x168>
 800244a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800244e:	e005      	b.n	800245c <HAL_DMA_IRQHandler+0x168>
 8002450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002454:	e002      	b.n	800245c <HAL_DMA_IRQHandler+0x168>
 8002456:	2320      	movs	r3, #32
 8002458:	e000      	b.n	800245c <HAL_DMA_IRQHandler+0x168>
 800245a:	2302      	movs	r3, #2
 800245c:	4a27      	ldr	r2, [pc, #156]	; (80024fc <HAL_DMA_IRQHandler+0x208>)
 800245e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d034      	beq.n	80024da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002478:	e02f      	b.n	80024da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2208      	movs	r2, #8
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d028      	beq.n	80024dc <HAL_DMA_IRQHandler+0x1e8>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d023      	beq.n	80024dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 020e 	bic.w	r2, r2, #14
 80024a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f202 	lsl.w	r2, r1, r2
 80024b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
    }
  }
  return;
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
}
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40020008 	.word	0x40020008
 80024e8:	4002001c 	.word	0x4002001c
 80024ec:	40020030 	.word	0x40020030
 80024f0:	40020044 	.word	0x40020044
 80024f4:	40020058 	.word	0x40020058
 80024f8:	4002006c 	.word	0x4002006c
 80024fc:	40020000 	.word	0x40020000

08002500 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f202 	lsl.w	r2, r1, r2
 800251c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b10      	cmp	r3, #16
 800252c:	d108      	bne.n	8002540 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800253e:	e007      	b.n	8002550 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	60da      	str	r2, [r3, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
	...

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b08b      	sub	sp, #44	; 0x2c
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256e:	e169      	b.n	8002844 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002570:	2201      	movs	r2, #1
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8158 	bne.w	800283e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a9a      	ldr	r2, [pc, #616]	; (80027fc <HAL_GPIO_Init+0x2a0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d05e      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 8002598:	4a98      	ldr	r2, [pc, #608]	; (80027fc <HAL_GPIO_Init+0x2a0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d875      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 800259e:	4a98      	ldr	r2, [pc, #608]	; (8002800 <HAL_GPIO_Init+0x2a4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d058      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025a4:	4a96      	ldr	r2, [pc, #600]	; (8002800 <HAL_GPIO_Init+0x2a4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d86f      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025aa:	4a96      	ldr	r2, [pc, #600]	; (8002804 <HAL_GPIO_Init+0x2a8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d052      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025b0:	4a94      	ldr	r2, [pc, #592]	; (8002804 <HAL_GPIO_Init+0x2a8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d869      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025b6:	4a94      	ldr	r2, [pc, #592]	; (8002808 <HAL_GPIO_Init+0x2ac>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04c      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025bc:	4a92      	ldr	r2, [pc, #584]	; (8002808 <HAL_GPIO_Init+0x2ac>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d863      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025c2:	4a92      	ldr	r2, [pc, #584]	; (800280c <HAL_GPIO_Init+0x2b0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d046      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025c8:	4a90      	ldr	r2, [pc, #576]	; (800280c <HAL_GPIO_Init+0x2b0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d85d      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025ce:	2b12      	cmp	r3, #18
 80025d0:	d82a      	bhi.n	8002628 <HAL_GPIO_Init+0xcc>
 80025d2:	2b12      	cmp	r3, #18
 80025d4:	d859      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <HAL_GPIO_Init+0x80>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	08002657 	.word	0x08002657
 80025e0:	08002631 	.word	0x08002631
 80025e4:	08002643 	.word	0x08002643
 80025e8:	08002685 	.word	0x08002685
 80025ec:	0800268b 	.word	0x0800268b
 80025f0:	0800268b 	.word	0x0800268b
 80025f4:	0800268b 	.word	0x0800268b
 80025f8:	0800268b 	.word	0x0800268b
 80025fc:	0800268b 	.word	0x0800268b
 8002600:	0800268b 	.word	0x0800268b
 8002604:	0800268b 	.word	0x0800268b
 8002608:	0800268b 	.word	0x0800268b
 800260c:	0800268b 	.word	0x0800268b
 8002610:	0800268b 	.word	0x0800268b
 8002614:	0800268b 	.word	0x0800268b
 8002618:	0800268b 	.word	0x0800268b
 800261c:	0800268b 	.word	0x0800268b
 8002620:	08002639 	.word	0x08002639
 8002624:	0800264d 	.word	0x0800264d
 8002628:	4a79      	ldr	r2, [pc, #484]	; (8002810 <HAL_GPIO_Init+0x2b4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800262e:	e02c      	b.n	800268a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	623b      	str	r3, [r7, #32]
          break;
 8002636:	e029      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	3304      	adds	r3, #4
 800263e:	623b      	str	r3, [r7, #32]
          break;
 8002640:	e024      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	3308      	adds	r3, #8
 8002648:	623b      	str	r3, [r7, #32]
          break;
 800264a:	e01f      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	330c      	adds	r3, #12
 8002652:	623b      	str	r3, [r7, #32]
          break;
 8002654:	e01a      	b.n	800268c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800265e:	2304      	movs	r3, #4
 8002660:	623b      	str	r3, [r7, #32]
          break;
 8002662:	e013      	b.n	800268c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800266c:	2308      	movs	r3, #8
 800266e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	611a      	str	r2, [r3, #16]
          break;
 8002676:	e009      	b.n	800268c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002678:	2308      	movs	r3, #8
 800267a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	615a      	str	r2, [r3, #20]
          break;
 8002682:	e003      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
          break;
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x130>
          break;
 800268a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2bff      	cmp	r3, #255	; 0xff
 8002690:	d801      	bhi.n	8002696 <HAL_GPIO_Init+0x13a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	e001      	b.n	800269a <HAL_GPIO_Init+0x13e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2bff      	cmp	r3, #255	; 0xff
 80026a0:	d802      	bhi.n	80026a8 <HAL_GPIO_Init+0x14c>
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	e002      	b.n	80026ae <HAL_GPIO_Init+0x152>
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	3b08      	subs	r3, #8
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	210f      	movs	r1, #15
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	401a      	ands	r2, r3
 80026c0:	6a39      	ldr	r1, [r7, #32]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	431a      	orrs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80b1 	beq.w	800283e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026dc:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <HAL_GPIO_Init+0x2b8>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <HAL_GPIO_Init+0x2b8>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <HAL_GPIO_Init+0x2b8>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026f4:	4a48      	ldr	r2, [pc, #288]	; (8002818 <HAL_GPIO_Init+0x2bc>)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a40      	ldr	r2, [pc, #256]	; (800281c <HAL_GPIO_Init+0x2c0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <HAL_GPIO_Init+0x1ec>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a3f      	ldr	r2, [pc, #252]	; (8002820 <HAL_GPIO_Init+0x2c4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d00d      	beq.n	8002744 <HAL_GPIO_Init+0x1e8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a3e      	ldr	r2, [pc, #248]	; (8002824 <HAL_GPIO_Init+0x2c8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d007      	beq.n	8002740 <HAL_GPIO_Init+0x1e4>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a3d      	ldr	r2, [pc, #244]	; (8002828 <HAL_GPIO_Init+0x2cc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_GPIO_Init+0x1e0>
 8002738:	2303      	movs	r3, #3
 800273a:	e006      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 800273c:	2304      	movs	r3, #4
 800273e:	e004      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002740:	2302      	movs	r3, #2
 8002742:	e002      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002748:	2300      	movs	r3, #0
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	f002 0203 	and.w	r2, r2, #3
 8002750:	0092      	lsls	r2, r2, #2
 8002752:	4093      	lsls	r3, r2
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800275a:	492f      	ldr	r1, [pc, #188]	; (8002818 <HAL_GPIO_Init+0x2bc>)
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_GPIO_Init+0x2d0>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	492c      	ldr	r1, [pc, #176]	; (800282c <HAL_GPIO_Init+0x2d0>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002782:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_GPIO_Init+0x2d0>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	43db      	mvns	r3, r3
 800278a:	4928      	ldr	r1, [pc, #160]	; (800282c <HAL_GPIO_Init+0x2d0>)
 800278c:	4013      	ands	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_GPIO_Init+0x2d0>)
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4922      	ldr	r1, [pc, #136]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	491e      	ldr	r1, [pc, #120]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	4918      	ldr	r1, [pc, #96]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	43db      	mvns	r3, r3
 80027da:	4914      	ldr	r1, [pc, #80]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d021      	beq.n	8002830 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	490e      	ldr	r1, [pc, #56]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60cb      	str	r3, [r1, #12]
 80027f8:	e021      	b.n	800283e <HAL_GPIO_Init+0x2e2>
 80027fa:	bf00      	nop
 80027fc:	10320000 	.word	0x10320000
 8002800:	10310000 	.word	0x10310000
 8002804:	10220000 	.word	0x10220000
 8002808:	10210000 	.word	0x10210000
 800280c:	10120000 	.word	0x10120000
 8002810:	10110000 	.word	0x10110000
 8002814:	40021000 	.word	0x40021000
 8002818:	40010000 	.word	0x40010000
 800281c:	40010800 	.word	0x40010800
 8002820:	40010c00 	.word	0x40010c00
 8002824:	40011000 	.word	0x40011000
 8002828:	40011400 	.word	0x40011400
 800282c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_GPIO_Init+0x304>)
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	43db      	mvns	r3, r3
 8002838:	4909      	ldr	r1, [pc, #36]	; (8002860 <HAL_GPIO_Init+0x304>)
 800283a:	4013      	ands	r3, r2
 800283c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	3301      	adds	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	f47f ae8e 	bne.w	8002570 <HAL_GPIO_Init+0x14>
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	372c      	adds	r7, #44	; 0x2c
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40010400 	.word	0x40010400

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028aa:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f806 	bl	80028c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40010400 	.word	0x40010400

080028c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e12b      	b.n	8002b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff f89c 	bl	8001a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800292a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800293a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800293c:	f001 fba0 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8002940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a81      	ldr	r2, [pc, #516]	; (8002b4c <HAL_I2C_Init+0x274>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d807      	bhi.n	800295c <HAL_I2C_Init+0x84>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a80      	ldr	r2, [pc, #512]	; (8002b50 <HAL_I2C_Init+0x278>)
 8002950:	4293      	cmp	r3, r2
 8002952:	bf94      	ite	ls
 8002954:	2301      	movls	r3, #1
 8002956:	2300      	movhi	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e006      	b.n	800296a <HAL_I2C_Init+0x92>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a7d      	ldr	r2, [pc, #500]	; (8002b54 <HAL_I2C_Init+0x27c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	bf94      	ite	ls
 8002964:	2301      	movls	r3, #1
 8002966:	2300      	movhi	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0e7      	b.n	8002b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a78      	ldr	r2, [pc, #480]	; (8002b58 <HAL_I2C_Init+0x280>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0c9b      	lsrs	r3, r3, #18
 800297c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a6a      	ldr	r2, [pc, #424]	; (8002b4c <HAL_I2C_Init+0x274>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d802      	bhi.n	80029ac <HAL_I2C_Init+0xd4>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3301      	adds	r3, #1
 80029aa:	e009      	b.n	80029c0 <HAL_I2C_Init+0xe8>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	4a69      	ldr	r2, [pc, #420]	; (8002b5c <HAL_I2C_Init+0x284>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	3301      	adds	r3, #1
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	495c      	ldr	r1, [pc, #368]	; (8002b4c <HAL_I2C_Init+0x274>)
 80029dc:	428b      	cmp	r3, r1
 80029de:	d819      	bhi.n	8002a14 <HAL_I2C_Init+0x13c>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e59      	subs	r1, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029f4:	400b      	ands	r3, r1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_I2C_Init+0x138>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1e59      	subs	r1, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0e:	e051      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a10:	2304      	movs	r3, #4
 8002a12:	e04f      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d111      	bne.n	8002a40 <HAL_I2C_Init+0x168>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e58      	subs	r0, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e012      	b.n	8002a66 <HAL_I2C_Init+0x18e>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1e58      	subs	r0, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	0099      	lsls	r1, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Init+0x196>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e022      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10e      	bne.n	8002a94 <HAL_I2C_Init+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e58      	subs	r0, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	440b      	add	r3, r1
 8002a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a92:	e00f      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	0099      	lsls	r1, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	6809      	ldr	r1, [r1, #0]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6911      	ldr	r1, [r2, #16]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	4311      	orrs	r1, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	000186a0 	.word	0x000186a0
 8002b50:	001e847f 	.word	0x001e847f
 8002b54:	003d08ff 	.word	0x003d08ff
 8002b58:	431bde83 	.word	0x431bde83
 8002b5c:	10624dd3 	.word	0x10624dd3

08002b60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b7a:	f7ff f967 	bl	8001e4c <HAL_GetTick>
 8002b7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	f040 80d9 	bne.w	8002d40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2319      	movs	r3, #25
 8002b94:	2201      	movs	r2, #1
 8002b96:	496d      	ldr	r1, [pc, #436]	; (8002d4c <HAL_I2C_Mem_Write+0x1ec>)
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fcc1 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0cc      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2C_Mem_Write+0x56>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e0c5      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d007      	beq.n	8002bdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2221      	movs	r2, #33	; 0x21
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2240      	movs	r2, #64	; 0x40
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a4d      	ldr	r2, [pc, #308]	; (8002d50 <HAL_I2C_Mem_Write+0x1f0>)
 8002c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c1e:	88f8      	ldrh	r0, [r7, #6]
 8002c20:	893a      	ldrh	r2, [r7, #8]
 8002c22:	8979      	ldrh	r1, [r7, #10]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 faf8 	bl	8003224 <I2C_RequestMemoryWrite>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d052      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e081      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fd42 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d107      	bne.n	8002c66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06b      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	781a      	ldrb	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_I2C_Mem_Write+0x180>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d017      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1aa      	bne.n	8002c3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fd2e 	bl	800374e <I2C_WaitOnBTFFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d107      	bne.n	8002d10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e016      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	00100002 	.word	0x00100002
 8002d50:	ffff0000 	.word	0xffff0000

08002d54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	; 0x30
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	817b      	strh	r3, [r7, #10]
 8002d66:	460b      	mov	r3, r1
 8002d68:	813b      	strh	r3, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d72:	f7ff f86b 	bl	8001e4c <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	f040 8244 	bne.w	800320e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2319      	movs	r3, #25
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4982      	ldr	r1, [pc, #520]	; (8002f98 <HAL_I2C_Mem_Read+0x244>)
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fbc5 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e237      	b.n	8003210 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_I2C_Mem_Read+0x5a>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e230      	b.n	8003210 <HAL_I2C_Mem_Read+0x4bc>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d007      	beq.n	8002dd4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2222      	movs	r2, #34	; 0x22
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a62      	ldr	r2, [pc, #392]	; (8002f9c <HAL_I2C_Mem_Read+0x248>)
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e16:	88f8      	ldrh	r0, [r7, #6]
 8002e18:	893a      	ldrh	r2, [r7, #8]
 8002e1a:	8979      	ldrh	r1, [r7, #10]
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	4603      	mov	r3, r0
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fa92 	bl	8003350 <I2C_RequestMemoryRead>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e1ec      	b.n	8003210 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d113      	bne.n	8002e66 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e1c0      	b.n	80031e8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d11e      	bne.n	8002eac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e7e:	b672      	cpsid	i
}
 8002e80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ea8:	b662      	cpsie	i
}
 8002eaa:	e035      	b.n	8002f18 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d11e      	bne.n	8002ef2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec4:	b672      	cpsid	i
}
 8002ec6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eee:	b662      	cpsie	i
}
 8002ef0:	e012      	b.n	8002f18 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f00:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f18:	e166      	b.n	80031e8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	f200 811f 	bhi.w	8003162 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d123      	bne.n	8002f74 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fc4d 	bl	80037d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e167      	b.n	8003210 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f72:	e139      	b.n	80031e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d152      	bne.n	8003022 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	2200      	movs	r2, #0
 8002f84:	4906      	ldr	r1, [pc, #24]	; (8002fa0 <HAL_I2C_Mem_Read+0x24c>)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 faca 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e13c      	b.n	8003210 <HAL_I2C_Mem_Read+0x4bc>
 8002f96:	bf00      	nop
 8002f98:	00100002 	.word	0x00100002
 8002f9c:	ffff0000 	.word	0xffff0000
 8002fa0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa4:	b672      	cpsid	i
}
 8002fa6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fea:	b662      	cpsie	i
}
 8002fec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003020:	e0e2      	b.n	80031e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	2200      	movs	r2, #0
 800302a:	497b      	ldr	r1, [pc, #492]	; (8003218 <HAL_I2C_Mem_Read+0x4c4>)
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fa77 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0e9      	b.n	8003210 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800304c:	b672      	cpsid	i
}
 800304e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003082:	4b66      	ldr	r3, [pc, #408]	; (800321c <HAL_I2C_Mem_Read+0x4c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	08db      	lsrs	r3, r3, #3
 8003088:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_I2C_Mem_Read+0x4cc>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0a1a      	lsrs	r2, r3, #8
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00da      	lsls	r2, r3, #3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	3b01      	subs	r3, #1
 80030a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d118      	bne.n	80030da <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0220 	orr.w	r2, r3, #32
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030ca:	b662      	cpsie	i
}
 80030cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e09a      	b.n	8003210 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d1d9      	bne.n	800309c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800312a:	b662      	cpsie	i
}
 800312c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003160:	e042      	b.n	80031e8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003164:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fb32 	bl	80037d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e04c      	b.n	8003210 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d118      	bne.n	80031e8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f47f ae94 	bne.w	8002f1a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3728      	adds	r7, #40	; 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	00010004 	.word	0x00010004
 800321c:	20000000 	.word	0x20000000
 8003220:	14f8b589 	.word	0x14f8b589

08003224 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	817b      	strh	r3, [r7, #10]
 8003236:	460b      	mov	r3, r1
 8003238:	813b      	strh	r3, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	2200      	movs	r2, #0
 8003256:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f960 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00d      	beq.n	8003282 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003274:	d103      	bne.n	800327e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e05f      	b.n	8003342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003282:	897b      	ldrh	r3, [r7, #10]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003290:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	492d      	ldr	r1, [pc, #180]	; (800334c <I2C_RequestMemoryWrite+0x128>)
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f998 	bl	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e04c      	b.n	8003342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c0:	6a39      	ldr	r1, [r7, #32]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fa02 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d107      	bne.n	80032e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e02b      	b.n	8003342 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f0:	893b      	ldrh	r3, [r7, #8]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	611a      	str	r2, [r3, #16]
 80032fa:	e021      	b.n	8003340 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	b29b      	uxth	r3, r3
 8003302:	b2da      	uxtb	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	6a39      	ldr	r1, [r7, #32]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f9dc 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b04      	cmp	r3, #4
 8003320:	d107      	bne.n	8003332 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003330:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e005      	b.n	8003342 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003336:	893b      	ldrh	r3, [r7, #8]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	00010002 	.word	0x00010002

08003350 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	4608      	mov	r0, r1
 800335a:	4611      	mov	r1, r2
 800335c:	461a      	mov	r2, r3
 800335e:	4603      	mov	r3, r0
 8003360:	817b      	strh	r3, [r7, #10]
 8003362:	460b      	mov	r3, r1
 8003364:	813b      	strh	r3, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003378:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003388:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	2200      	movs	r2, #0
 8003392:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f8c2 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b0:	d103      	bne.n	80033ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0aa      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033be:	897b      	ldrh	r3, [r7, #10]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	4952      	ldr	r1, [pc, #328]	; (800351c <I2C_RequestMemoryRead+0x1cc>)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f8fa 	bl	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e097      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f964 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e076      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800342c:	893b      	ldrh	r3, [r7, #8]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	611a      	str	r2, [r3, #16]
 8003436:	e021      	b.n	800347c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	b29b      	uxth	r3, r3
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	6a39      	ldr	r1, [r7, #32]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f93e 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b04      	cmp	r3, #4
 800345c:	d107      	bne.n	800346e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e050      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003472:	893b      	ldrh	r3, [r7, #8]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	6a39      	ldr	r1, [r7, #32]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f923 	bl	80036cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2b04      	cmp	r3, #4
 8003492:	d107      	bne.n	80034a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e035      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	2200      	movs	r2, #0
 80034c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f82b 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034de:	d103      	bne.n	80034e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e013      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034ec:	897b      	ldrh	r3, [r7, #10]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	6a3a      	ldr	r2, [r7, #32]
 8003500:	4906      	ldr	r1, [pc, #24]	; (800351c <I2C_RequestMemoryRead+0x1cc>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f863 	bl	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	00010002 	.word	0x00010002

08003520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	e025      	b.n	800357e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d021      	beq.n	800357e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fc87 	bl	8001e4c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d116      	bne.n	800357e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e023      	b.n	80035c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10d      	bne.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	e00c      	b.n	80035be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d0b6      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035dc:	e051      	b.n	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ec:	d123      	bne.n	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003606:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0204 	orr.w	r2, r3, #4
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e046      	b.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d021      	beq.n	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363e:	f7fe fc05 	bl	8001e4c <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d116      	bne.n	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f043 0220 	orr.w	r2, r3, #32
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e020      	b.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10c      	bne.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e00b      	b.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d18d      	bne.n	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d8:	e02d      	b.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f8ce 	bl	800387c <I2C_IsAcknowledgeFailed>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e02d      	b.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d021      	beq.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fe fbab 	bl	8001e4c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d116      	bne.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e007      	b.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d1ca      	bne.n	80036da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800375a:	e02d      	b.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f88d 	bl	800387c <I2C_IsAcknowledgeFailed>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e02d      	b.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d021      	beq.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003774:	f7fe fb6a 	bl	8001e4c <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d116      	bne.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e007      	b.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d1ca      	bne.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037dc:	e042      	b.n	8003864 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d119      	bne.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0210 	mvn.w	r2, #16
 80037f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e029      	b.n	8003874 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003820:	f7fe fb14 	bl	8001e4c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e007      	b.n	8003874 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d1b5      	bne.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003892:	d11b      	bne.n	80038cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800389c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f043 0204 	orr.w	r2, r3, #4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e272      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 8087 	beq.w	8003a06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f8:	4b92      	ldr	r3, [pc, #584]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b04      	cmp	r3, #4
 8003902:	d00c      	beq.n	800391e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003904:	4b8f      	ldr	r3, [pc, #572]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d112      	bne.n	8003936 <HAL_RCC_OscConfig+0x5e>
 8003910:	4b8c      	ldr	r3, [pc, #560]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391c:	d10b      	bne.n	8003936 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391e:	4b89      	ldr	r3, [pc, #548]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d06c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x12c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d168      	bne.n	8003a04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e24c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x76>
 8003940:	4b80      	ldr	r3, [pc, #512]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a7f      	ldr	r2, [pc, #508]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	e02e      	b.n	80039ac <HAL_RCC_OscConfig+0xd4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0x98>
 8003956:	4b7b      	ldr	r3, [pc, #492]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a7a      	ldr	r2, [pc, #488]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 800395c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b78      	ldr	r3, [pc, #480]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a77      	ldr	r2, [pc, #476]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	e01d      	b.n	80039ac <HAL_RCC_OscConfig+0xd4>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003978:	d10c      	bne.n	8003994 <HAL_RCC_OscConfig+0xbc>
 800397a:	4b72      	ldr	r3, [pc, #456]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a71      	ldr	r2, [pc, #452]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b6f      	ldr	r3, [pc, #444]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6e      	ldr	r2, [pc, #440]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0xd4>
 8003994:	4b6b      	ldr	r3, [pc, #428]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a6a      	ldr	r2, [pc, #424]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 800399a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b68      	ldr	r3, [pc, #416]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a67      	ldr	r2, [pc, #412]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fe fa4a 	bl	8001e4c <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fe fa46 	bl	8001e4c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e200      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	4b5d      	ldr	r3, [pc, #372]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0xe4>
 80039da:	e014      	b.n	8003a06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fe fa36 	bl	8001e4c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fe fa32 	bl	8001e4c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1ec      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f6:	4b53      	ldr	r3, [pc, #332]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x10c>
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d063      	beq.n	8003ada <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a12:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a1e:	4b49      	ldr	r3, [pc, #292]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d11c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x18c>
 8003a2a:	4b46      	ldr	r3, [pc, #280]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d116      	bne.n	8003a64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a36:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_RCC_OscConfig+0x176>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e1c0      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4e:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4939      	ldr	r1, [pc, #228]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a62:	e03a      	b.n	8003ada <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d020      	beq.n	8003aae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a6c:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a72:	f7fe f9eb 	bl	8001e4c <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a7a:	f7fe f9e7 	bl	8001e4c <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e1a1      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4927      	ldr	r1, [pc, #156]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
 8003aac:	e015      	b.n	8003ada <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aae:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fe f9ca 	bl	8001e4c <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abc:	f7fe f9c6 	bl	8001e4c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e180      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d03a      	beq.n	8003b5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d019      	beq.n	8003b22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aee:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <HAL_RCC_OscConfig+0x274>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af4:	f7fe f9aa 	bl	8001e4c <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afc:	f7fe f9a6 	bl	8001e4c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e160      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f000 fb08 	bl	8004130 <RCC_Delay>
 8003b20:	e01c      	b.n	8003b5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_RCC_OscConfig+0x274>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b28:	f7fe f990 	bl	8001e4c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2e:	e00f      	b.n	8003b50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b30:	f7fe f98c 	bl	8001e4c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d908      	bls.n	8003b50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e146      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	42420000 	.word	0x42420000
 8003b4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b50:	4b92      	ldr	r3, [pc, #584]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e9      	bne.n	8003b30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80a6 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6e:	4b8b      	ldr	r3, [pc, #556]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10d      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7a:	4b88      	ldr	r3, [pc, #544]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4a87      	ldr	r2, [pc, #540]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	61d3      	str	r3, [r2, #28]
 8003b86:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b82      	ldr	r3, [pc, #520]	; (8003da0 <HAL_RCC_OscConfig+0x4c8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b7f      	ldr	r3, [pc, #508]	; (8003da0 <HAL_RCC_OscConfig+0x4c8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7e      	ldr	r2, [pc, #504]	; (8003da0 <HAL_RCC_OscConfig+0x4c8>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fe f94d 	bl	8001e4c <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fe f949 	bl	8001e4c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b64      	cmp	r3, #100	; 0x64
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e103      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b75      	ldr	r3, [pc, #468]	; (8003da0 <HAL_RCC_OscConfig+0x4c8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x312>
 8003bdc:	4b6f      	ldr	r3, [pc, #444]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4a6e      	ldr	r2, [pc, #440]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6213      	str	r3, [r2, #32]
 8003be8:	e02d      	b.n	8003c46 <HAL_RCC_OscConfig+0x36e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x334>
 8003bf2:	4b6a      	ldr	r3, [pc, #424]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4a69      	ldr	r2, [pc, #420]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	6213      	str	r3, [r2, #32]
 8003bfe:	4b67      	ldr	r3, [pc, #412]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4a66      	ldr	r2, [pc, #408]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	f023 0304 	bic.w	r3, r3, #4
 8003c08:	6213      	str	r3, [r2, #32]
 8003c0a:	e01c      	b.n	8003c46 <HAL_RCC_OscConfig+0x36e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d10c      	bne.n	8003c2e <HAL_RCC_OscConfig+0x356>
 8003c14:	4b61      	ldr	r3, [pc, #388]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4a60      	ldr	r2, [pc, #384]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	6213      	str	r3, [r2, #32]
 8003c20:	4b5e      	ldr	r3, [pc, #376]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4a5d      	ldr	r2, [pc, #372]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6213      	str	r3, [r2, #32]
 8003c2c:	e00b      	b.n	8003c46 <HAL_RCC_OscConfig+0x36e>
 8003c2e:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4a5a      	ldr	r2, [pc, #360]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	6213      	str	r3, [r2, #32]
 8003c3a:	4b58      	ldr	r3, [pc, #352]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4a57      	ldr	r2, [pc, #348]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d015      	beq.n	8003c7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4e:	f7fe f8fd 	bl	8001e4c <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	e00a      	b.n	8003c6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f7fe f8f9 	bl	8001e4c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e0b1      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6c:	4b4b      	ldr	r3, [pc, #300]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0ee      	beq.n	8003c56 <HAL_RCC_OscConfig+0x37e>
 8003c78:	e014      	b.n	8003ca4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7a:	f7fe f8e7 	bl	8001e4c <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fe f8e3 	bl	8001e4c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e09b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c98:	4b40      	ldr	r3, [pc, #256]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ee      	bne.n	8003c82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d105      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003caa:	4b3c      	ldr	r3, [pc, #240]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4a3b      	ldr	r2, [pc, #236]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8087 	beq.w	8003dce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc0:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d061      	beq.n	8003d90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d146      	bne.n	8003d62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd4:	4b33      	ldr	r3, [pc, #204]	; (8003da4 <HAL_RCC_OscConfig+0x4cc>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cda:	f7fe f8b7 	bl	8001e4c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7fe f8b3 	bl	8001e4c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e06d      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf4:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d108      	bne.n	8003d1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d0a:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4921      	ldr	r1, [pc, #132]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a19      	ldr	r1, [r3, #32]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	491b      	ldr	r1, [pc, #108]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <HAL_RCC_OscConfig+0x4cc>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fe f887 	bl	8001e4c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fe f883 	bl	8001e4c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e03d      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x46a>
 8003d60:	e035      	b.n	8003dce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <HAL_RCC_OscConfig+0x4cc>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fe f870 	bl	8001e4c <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fe f86c 	bl	8001e4c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e026      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x498>
 8003d8e:	e01e      	b.n	8003dce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e019      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40007000 	.word	0x40007000
 8003da4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_OscConfig+0x500>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000

08003ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0d0      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df0:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d910      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b67      	ldr	r3, [pc, #412]	; (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 0207 	bic.w	r2, r3, #7
 8003e06:	4965      	ldr	r1, [pc, #404]	; (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b8      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e38:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e50:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	494d      	ldr	r1, [pc, #308]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d040      	beq.n	8003efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d115      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e073      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eaa:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06b      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4936      	ldr	r1, [pc, #216]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ecc:	f7fd ffbe 	bl	8001e4c <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed4:	f7fd ffba 	bl	8001e4c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e053      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 020c 	and.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1eb      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d210      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 0207 	bic.w	r2, r3, #7
 8003f12:	4922      	ldr	r1, [pc, #136]	; (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e032      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4916      	ldr	r1, [pc, #88]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f6a:	f000 f821 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490a      	ldr	r1, [pc, #40]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1d0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd fe5c 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40022000 	.word	0x40022000
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	08008954 	.word	0x08008954
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	20000004 	.word	0x20000004

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	b490      	push	{r4, r7}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <HAL_RCC_GetSysClockFreq+0xac>)
 8003fb8:	1d3c      	adds	r4, r7, #4
 8003fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fc0:	f240 2301 	movw	r3, #513	; 0x201
 8003fc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fda:	4b21      	ldr	r3, [pc, #132]	; (8004060 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d002      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x46>
 8003fee:	e02b      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ff2:	623b      	str	r3, [r7, #32]
      break;
 8003ff4:	e02b      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	0c9b      	lsrs	r3, r3, #18
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	3328      	adds	r3, #40	; 0x28
 8004000:	443b      	add	r3, r7
 8004002:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004006:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d012      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004012:	4b13      	ldr	r3, [pc, #76]	; (8004060 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	0c5b      	lsrs	r3, r3, #17
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	3328      	adds	r3, #40	; 0x28
 800401e:	443b      	add	r3, r7
 8004020:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004024:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <HAL_RCC_GetSysClockFreq+0xb4>)
 800402a:	fb03 f202 	mul.w	r2, r3, r2
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
 8004036:	e004      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <HAL_RCC_GetSysClockFreq+0xb8>)
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	623b      	str	r3, [r7, #32]
      break;
 8004046:	e002      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_GetSysClockFreq+0xb4>)
 800404a:	623b      	str	r3, [r7, #32]
      break;
 800404c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404e:	6a3b      	ldr	r3, [r7, #32]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	; 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bc90      	pop	{r4, r7}
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	0800893c 	.word	0x0800893c
 8004060:	40021000 	.word	0x40021000
 8004064:	007a1200 	.word	0x007a1200
 8004068:	003d0900 	.word	0x003d0900

0800406c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004070:	4b02      	ldr	r3, [pc, #8]	; (800407c <HAL_RCC_GetHCLKFreq+0x10>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	20000000 	.word	0x20000000

08004080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004084:	f7ff fff2 	bl	800406c <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	08008964 	.word	0x08008964

080040a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ac:	f7ff ffde 	bl	800406c <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	0adb      	lsrs	r3, r3, #11
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000
 80040cc:	08008964 	.word	0x08008964

080040d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	220f      	movs	r2, #15
 80040de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_RCC_GetClockConfig+0x58>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 0203 	and.w	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_RCC_GetClockConfig+0x58>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_GetClockConfig+0x58>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <HAL_RCC_GetClockConfig+0x58>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0207 	and.w	r2, r3, #7
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40021000 	.word	0x40021000
 800412c:	40022000 	.word	0x40022000

08004130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <RCC_Delay+0x34>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <RCC_Delay+0x38>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0a5b      	lsrs	r3, r3, #9
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800414c:	bf00      	nop
  }
  while (Delay --);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1e5a      	subs	r2, r3, #1
 8004152:	60fa      	str	r2, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f9      	bne.n	800414c <RCC_Delay+0x1c>
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20000000 	.word	0x20000000
 8004168:	10624dd3 	.word	0x10624dd3

0800416c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e076      	b.n	800426c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418e:	d009      	beq.n	80041a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	61da      	str	r2, [r3, #28]
 8004196:	e005      	b.n	80041a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fc7a 	bl	8001ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	ea42 0103 	orr.w	r1, r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	0c1a      	lsrs	r2, r3, #16
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f002 0204 	and.w	r2, r2, #4
 800424a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800425a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	4613      	mov	r3, r2
 8004282:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_SPI_Transmit+0x22>
 8004292:	2302      	movs	r3, #2
 8004294:	e126      	b.n	80044e4 <HAL_SPI_Transmit+0x270>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800429e:	f7fd fdd5 	bl	8001e4c <HAL_GetTick>
 80042a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d002      	beq.n	80042ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
 80042b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b8:	e10b      	b.n	80044d2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_Transmit+0x52>
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042ca:	e102      	b.n	80044d2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2203      	movs	r2, #3
 80042d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	88fa      	ldrh	r2, [r7, #6]
 80042ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004312:	d10f      	bne.n	8004334 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004322:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004332:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d007      	beq.n	8004352 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435a:	d14b      	bne.n	80043f4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_SPI_Transmit+0xf6>
 8004364:	8afb      	ldrh	r3, [r7, #22]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d13e      	bne.n	80043e8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	881a      	ldrh	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	1c9a      	adds	r2, r3, #2
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800438e:	e02b      	b.n	80043e8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b02      	cmp	r3, #2
 800439c:	d112      	bne.n	80043c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80043c2:	e011      	b.n	80043e8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c4:	f7fd fd42 	bl	8001e4c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d803      	bhi.n	80043dc <HAL_SPI_Transmit+0x168>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d102      	bne.n	80043e2 <HAL_SPI_Transmit+0x16e>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043e6:	e074      	b.n	80044d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ce      	bne.n	8004390 <HAL_SPI_Transmit+0x11c>
 80043f2:	e04c      	b.n	800448e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_Transmit+0x18e>
 80043fc:	8afb      	ldrh	r3, [r7, #22]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d140      	bne.n	8004484 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004428:	e02c      	b.n	8004484 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d113      	bne.n	8004460 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	7812      	ldrb	r2, [r2, #0]
 8004444:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	86da      	strh	r2, [r3, #54]	; 0x36
 800445e:	e011      	b.n	8004484 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004460:	f7fd fcf4 	bl	8001e4c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d803      	bhi.n	8004478 <HAL_SPI_Transmit+0x204>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d102      	bne.n	800447e <HAL_SPI_Transmit+0x20a>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004482:	e026      	b.n	80044d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1cd      	bne.n	800442a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fbb8 	bl	8004c08 <SPI_EndRxTxTransaction>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e000      	b.n	80044d2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80044d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004508:	d112      	bne.n	8004530 <HAL_SPI_Receive+0x44>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10e      	bne.n	8004530 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2204      	movs	r2, #4
 8004516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f8f1 	bl	800470e <HAL_SPI_TransmitReceive>
 800452c:	4603      	mov	r3, r0
 800452e:	e0ea      	b.n	8004706 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_SPI_Receive+0x52>
 800453a:	2302      	movs	r3, #2
 800453c:	e0e3      	b.n	8004706 <HAL_SPI_Receive+0x21a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004546:	f7fd fc81 	bl	8001e4c <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d002      	beq.n	800455e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004558:	2302      	movs	r3, #2
 800455a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800455c:	e0ca      	b.n	80046f4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_SPI_Receive+0x7e>
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800456e:	e0c1      	b.n	80046f4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2204      	movs	r2, #4
 8004574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b6:	d10f      	bne.n	80045d8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d007      	beq.n	80045f6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d162      	bne.n	80046c4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045fe:	e02e      	b.n	800465e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d115      	bne.n	800463a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f103 020c 	add.w	r2, r3, #12
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	7812      	ldrb	r2, [r2, #0]
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004638:	e011      	b.n	800465e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463a:	f7fd fc07 	bl	8001e4c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d803      	bhi.n	8004652 <HAL_SPI_Receive+0x166>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d102      	bne.n	8004658 <HAL_SPI_Receive+0x16c>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800465c:	e04a      	b.n	80046f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1cb      	bne.n	8004600 <HAL_SPI_Receive+0x114>
 8004668:	e031      	b.n	80046ce <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d113      	bne.n	80046a0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	b292      	uxth	r2, r2
 8004684:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800469e:	e011      	b.n	80046c4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a0:	f7fd fbd4 	bl	8001e4c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d803      	bhi.n	80046b8 <HAL_SPI_Receive+0x1cc>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d102      	bne.n	80046be <HAL_SPI_Receive+0x1d2>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d102      	bne.n	80046c4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046c2:	e017      	b.n	80046f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1cd      	bne.n	800466a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fa46 	bl	8004b64 <SPI_EndRxTransaction>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
 80046f0:	e000      	b.n	80046f4 <HAL_SPI_Receive+0x208>
  }

error :
 80046f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004704:	7dfb      	ldrb	r3, [r7, #23]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b08c      	sub	sp, #48	; 0x30
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800471c:	2301      	movs	r3, #1
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x26>
 8004730:	2302      	movs	r3, #2
 8004732:	e18a      	b.n	8004a4a <HAL_SPI_TransmitReceive+0x33c>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800473c:	f7fd fb86 	bl	8001e4c <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004756:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800475a:	2b01      	cmp	r3, #1
 800475c:	d00f      	beq.n	800477e <HAL_SPI_TransmitReceive+0x70>
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004764:	d107      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x68>
 800476e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004772:	2b04      	cmp	r3, #4
 8004774:	d003      	beq.n	800477e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004776:	2302      	movs	r3, #2
 8004778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800477c:	e15b      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x82>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x82>
 800478a:	887b      	ldrh	r3, [r7, #2]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004796:	e14e      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d003      	beq.n	80047ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2205      	movs	r2, #5
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	887a      	ldrh	r2, [r7, #2]
 80047c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	887a      	ldrh	r2, [r7, #2]
 80047ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d007      	beq.n	8004800 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004808:	d178      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_SPI_TransmitReceive+0x10a>
 8004812:	8b7b      	ldrh	r3, [r7, #26]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d166      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	1c9a      	adds	r2, r3, #2
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483c:	e053      	b.n	80048e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d11b      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x176>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x176>
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d113      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	1c9a      	adds	r2, r3, #2
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d119      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x1b8>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d014      	beq.n	80048c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	b292      	uxth	r2, r2
 80048a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	1c9a      	adds	r2, r3, #2
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c2:	2301      	movs	r3, #1
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048c6:	f7fd fac1 	bl	8001e4c <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d807      	bhi.n	80048e6 <HAL_SPI_TransmitReceive+0x1d8>
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d003      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048e4:	e0a7      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1a6      	bne.n	800483e <HAL_SPI_TransmitReceive+0x130>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1a1      	bne.n	800483e <HAL_SPI_TransmitReceive+0x130>
 80048fa:	e07c      	b.n	80049f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_SPI_TransmitReceive+0x1fc>
 8004904:	8b7b      	ldrh	r3, [r7, #26]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d16b      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	330c      	adds	r3, #12
 8004914:	7812      	ldrb	r2, [r2, #0]
 8004916:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004930:	e057      	b.n	80049e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d11c      	bne.n	800497a <HAL_SPI_TransmitReceive+0x26c>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d017      	beq.n	800497a <HAL_SPI_TransmitReceive+0x26c>
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d114      	bne.n	800497a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d119      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x2ae>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049b8:	2301      	movs	r3, #1
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049bc:	f7fd fa46 	bl	8001e4c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d803      	bhi.n	80049d4 <HAL_SPI_TransmitReceive+0x2c6>
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d102      	bne.n	80049da <HAL_SPI_TransmitReceive+0x2cc>
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049e0:	e029      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1a2      	bne.n	8004932 <HAL_SPI_TransmitReceive+0x224>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d19d      	bne.n	8004932 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f904 	bl	8004c08 <SPI_EndRxTxTransaction>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a12:	e010      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10b      	bne.n	8004a34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	e000      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3730      	adds	r7, #48	; 0x30
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a64:	f7fd f9f2 	bl	8001e4c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	4413      	add	r3, r2
 8004a72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a74:	f7fd f9ea 	bl	8001e4c <HAL_GetTick>
 8004a78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	015b      	lsls	r3, r3, #5
 8004a80:	0d1b      	lsrs	r3, r3, #20
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	fb02 f303 	mul.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a8a:	e054      	b.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d050      	beq.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a94:	f7fd f9da 	bl	8001e4c <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d902      	bls.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d13d      	bne.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ab8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac2:	d111      	bne.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004acc:	d004      	beq.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad6:	d107      	bne.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af0:	d10f      	bne.n	8004b12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e017      	b.n	8004b56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	bf0c      	ite	eq
 8004b46:	2301      	moveq	r3, #1
 8004b48:	2300      	movne	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d19b      	bne.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000000 	.word	0x20000000

08004b64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b78:	d111      	bne.n	8004b9e <SPI_EndRxTransaction+0x3a>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b82:	d004      	beq.n	8004b8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8c:	d107      	bne.n	8004b9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba6:	d117      	bne.n	8004bd8 <SPI_EndRxTransaction+0x74>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb0:	d112      	bne.n	8004bd8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2101      	movs	r1, #1
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff ff49 	bl	8004a54 <SPI_WaitFlagStateUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01a      	beq.n	8004bfe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	f043 0220 	orr.w	r2, r3, #32
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e013      	b.n	8004c00 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2200      	movs	r2, #0
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7ff ff36 	bl	8004a54 <SPI_WaitFlagStateUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e000      	b.n	8004c00 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2180      	movs	r1, #128	; 0x80
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff ff18 	bl	8004a54 <SPI_WaitFlagStateUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e000      	b.n	8004c3c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e041      	b.n	8004cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f839 	bl	8004ce2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f000 f9b4 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d001      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e03a      	b.n	8004d82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <HAL_TIM_Base_Start_IT+0x98>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x58>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d009      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x58>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a14      	ldr	r2, [pc, #80]	; (8004d90 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x58>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a13      	ldr	r2, [pc, #76]	; (8004d94 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d111      	bne.n	8004d70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b06      	cmp	r3, #6
 8004d5c:	d010      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0201 	orr.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6e:	e007      	b.n	8004d80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800

08004d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d122      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d11b      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0202 	mvn.w	r2, #2
 8004dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f8ed 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f8e0 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8ef 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d122      	bne.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d11b      	bne.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0204 	mvn.w	r2, #4
 8004e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f8c3 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8b6 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f8c5 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d122      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d11b      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0208 	mvn.w	r2, #8
 8004e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2204      	movs	r2, #4
 8004e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f899 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f88c 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f89b 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d122      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0210 	mvn.w	r2, #16
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f86f 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f862 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f871 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d10e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0201 	mvn.w	r2, #1
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc fd40 	bl	800199c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b80      	cmp	r3, #128	; 0x80
 8004f28:	d10e      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d107      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8bf 	bl	80050c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d10e      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d107      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f835 	bl	8004fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d10e      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d107      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0220 	mvn.w	r2, #32
 8004f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f88a 	bl	80050b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a29      	ldr	r2, [pc, #164]	; (80050a8 <TIM_Base_SetConfig+0xb8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00b      	beq.n	8005020 <TIM_Base_SetConfig+0x30>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d007      	beq.n	8005020 <TIM_Base_SetConfig+0x30>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a26      	ldr	r2, [pc, #152]	; (80050ac <TIM_Base_SetConfig+0xbc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_Base_SetConfig+0x30>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a25      	ldr	r2, [pc, #148]	; (80050b0 <TIM_Base_SetConfig+0xc0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d108      	bne.n	8005032 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <TIM_Base_SetConfig+0xb8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00b      	beq.n	8005052 <TIM_Base_SetConfig+0x62>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005040:	d007      	beq.n	8005052 <TIM_Base_SetConfig+0x62>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <TIM_Base_SetConfig+0xbc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_Base_SetConfig+0x62>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <TIM_Base_SetConfig+0xc0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d108      	bne.n	8005064 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a07      	ldr	r2, [pc, #28]	; (80050a8 <TIM_Base_SetConfig+0xb8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d103      	bne.n	8005098 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	615a      	str	r2, [r3, #20]
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800

080050b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e03f      	b.n	800516a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc fd24 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2224      	movs	r2, #36	; 0x24
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800511a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fd9b 	bl	8005c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b08a      	sub	sp, #40	; 0x28
 8005176:	af02      	add	r7, sp, #8
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b20      	cmp	r3, #32
 8005190:	d17c      	bne.n	800528c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_UART_Transmit+0x2c>
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e075      	b.n	800528e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_UART_Transmit+0x3e>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e06e      	b.n	800528e <HAL_UART_Transmit+0x11c>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2221      	movs	r2, #33	; 0x21
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051c6:	f7fc fe41 	bl	8001e4c <HAL_GetTick>
 80051ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	88fa      	ldrh	r2, [r7, #6]
 80051d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e0:	d108      	bne.n	80051f4 <HAL_UART_Transmit+0x82>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e003      	b.n	80051fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005204:	e02a      	b.n	800525c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	2180      	movs	r1, #128	; 0x80
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fb0d 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e036      	b.n	800528e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10b      	bne.n	800523e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005234:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	3302      	adds	r3, #2
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	e007      	b.n	800524e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	781a      	ldrb	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3301      	adds	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1cf      	bne.n	8005206 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	2140      	movs	r1, #64	; 0x40
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fadd 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e006      	b.n	800528e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b086      	sub	sp, #24
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	4613      	mov	r3, r2
 80052a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d13c      	bne.n	800532a <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e035      	b.n	800532c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e02e      	b.n	800532c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80052dc:	88fb      	ldrh	r3, [r7, #6]
 80052de:	461a      	mov	r2, r3
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 faee 	bl	80058c4 <UART_Start_Receive_DMA>
 80052e8:	4603      	mov	r3, r0
 80052ea:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d119      	bne.n	8005326 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d113      	bne.n	8005322 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0210 	orr.w	r2, r2, #16
 800531e:	60da      	str	r2, [r3, #12]
 8005320:	e001      	b.n	8005326 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
 8005328:	e000      	b.n	800532c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800532a:	2302      	movs	r3, #2
  }
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005354:	2300      	movs	r3, #0
 8005356:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10d      	bne.n	8005386 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_UART_IRQHandler+0x52>
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fbc0 	bl	8005b04 <UART_Receive_IT>
      return;
 8005384:	e17b      	b.n	800567e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80b1 	beq.w	80054f0 <HAL_UART_IRQHandler+0x1bc>
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <HAL_UART_IRQHandler+0x70>
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80a6 	beq.w	80054f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_UART_IRQHandler+0x90>
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	f043 0201 	orr.w	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_UART_IRQHandler+0xb0>
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	f043 0202 	orr.w	r2, r3, #2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_UART_IRQHandler+0xd0>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f043 0204 	orr.w	r2, r3, #4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00f      	beq.n	800542e <HAL_UART_IRQHandler+0xfa>
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <HAL_UART_IRQHandler+0xee>
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f043 0208 	orr.w	r2, r3, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 811e 	beq.w	8005674 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_UART_IRQHandler+0x11e>
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fb59 	bl	8005b04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <HAL_UART_IRQHandler+0x146>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d031      	beq.n	80054de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa9b 	bl	80059b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d023      	beq.n	80054d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695a      	ldr	r2, [r3, #20]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d013      	beq.n	80054ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	4a76      	ldr	r2, [pc, #472]	; (8005684 <HAL_UART_IRQHandler+0x350>)
 80054ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fc fea8 	bl	8002208 <HAL_DMA_Abort_IT>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054c8:	4610      	mov	r0, r2
 80054ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	e00e      	b.n	80054ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8f5 	bl	80056be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	e00a      	b.n	80054ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8f1 	bl	80056be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	e006      	b.n	80054ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f8ed 	bl	80056be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054ea:	e0c3      	b.n	8005674 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	bf00      	nop
    return;
 80054ee:	e0c1      	b.n	8005674 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	f040 80a1 	bne.w	800563c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 809b 	beq.w	800563c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8095 	beq.w	800563c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d04e      	beq.n	80055d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005540:	8a3b      	ldrh	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 8098 	beq.w	8005678 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800554c:	8a3a      	ldrh	r2, [r7, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	f080 8092 	bcs.w	8005678 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8a3a      	ldrh	r2, [r7, #16]
 8005558:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	2b20      	cmp	r3, #32
 8005562:	d02b      	beq.n	80055bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005572:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695a      	ldr	r2, [r3, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005592:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0210 	bic.w	r2, r2, #16
 80055b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fc fdeb 	bl	8002192 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fc f8ed 	bl	80017ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80055d2:	e051      	b.n	8005678 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055dc:	b29b      	uxth	r3, r3
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d047      	beq.n	800567c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80055ec:	8a7b      	ldrh	r3, [r7, #18]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d044      	beq.n	800567c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005600:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0210 	bic.w	r2, r2, #16
 800562e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005630:	8a7b      	ldrh	r3, [r7, #18]
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fc f8b9 	bl	80017ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800563a:	e01f      	b.n	800567c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_UART_IRQHandler+0x324>
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9f0 	bl	8005a36 <UART_Transmit_IT>
    return;
 8005656:	e012      	b.n	800567e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <HAL_UART_IRQHandler+0x34a>
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fa31 	bl	8005ad4 <UART_EndTransmit_IT>
    return;
 8005672:	e004      	b.n	800567e <HAL_UART_IRQHandler+0x34a>
    return;
 8005674:	bf00      	nop
 8005676:	e002      	b.n	800567e <HAL_UART_IRQHandler+0x34a>
      return;
 8005678:	bf00      	nop
 800567a:	e000      	b.n	800567e <HAL_UART_IRQHandler+0x34a>
      return;
 800567c:	bf00      	nop
  }
}
 800567e:	3728      	adds	r7, #40	; 0x28
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	08005a0f 	.word	0x08005a0f

08005688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d12a      	bne.n	8005742 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005700:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005720:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	2b01      	cmp	r3, #1
 8005730:	d107      	bne.n	8005742 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0210 	bic.w	r2, r2, #16
 8005740:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	2b01      	cmp	r3, #1
 8005748:	d106      	bne.n	8005758 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800574e:	4619      	mov	r1, r3
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7fc f82b 	bl	80017ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005756:	e002      	b.n	800575e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff ff9e 	bl	800569a <HAL_UART_RxCpltCallback>
}
 800575e:	bf00      	nop
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	2b01      	cmp	r3, #1
 800577a:	d108      	bne.n	800578e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	b29b      	uxth	r3, r3
 8005784:	4619      	mov	r1, r3
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f7fc f810 	bl	80017ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800578c:	e002      	b.n	8005794 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7ff ff8c 	bl	80056ac <HAL_UART_RxHalfCpltCallback>
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b21      	cmp	r3, #33	; 0x21
 80057ce:	d108      	bne.n	80057e2 <UART_DMAError+0x46>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80057dc:	68b8      	ldr	r0, [r7, #8]
 80057de:	f000 f8d5 	bl	800598c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b22      	cmp	r3, #34	; 0x22
 8005802:	d108      	bne.n	8005816 <UART_DMAError+0x7a>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005810:	68b8      	ldr	r0, [r7, #8]
 8005812:	f000 f8d0 	bl	80059b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0210 	orr.w	r2, r3, #16
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005822:	68b8      	ldr	r0, [r7, #8]
 8005824:	f7ff ff4b 	bl	80056be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005840:	e02c      	b.n	800589c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d028      	beq.n	800589c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <UART_WaitOnFlagUntilTimeout+0x30>
 8005850:	f7fc fafc 	bl	8001e4c <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	429a      	cmp	r2, r3
 800585e:	d21d      	bcs.n	800589c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800586e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e00f      	b.n	80058bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4013      	ands	r3, r2
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d0c3      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	88fa      	ldrh	r2, [r7, #6]
 80058dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2222      	movs	r2, #34	; 0x22
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	4a23      	ldr	r2, [pc, #140]	; (8005980 <UART_Start_Receive_DMA+0xbc>)
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <UART_Start_Receive_DMA+0xc0>)
 80058fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	4a21      	ldr	r2, [pc, #132]	; (8005988 <UART_Start_Receive_DMA+0xc4>)
 8005902:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	2200      	movs	r2, #0
 800590a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800590c:	f107 0308 	add.w	r3, r7, #8
 8005910:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3304      	adds	r3, #4
 800591c:	4619      	mov	r1, r3
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	f7fc fbd6 	bl	80020d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005954:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005974:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	080056d1 	.word	0x080056d1
 8005984:	08005767 	.word	0x08005767
 8005988:	0800579d 	.word	0x0800579d

0800598c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80059a2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0201 	bic.w	r2, r2, #1
 80059dc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0210 	bic.w	r2, r2, #16
 80059f4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff fe48 	bl	80056be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b21      	cmp	r3, #33	; 0x21
 8005a48:	d13e      	bne.n	8005ac8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d114      	bne.n	8005a7e <UART_Transmit_IT+0x48>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d110      	bne.n	8005a7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	1c9a      	adds	r2, r3, #2
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]
 8005a7c:	e008      	b.n	8005a90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	1c59      	adds	r1, r3, #1
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6211      	str	r1, [r2, #32]
 8005a88:	781a      	ldrb	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10f      	bne.n	8005ac4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ab2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fdc7 	bl	8005688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b22      	cmp	r3, #34	; 0x22
 8005b16:	f040 8099 	bne.w	8005c4c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	d117      	bne.n	8005b54 <UART_Receive_IT+0x50>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d113      	bne.n	8005b54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	629a      	str	r2, [r3, #40]	; 0x28
 8005b52:	e026      	b.n	8005ba2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b66:	d007      	beq.n	8005b78 <UART_Receive_IT+0x74>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <UART_Receive_IT+0x82>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	e008      	b.n	8005b98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d148      	bne.n	8005c48 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0220 	bic.w	r2, r2, #32
 8005bc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d123      	bne.n	8005c3e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0210 	bic.w	r2, r2, #16
 8005c0a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d10a      	bne.n	8005c30 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fb fdb8 	bl	80017ac <HAL_UARTEx_RxEventCallback>
 8005c3c:	e002      	b.n	8005c44 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff fd2b 	bl	800569a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e002      	b.n	8005c4e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c92:	f023 030c 	bic.w	r3, r3, #12
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <UART_SetConfig+0x114>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d103      	bne.n	8005cc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005cc0:	f7fe f9f2 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	e002      	b.n	8005cce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fe f9da 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8005ccc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009a      	lsls	r2, r3, #2
 8005cd8:	441a      	add	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <UART_SetConfig+0x118>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	0119      	lsls	r1, r3, #4
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009a      	lsls	r2, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d04:	4b1a      	ldr	r3, [pc, #104]	; (8005d70 <UART_SetConfig+0x118>)
 8005d06:	fba3 0302 	umull	r0, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2064      	movs	r0, #100	; 0x64
 8005d0e:	fb00 f303 	mul.w	r3, r0, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	3332      	adds	r3, #50	; 0x32
 8005d18:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <UART_SetConfig+0x118>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d24:	4419      	add	r1, r3
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009a      	lsls	r2, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <UART_SetConfig+0x118>)
 8005d3e:	fba3 0302 	umull	r0, r3, r3, r2
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	2064      	movs	r0, #100	; 0x64
 8005d46:	fb00 f303 	mul.w	r3, r0, r3
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	3332      	adds	r3, #50	; 0x32
 8005d50:	4a07      	ldr	r2, [pc, #28]	; (8005d70 <UART_SetConfig+0x118>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	f003 020f 	and.w	r2, r3, #15
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	440a      	add	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40013800 	.word	0x40013800
 8005d70:	51eb851f 	.word	0x51eb851f

08005d74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d86:	2b84      	cmp	r3, #132	; 0x84
 8005d88:	d005      	beq.n	8005d96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	3303      	adds	r3, #3
 8005d94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da8:	f3ef 8305 	mrs	r3, IPSR
 8005dac:	607b      	str	r3, [r7, #4]
  return(result);
 8005dae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	bf14      	ite	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	2300      	moveq	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005dc8:	f001 fa0c 	bl	80071e4 <vTaskStartScheduler>
  
  return osOK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd4:	b089      	sub	sp, #36	; 0x24
 8005dd6:	af04      	add	r7, sp, #16
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d020      	beq.n	8005e26 <osThreadCreate+0x54>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01c      	beq.n	8005e26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685c      	ldr	r4, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681d      	ldr	r5, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691e      	ldr	r6, [r3, #16]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff ffb8 	bl	8005d74 <makeFreeRtosPriority>
 8005e04:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e0e:	9202      	str	r2, [sp, #8]
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	9100      	str	r1, [sp, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4632      	mov	r2, r6
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f001 f823 	bl	8006e66 <xTaskCreateStatic>
 8005e20:	4603      	mov	r3, r0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e01c      	b.n	8005e60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685c      	ldr	r4, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e32:	b29e      	uxth	r6, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff ff9a 	bl	8005d74 <makeFreeRtosPriority>
 8005e40:	4602      	mov	r2, r0
 8005e42:	f107 030c 	add.w	r3, r7, #12
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	9200      	str	r2, [sp, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	4629      	mov	r1, r5
 8005e50:	4620      	mov	r0, r4
 8005e52:	f001 f864 	bl	8006f1e <xTaskCreate>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d001      	beq.n	8005e60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e000      	b.n	8005e62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e60:	68fb      	ldr	r3, [r7, #12]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <osDelay+0x16>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	e000      	b.n	8005e82 <osDelay+0x18>
 8005e80:	2301      	movs	r3, #1
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f97a 	bl	800717c <vTaskDelay>
  
  return osOK;
 8005e88:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b086      	sub	sp, #24
 8005e96:	af02      	add	r7, sp, #8
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00f      	beq.n	8005ec4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d10a      	bne.n	8005ec0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2203      	movs	r2, #3
 8005eb0:	9200      	str	r2, [sp, #0]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	f000 f9e2 	bl	8006280 <xQueueGenericCreateStatic>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	e016      	b.n	8005eee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e014      	b.n	8005eee <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d110      	bne.n	8005eec <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005eca:	2203      	movs	r2, #3
 8005ecc:	2100      	movs	r1, #0
 8005ece:	2001      	movs	r0, #1
 8005ed0:	f000 fa4d 	bl	800636e <xQueueGenericCreate>
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <osSemaphoreCreate+0x56>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 faa0 	bl	8006428 <xQueueGenericSend>
      return sema;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	e000      	b.n	8005eee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005eec:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	e03a      	b.n	8005f86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d103      	bne.n	8005f24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e009      	b.n	8005f38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d006      	beq.n	8005f38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <osSemaphoreWait+0x40>
      ticks = 1;
 8005f34:	2301      	movs	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005f38:	f7ff ff33 	bl	8005da2 <inHandlerMode>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d017      	beq.n	8005f72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005f42:	f107 0308 	add.w	r3, r7, #8
 8005f46:	461a      	mov	r2, r3
 8005f48:	2100      	movs	r1, #0
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fde4 	bl	8006b18 <xQueueReceiveFromISR>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d001      	beq.n	8005f5a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005f56:	23ff      	movs	r3, #255	; 0xff
 8005f58:	e015      	b.n	8005f86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d011      	beq.n	8005f84 <osSemaphoreWait+0x8c>
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <osSemaphoreWait+0x98>)
 8005f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	e008      	b.n	8005f84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fcc3 	bl	8006900 <xQueueSemaphoreTake>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d001      	beq.n	8005f84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005f80:	23ff      	movs	r3, #255	; 0xff
 8005f82:	e000      	b.n	8005f86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005fa4:	f7ff fefd 	bl	8005da2 <inHandlerMode>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d016      	beq.n	8005fdc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fb35 	bl	8006624 <xQueueGiveFromISR>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d001      	beq.n	8005fc4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005fc0:	23ff      	movs	r3, #255	; 0xff
 8005fc2:	e017      	b.n	8005ff4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d013      	beq.n	8005ff2 <osSemaphoreRelease+0x5e>
 8005fca:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <osSemaphoreRelease+0x68>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	e00a      	b.n	8005ff2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005fdc:	2300      	movs	r3, #0
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fa20 	bl	8006428 <xQueueGenericSend>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d001      	beq.n	8005ff2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005fee:	23ff      	movs	r3, #255	; 0xff
 8005ff0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006000:	b590      	push	{r4, r7, lr}
 8006002:	b085      	sub	sp, #20
 8006004:	af02      	add	r7, sp, #8
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d011      	beq.n	8006036 <osMessageCreate+0x36>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00d      	beq.n	8006036 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6859      	ldr	r1, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2400      	movs	r4, #0
 800602c:	9400      	str	r4, [sp, #0]
 800602e:	f000 f927 	bl	8006280 <xQueueGenericCreateStatic>
 8006032:	4603      	mov	r3, r0
 8006034:	e008      	b.n	8006048 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	4619      	mov	r1, r3
 8006042:	f000 f994 	bl	800636e <xQueueGenericCreate>
 8006046:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	bd90      	pop	{r4, r7, pc}

08006050 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f103 0208 	add.w	r2, r3, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f04f 32ff 	mov.w	r2, #4294967295
 8006068:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f103 0208 	add.w	r2, r3, #8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f103 0208 	add.w	r2, r3, #8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr

0800608e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr

080060a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d103      	bne.n	800610c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e00c      	b.n	8006126 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3308      	adds	r3, #8
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	e002      	b.n	800611a <vListInsert+0x2e>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	429a      	cmp	r2, r3
 8006124:	d2f6      	bcs.n	8006114 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6892      	ldr	r2, [r2, #8]
 8006172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d103      	bne.n	8006190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	1e5a      	subs	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bc80      	pop	{r7}
 80061ac:	4770      	bx	lr
	...

080061b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061da:	f001 ff3f 	bl	800805c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	441a      	add	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	3b01      	subs	r3, #1
 800620c:	68f9      	ldr	r1, [r7, #12]
 800620e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	441a      	add	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	22ff      	movs	r2, #255	; 0xff
 800621e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	22ff      	movs	r2, #255	; 0xff
 8006226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d114      	bne.n	800625a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01a      	beq.n	800626e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3310      	adds	r3, #16
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fa17 	bl	8007670 <xTaskRemoveFromEventList>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d012      	beq.n	800626e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <xQueueGenericReset+0xcc>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	e009      	b.n	800626e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3310      	adds	r3, #16
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff fef6 	bl	8006050 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3324      	adds	r3, #36	; 0x24
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fef1 	bl	8006050 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800626e:	f001 ff25 	bl	80080bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006272:	2301      	movs	r3, #1
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08e      	sub	sp, #56	; 0x38
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <xQueueGenericCreateStatic+0x52>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <xQueueGenericCreateStatic+0x56>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <xQueueGenericCreateStatic+0x58>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	623b      	str	r3, [r7, #32]
}
 80062ee:	bf00      	nop
 80062f0:	e7fe      	b.n	80062f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <xQueueGenericCreateStatic+0x7e>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <xQueueGenericCreateStatic+0x82>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <xQueueGenericCreateStatic+0x84>
 8006302:	2300      	movs	r3, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	61fb      	str	r3, [r7, #28]
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800631e:	2348      	movs	r3, #72	; 0x48
 8006320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b48      	cmp	r3, #72	; 0x48
 8006326:	d00a      	beq.n	800633e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	61bb      	str	r3, [r7, #24]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00d      	beq.n	8006364 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006350:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f843 	bl	80063ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006366:	4618      	mov	r0, r3
 8006368:	3730      	adds	r7, #48	; 0x30
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800636e:	b580      	push	{r7, lr}
 8006370:	b08a      	sub	sp, #40	; 0x28
 8006372:	af02      	add	r7, sp, #8
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	4613      	mov	r3, r2
 800637a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	613b      	str	r3, [r7, #16]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	e004      	b.n	80063ae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	fb02 f303 	mul.w	r3, r2, r3
 80063ac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	3348      	adds	r3, #72	; 0x48
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 ff52 	bl	800825c <pvPortMalloc>
 80063b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00f      	beq.n	80063e0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	3348      	adds	r3, #72	; 0x48
 80063c4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063ce:	79fa      	ldrb	r2, [r7, #7]
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f805 	bl	80063ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80063e0:	69bb      	ldr	r3, [r7, #24]
	}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e002      	b.n	800640c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006418:	2101      	movs	r1, #1
 800641a:	69b8      	ldr	r0, [r7, #24]
 800641c:	f7ff fec8 	bl	80061b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08e      	sub	sp, #56	; 0x38
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006436:	2300      	movs	r3, #0
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <xQueueGenericSend+0x32>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <xQueueGenericSend+0x40>
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <xQueueGenericSend+0x44>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <xQueueGenericSend+0x46>
 800646c:	2300      	movs	r3, #0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <xQueueGenericSend+0x60>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d103      	bne.n	8006496 <xQueueGenericSend+0x6e>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <xQueueGenericSend+0x72>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <xQueueGenericSend+0x74>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	623b      	str	r3, [r7, #32]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064b6:	f001 fa9b 	bl	80079f0 <xTaskGetSchedulerState>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d102      	bne.n	80064c6 <xQueueGenericSend+0x9e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <xQueueGenericSend+0xa2>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <xQueueGenericSend+0xa4>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	61fb      	str	r3, [r7, #28]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064e6:	f001 fdb9 	bl	800805c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d302      	bcc.n	80064fc <xQueueGenericSend+0xd4>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d129      	bne.n	8006550 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006502:	f000 fba0 	bl	8006c46 <prvCopyDataToQueue>
 8006506:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	3324      	adds	r3, #36	; 0x24
 8006514:	4618      	mov	r0, r3
 8006516:	f001 f8ab 	bl	8007670 <xTaskRemoveFromEventList>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d013      	beq.n	8006548 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006520:	4b3f      	ldr	r3, [pc, #252]	; (8006620 <xQueueGenericSend+0x1f8>)
 8006522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	e00a      	b.n	8006548 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006538:	4b39      	ldr	r3, [pc, #228]	; (8006620 <xQueueGenericSend+0x1f8>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006548:	f001 fdb8 	bl	80080bc <vPortExitCritical>
				return pdPASS;
 800654c:	2301      	movs	r3, #1
 800654e:	e063      	b.n	8006618 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d103      	bne.n	800655e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006556:	f001 fdb1 	bl	80080bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800655a:	2300      	movs	r3, #0
 800655c:	e05c      	b.n	8006618 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800655e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006564:	f107 0314 	add.w	r3, r7, #20
 8006568:	4618      	mov	r0, r3
 800656a:	f001 f8e3 	bl	8007734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800656e:	2301      	movs	r3, #1
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006572:	f001 fda3 	bl	80080bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006576:	f000 fe95 	bl	80072a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800657a:	f001 fd6f 	bl	800805c <vPortEnterCritical>
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006584:	b25b      	sxtb	r3, r3
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d103      	bne.n	8006594 <xQueueGenericSend+0x16c>
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800659a:	b25b      	sxtb	r3, r3
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d103      	bne.n	80065aa <xQueueGenericSend+0x182>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065aa:	f001 fd87 	bl	80080bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ae:	1d3a      	adds	r2, r7, #4
 80065b0:	f107 0314 	add.w	r3, r7, #20
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 f8d2 	bl	8007760 <xTaskCheckForTimeOut>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d124      	bne.n	800660c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065c4:	f000 fc37 	bl	8006e36 <prvIsQueueFull>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d018      	beq.n	8006600 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	3310      	adds	r3, #16
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f001 f826 	bl	8007628 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065de:	f000 fbc2 	bl	8006d66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065e2:	f000 fe6d 	bl	80072c0 <xTaskResumeAll>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f47f af7c 	bne.w	80064e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80065ee:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <xQueueGenericSend+0x1f8>)
 80065f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	e772      	b.n	80064e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006602:	f000 fbb0 	bl	8006d66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006606:	f000 fe5b 	bl	80072c0 <xTaskResumeAll>
 800660a:	e76c      	b.n	80064e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800660c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800660e:	f000 fbaa 	bl	8006d66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006612:	f000 fe55 	bl	80072c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006616:	2300      	movs	r3, #0
		}
	}
}
 8006618:	4618      	mov	r0, r3
 800661a:	3738      	adds	r7, #56	; 0x38
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08e      	sub	sp, #56	; 0x38
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	623b      	str	r3, [r7, #32]
}
 800664a:	bf00      	nop
 800664c:	e7fe      	b.n	800664c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <xQueueGiveFromISR+0x48>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	61fb      	str	r3, [r7, #28]
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <xQueueGiveFromISR+0x58>
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <xQueueGiveFromISR+0x5c>
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <xQueueGiveFromISR+0x5e>
 8006680:	2300      	movs	r3, #0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <xQueueGiveFromISR+0x78>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	61bb      	str	r3, [r7, #24]
}
 8006698:	bf00      	nop
 800669a:	e7fe      	b.n	800669a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800669c:	f001 fda0 	bl	80081e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066a0:	f3ef 8211 	mrs	r2, BASEPRI
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	617a      	str	r2, [r7, #20]
 80066b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d22b      	bcs.n	8006724 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e6:	d112      	bne.n	800670e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d016      	beq.n	800671e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	3324      	adds	r3, #36	; 0x24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 ffbb 	bl	8007670 <xTaskRemoveFromEventList>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00e      	beq.n	800671e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2201      	movs	r2, #1
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	e007      	b.n	800671e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800670e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006712:	3301      	adds	r3, #1
 8006714:	b2db      	uxtb	r3, r3
 8006716:	b25a      	sxtb	r2, r3
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800671e:	2301      	movs	r3, #1
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
 8006722:	e001      	b.n	8006728 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006724:	2300      	movs	r3, #0
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006732:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006736:	4618      	mov	r0, r3
 8006738:	3738      	adds	r7, #56	; 0x38
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	; 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <xQueueReceive+0x30>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	623b      	str	r3, [r7, #32]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <xQueueReceive+0x3e>
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xQueueReceive+0x42>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <xQueueReceive+0x44>
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xQueueReceive+0x5e>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	61fb      	str	r3, [r7, #28]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800679e:	f001 f927 	bl	80079f0 <xTaskGetSchedulerState>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <xQueueReceive+0x6e>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <xQueueReceive+0x72>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <xQueueReceive+0x74>
 80067b2:	2300      	movs	r3, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xQueueReceive+0x8e>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	61bb      	str	r3, [r7, #24]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ce:	f001 fc45 	bl	800805c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01f      	beq.n	800681e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e2:	f000 fa9a 	bl	8006d1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	1e5a      	subs	r2, r3, #1
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00f      	beq.n	8006816 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	3310      	adds	r3, #16
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 ff38 	bl	8007670 <xTaskRemoveFromEventList>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006806:	4b3d      	ldr	r3, [pc, #244]	; (80068fc <xQueueReceive+0x1bc>)
 8006808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006816:	f001 fc51 	bl	80080bc <vPortExitCritical>
				return pdPASS;
 800681a:	2301      	movs	r3, #1
 800681c:	e069      	b.n	80068f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d103      	bne.n	800682c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006824:	f001 fc4a 	bl	80080bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006828:	2300      	movs	r3, #0
 800682a:	e062      	b.n	80068f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006832:	f107 0310 	add.w	r3, r7, #16
 8006836:	4618      	mov	r0, r3
 8006838:	f000 ff7c 	bl	8007734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006840:	f001 fc3c 	bl	80080bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006844:	f000 fd2e 	bl	80072a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006848:	f001 fc08 	bl	800805c <vPortEnterCritical>
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006852:	b25b      	sxtb	r3, r3
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d103      	bne.n	8006862 <xQueueReceive+0x122>
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006868:	b25b      	sxtb	r3, r3
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d103      	bne.n	8006878 <xQueueReceive+0x138>
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006878:	f001 fc20 	bl	80080bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800687c:	1d3a      	adds	r2, r7, #4
 800687e:	f107 0310 	add.w	r3, r7, #16
 8006882:	4611      	mov	r1, r2
 8006884:	4618      	mov	r0, r3
 8006886:	f000 ff6b 	bl	8007760 <xTaskCheckForTimeOut>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d123      	bne.n	80068d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006892:	f000 faba 	bl	8006e0a <prvIsQueueEmpty>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d017      	beq.n	80068cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	3324      	adds	r3, #36	; 0x24
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 febf 	bl	8007628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ac:	f000 fa5b 	bl	8006d66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068b0:	f000 fd06 	bl	80072c0 <xTaskResumeAll>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d189      	bne.n	80067ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80068ba:	4b10      	ldr	r3, [pc, #64]	; (80068fc <xQueueReceive+0x1bc>)
 80068bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	e780      	b.n	80067ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ce:	f000 fa4a 	bl	8006d66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068d2:	f000 fcf5 	bl	80072c0 <xTaskResumeAll>
 80068d6:	e77a      	b.n	80067ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068da:	f000 fa44 	bl	8006d66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068de:	f000 fcef 	bl	80072c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e4:	f000 fa91 	bl	8006e0a <prvIsQueueEmpty>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f43f af6f 	beq.w	80067ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3730      	adds	r7, #48	; 0x30
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08e      	sub	sp, #56	; 0x38
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800690a:	2300      	movs	r3, #0
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	623b      	str	r3, [r7, #32]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	61fb      	str	r3, [r7, #28]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006950:	f001 f84e 	bl	80079f0 <xTaskGetSchedulerState>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <xQueueSemaphoreTake+0x60>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <xQueueSemaphoreTake+0x64>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <xQueueSemaphoreTake+0x66>
 8006964:	2300      	movs	r3, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	61bb      	str	r3, [r7, #24]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006980:	f001 fb6c 	bl	800805c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	2b00      	cmp	r3, #0
 800698e:	d024      	beq.n	80069da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	1e5a      	subs	r2, r3, #1
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80069a0:	f001 f9f0 	bl	8007d84 <pvTaskIncrementMutexHeldCount>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00f      	beq.n	80069d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	3310      	adds	r3, #16
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fe5a 	bl	8007670 <xTaskRemoveFromEventList>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069c2:	4b54      	ldr	r3, [pc, #336]	; (8006b14 <xQueueSemaphoreTake+0x214>)
 80069c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069d2:	f001 fb73 	bl	80080bc <vPortExitCritical>
				return pdPASS;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e097      	b.n	8006b0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d111      	bne.n	8006a04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	617b      	str	r3, [r7, #20]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80069fc:	f001 fb5e 	bl	80080bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e082      	b.n	8006b0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a0a:	f107 030c 	add.w	r3, r7, #12
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fe90 	bl	8007734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a18:	f001 fb50 	bl	80080bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a1c:	f000 fc42 	bl	80072a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a20:	f001 fb1c 	bl	800805c <vPortEnterCritical>
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a2a:	b25b      	sxtb	r3, r3
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d103      	bne.n	8006a3a <xQueueSemaphoreTake+0x13a>
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a40:	b25b      	sxtb	r3, r3
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d103      	bne.n	8006a50 <xQueueSemaphoreTake+0x150>
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a50:	f001 fb34 	bl	80080bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a54:	463a      	mov	r2, r7
 8006a56:	f107 030c 	add.w	r3, r7, #12
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fe7f 	bl	8007760 <xTaskCheckForTimeOut>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d132      	bne.n	8006ace <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a6a:	f000 f9ce 	bl	8006e0a <prvIsQueueEmpty>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d026      	beq.n	8006ac2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d109      	bne.n	8006a90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006a7c:	f001 faee 	bl	800805c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 ffd1 	bl	8007a2c <xTaskPriorityInherit>
 8006a8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006a8c:	f001 fb16 	bl	80080bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	3324      	adds	r3, #36	; 0x24
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	4611      	mov	r1, r2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fdc5 	bl	8007628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aa0:	f000 f961 	bl	8006d66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aa4:	f000 fc0c 	bl	80072c0 <xTaskResumeAll>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f47f af68 	bne.w	8006980 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006ab0:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <xQueueSemaphoreTake+0x214>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	e75e      	b.n	8006980 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ac4:	f000 f94f 	bl	8006d66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac8:	f000 fbfa 	bl	80072c0 <xTaskResumeAll>
 8006acc:	e758      	b.n	8006980 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ad0:	f000 f949 	bl	8006d66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ad4:	f000 fbf4 	bl	80072c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ada:	f000 f996 	bl	8006e0a <prvIsQueueEmpty>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f43f af4d 	beq.w	8006980 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00d      	beq.n	8006b08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006aec:	f001 fab6 	bl	800805c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006af2:	f000 f891 	bl	8006c18 <prvGetDisinheritPriorityAfterTimeout>
 8006af6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 f8a0 	bl	8007c44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b04:	f001 fada 	bl	80080bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3738      	adds	r7, #56	; 0x38
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	e000ed04 	.word	0xe000ed04

08006b18 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08e      	sub	sp, #56	; 0x38
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	623b      	str	r3, [r7, #32]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <xQueueReceiveFromISR+0x3a>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <xQueueReceiveFromISR+0x3e>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <xQueueReceiveFromISR+0x40>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	61fb      	str	r3, [r7, #28]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b72:	f001 fb35 	bl	80081e0 <vPortValidateInterruptPriority>
	__asm volatile
 8006b76:	f3ef 8211 	mrs	r2, BASEPRI
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	61ba      	str	r2, [r7, #24]
 8006b8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d02f      	beq.n	8006bfe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bac:	f000 f8b5 	bl	8006d1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	1e5a      	subs	r2, r3, #1
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d112      	bne.n	8006be8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	3310      	adds	r3, #16
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fd4e 	bl	8007670 <xTaskRemoveFromEventList>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e007      	b.n	8006bf8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bec:	3301      	adds	r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	b25a      	sxtb	r2, r3
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfc:	e001      	b.n	8006c02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f383 8811 	msr	BASEPRI, r3
}
 8006c0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3738      	adds	r7, #56	; 0x38
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1c3 0307 	rsb	r3, r3, #7
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e001      	b.n	8006c3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
	}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr

08006c46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10d      	bne.n	8006c80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d14d      	bne.n	8006d08 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 ff61 	bl	8007b38 <xTaskPriorityDisinherit>
 8006c76:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	605a      	str	r2, [r3, #4]
 8006c7e:	e043      	b.n	8006d08 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d119      	bne.n	8006cba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6898      	ldr	r0, [r3, #8]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	461a      	mov	r2, r3
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	f001 fd03 	bl	800869c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	441a      	add	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d32b      	bcc.n	8006d08 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	609a      	str	r2, [r3, #8]
 8006cb8:	e026      	b.n	8006d08 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	68d8      	ldr	r0, [r3, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	f001 fce9 	bl	800869c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	425b      	negs	r3, r3
 8006cd4:	441a      	add	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d207      	bcs.n	8006cf6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	425b      	negs	r3, r3
 8006cf0:	441a      	add	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d105      	bne.n	8006d08 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d10:	697b      	ldr	r3, [r7, #20]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d018      	beq.n	8006d5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d303      	bcc.n	8006d4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68d9      	ldr	r1, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	461a      	mov	r2, r3
 8006d58:	6838      	ldr	r0, [r7, #0]
 8006d5a:	f001 fc9f 	bl	800869c <memcpy>
	}
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d6e:	f001 f975 	bl	800805c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d7a:	e011      	b.n	8006da0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d012      	beq.n	8006daa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 fc71 	bl	8007670 <xTaskRemoveFromEventList>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d94:	f000 fd46 	bl	8007824 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	dce9      	bgt.n	8006d7c <prvUnlockQueue+0x16>
 8006da8:	e000      	b.n	8006dac <prvUnlockQueue+0x46>
					break;
 8006daa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	22ff      	movs	r2, #255	; 0xff
 8006db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006db4:	f001 f982 	bl	80080bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006db8:	f001 f950 	bl	800805c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dc2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dc4:	e011      	b.n	8006dea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d012      	beq.n	8006df4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3310      	adds	r3, #16
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fc4c 	bl	8007670 <xTaskRemoveFromEventList>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dde:	f000 fd21 	bl	8007824 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dce9      	bgt.n	8006dc6 <prvUnlockQueue+0x60>
 8006df2:	e000      	b.n	8006df6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006df4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	22ff      	movs	r2, #255	; 0xff
 8006dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006dfe:	f001 f95d 	bl	80080bc <vPortExitCritical>
}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e12:	f001 f923 	bl	800805c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e001      	b.n	8006e28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e28:	f001 f948 	bl	80080bc <vPortExitCritical>

	return xReturn;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e3e:	f001 f90d 	bl	800805c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d102      	bne.n	8006e54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	e001      	b.n	8006e58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e58:	f001 f930 	bl	80080bc <vPortExitCritical>

	return xReturn;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b08e      	sub	sp, #56	; 0x38
 8006e6a:	af04      	add	r7, sp, #16
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	623b      	str	r3, [r7, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <xTaskCreateStatic+0x46>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	61fb      	str	r3, [r7, #28]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eac:	2354      	movs	r3, #84	; 0x54
 8006eae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2b54      	cmp	r3, #84	; 0x54
 8006eb4:	d00a      	beq.n	8006ecc <xTaskCreateStatic+0x66>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	61bb      	str	r3, [r7, #24]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d01e      	beq.n	8006f10 <xTaskCreateStatic+0xaa>
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01b      	beq.n	8006f10 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006eea:	2300      	movs	r3, #0
 8006eec:	9303      	str	r3, [sp, #12]
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	9302      	str	r3, [sp, #8]
 8006ef2:	f107 0314 	add.w	r3, r7, #20
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 f850 	bl	8006fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f0a:	f000 f8cd 	bl	80070a8 <prvAddNewTaskToReadyList>
 8006f0e:	e001      	b.n	8006f14 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f14:	697b      	ldr	r3, [r7, #20]
	}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3728      	adds	r7, #40	; 0x28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b08c      	sub	sp, #48	; 0x30
 8006f22:	af04      	add	r7, sp, #16
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 f992 	bl	800825c <pvPortMalloc>
 8006f38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00e      	beq.n	8006f5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006f40:	2054      	movs	r0, #84	; 0x54
 8006f42:	f001 f98b 	bl	800825c <pvPortMalloc>
 8006f46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30
 8006f54:	e005      	b.n	8006f62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f56:	6978      	ldr	r0, [r7, #20]
 8006f58:	f001 fa44 	bl	80083e4 <vPortFree>
 8006f5c:	e001      	b.n	8006f62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d017      	beq.n	8006f98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f70:	88fa      	ldrh	r2, [r7, #6]
 8006f72:	2300      	movs	r3, #0
 8006f74:	9303      	str	r3, [sp, #12]
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	9302      	str	r3, [sp, #8]
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f80e 	bl	8006fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f8c:	69f8      	ldr	r0, [r7, #28]
 8006f8e:	f000 f88b 	bl	80070a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f92:	2301      	movs	r3, #1
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	e002      	b.n	8006f9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f98:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
	}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3720      	adds	r7, #32
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f023 0307 	bic.w	r3, r3, #7
 8006fce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	617b      	str	r3, [r7, #20]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	e012      	b.n	800701c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	7819      	ldrb	r1, [r3, #0]
 8006ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	3334      	adds	r3, #52	; 0x34
 8007006:	460a      	mov	r2, r1
 8007008:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d006      	beq.n	8007024 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	3301      	adds	r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	2b0f      	cmp	r3, #15
 8007020:	d9e9      	bls.n	8006ff6 <prvInitialiseNewTask+0x4e>
 8007022:	e000      	b.n	8007026 <prvInitialiseNewTask+0x7e>
		{
			break;
 8007024:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	2b06      	cmp	r3, #6
 8007032:	d901      	bls.n	8007038 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007034:	2306      	movs	r3, #6
 8007036:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800703c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007042:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	2200      	movs	r2, #0
 8007048:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	3304      	adds	r3, #4
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff f81d 	bl	800608e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007056:	3318      	adds	r3, #24
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff f818 	bl	800608e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007062:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	f1c3 0207 	rsb	r2, r3, #7
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007072:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	2200      	movs	r2, #0
 8007078:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	68f9      	ldr	r1, [r7, #12]
 8007086:	69b8      	ldr	r0, [r7, #24]
 8007088:	f000 fef6 	bl	8007e78 <pxPortInitialiseStack>
 800708c:	4602      	mov	r2, r0
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800709e:	bf00      	nop
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070b0:	f000 ffd4 	bl	800805c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070b4:	4b2a      	ldr	r3, [pc, #168]	; (8007160 <prvAddNewTaskToReadyList+0xb8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	4a29      	ldr	r2, [pc, #164]	; (8007160 <prvAddNewTaskToReadyList+0xb8>)
 80070bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070be:	4b29      	ldr	r3, [pc, #164]	; (8007164 <prvAddNewTaskToReadyList+0xbc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070c6:	4a27      	ldr	r2, [pc, #156]	; (8007164 <prvAddNewTaskToReadyList+0xbc>)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070cc:	4b24      	ldr	r3, [pc, #144]	; (8007160 <prvAddNewTaskToReadyList+0xb8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d110      	bne.n	80070f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070d4:	f000 fbca 	bl	800786c <prvInitialiseTaskLists>
 80070d8:	e00d      	b.n	80070f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070da:	4b23      	ldr	r3, [pc, #140]	; (8007168 <prvAddNewTaskToReadyList+0xc0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070e2:	4b20      	ldr	r3, [pc, #128]	; (8007164 <prvAddNewTaskToReadyList+0xbc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d802      	bhi.n	80070f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070f0:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <prvAddNewTaskToReadyList+0xbc>)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070f6:	4b1d      	ldr	r3, [pc, #116]	; (800716c <prvAddNewTaskToReadyList+0xc4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3301      	adds	r3, #1
 80070fc:	4a1b      	ldr	r2, [pc, #108]	; (800716c <prvAddNewTaskToReadyList+0xc4>)
 80070fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	2201      	movs	r2, #1
 8007106:	409a      	lsls	r2, r3
 8007108:	4b19      	ldr	r3, [pc, #100]	; (8007170 <prvAddNewTaskToReadyList+0xc8>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4313      	orrs	r3, r2
 800710e:	4a18      	ldr	r2, [pc, #96]	; (8007170 <prvAddNewTaskToReadyList+0xc8>)
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4a15      	ldr	r2, [pc, #84]	; (8007174 <prvAddNewTaskToReadyList+0xcc>)
 8007120:	441a      	add	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3304      	adds	r3, #4
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f7fe ffbc 	bl	80060a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800712e:	f000 ffc5 	bl	80080bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007132:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <prvAddNewTaskToReadyList+0xc0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00e      	beq.n	8007158 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <prvAddNewTaskToReadyList+0xbc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	429a      	cmp	r2, r3
 8007146:	d207      	bcs.n	8007158 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007148:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <prvAddNewTaskToReadyList+0xd0>)
 800714a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	200005f0 	.word	0x200005f0
 8007164:	200004f0 	.word	0x200004f0
 8007168:	200005fc 	.word	0x200005fc
 800716c:	2000060c 	.word	0x2000060c
 8007170:	200005f8 	.word	0x200005f8
 8007174:	200004f4 	.word	0x200004f4
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d017      	beq.n	80071be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <vTaskDelay+0x60>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <vTaskDelay+0x30>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	60bb      	str	r3, [r7, #8]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071ac:	f000 f87a 	bl	80072a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071b0:	2100      	movs	r1, #0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fdfa 	bl	8007dac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071b8:	f000 f882 	bl	80072c0 <xTaskResumeAll>
 80071bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d107      	bne.n	80071d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <vTaskDelay+0x64>)
 80071c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20000618 	.word	0x20000618
 80071e0:	e000ed04 	.word	0xe000ed04

080071e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08a      	sub	sp, #40	; 0x28
 80071e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071f2:	463a      	mov	r2, r7
 80071f4:	1d39      	adds	r1, r7, #4
 80071f6:	f107 0308 	add.w	r3, r7, #8
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fa f890 	bl	8001320 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	9202      	str	r2, [sp, #8]
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	2300      	movs	r3, #0
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	2300      	movs	r3, #0
 8007210:	460a      	mov	r2, r1
 8007212:	491e      	ldr	r1, [pc, #120]	; (800728c <vTaskStartScheduler+0xa8>)
 8007214:	481e      	ldr	r0, [pc, #120]	; (8007290 <vTaskStartScheduler+0xac>)
 8007216:	f7ff fe26 	bl	8006e66 <xTaskCreateStatic>
 800721a:	4603      	mov	r3, r0
 800721c:	4a1d      	ldr	r2, [pc, #116]	; (8007294 <vTaskStartScheduler+0xb0>)
 800721e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007220:	4b1c      	ldr	r3, [pc, #112]	; (8007294 <vTaskStartScheduler+0xb0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007228:	2301      	movs	r3, #1
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	e001      	b.n	8007232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d116      	bne.n	8007266 <vTaskStartScheduler+0x82>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	613b      	str	r3, [r7, #16]
}
 800724a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800724c:	4b12      	ldr	r3, [pc, #72]	; (8007298 <vTaskStartScheduler+0xb4>)
 800724e:	f04f 32ff 	mov.w	r2, #4294967295
 8007252:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007254:	4b11      	ldr	r3, [pc, #68]	; (800729c <vTaskStartScheduler+0xb8>)
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <vTaskStartScheduler+0xbc>)
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007260:	f000 fe8a 	bl	8007f78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007264:	e00e      	b.n	8007284 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726c:	d10a      	bne.n	8007284 <vTaskStartScheduler+0xa0>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60fb      	str	r3, [r7, #12]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <vTaskStartScheduler+0x9e>
}
 8007284:	bf00      	nop
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	0800894c 	.word	0x0800894c
 8007290:	0800783d 	.word	0x0800783d
 8007294:	20000614 	.word	0x20000614
 8007298:	20000610 	.word	0x20000610
 800729c:	200005fc 	.word	0x200005fc
 80072a0:	200005f4 	.word	0x200005f4

080072a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <vTaskSuspendAll+0x18>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	4a03      	ldr	r2, [pc, #12]	; (80072bc <vTaskSuspendAll+0x18>)
 80072b0:	6013      	str	r3, [r2, #0]
}
 80072b2:	bf00      	nop
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000618 	.word	0x20000618

080072c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072ce:	4b41      	ldr	r3, [pc, #260]	; (80073d4 <xTaskResumeAll+0x114>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <xTaskResumeAll+0x2c>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	603b      	str	r3, [r7, #0]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072ec:	f000 feb6 	bl	800805c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072f0:	4b38      	ldr	r3, [pc, #224]	; (80073d4 <xTaskResumeAll+0x114>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	4a37      	ldr	r2, [pc, #220]	; (80073d4 <xTaskResumeAll+0x114>)
 80072f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072fa:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <xTaskResumeAll+0x114>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d161      	bne.n	80073c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007302:	4b35      	ldr	r3, [pc, #212]	; (80073d8 <xTaskResumeAll+0x118>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d05d      	beq.n	80073c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800730a:	e02e      	b.n	800736a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800730c:	4b33      	ldr	r3, [pc, #204]	; (80073dc <xTaskResumeAll+0x11c>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3318      	adds	r3, #24
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe ff1f 	bl	800615c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3304      	adds	r3, #4
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe ff1a 	bl	800615c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	2201      	movs	r2, #1
 800732e:	409a      	lsls	r2, r3
 8007330:	4b2b      	ldr	r3, [pc, #172]	; (80073e0 <xTaskResumeAll+0x120>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4313      	orrs	r3, r2
 8007336:	4a2a      	ldr	r2, [pc, #168]	; (80073e0 <xTaskResumeAll+0x120>)
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4a27      	ldr	r2, [pc, #156]	; (80073e4 <xTaskResumeAll+0x124>)
 8007348:	441a      	add	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe fea8 	bl	80060a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	4b23      	ldr	r3, [pc, #140]	; (80073e8 <xTaskResumeAll+0x128>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	429a      	cmp	r2, r3
 8007362:	d302      	bcc.n	800736a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007364:	4b21      	ldr	r3, [pc, #132]	; (80073ec <xTaskResumeAll+0x12c>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800736a:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <xTaskResumeAll+0x11c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1cc      	bne.n	800730c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007378:	f000 fb16 	bl	80079a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800737c:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <xTaskResumeAll+0x130>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d010      	beq.n	80073aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007388:	f000 f836 	bl	80073f8 <xTaskIncrementTick>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007392:	4b16      	ldr	r3, [pc, #88]	; (80073ec <xTaskResumeAll+0x12c>)
 8007394:	2201      	movs	r2, #1
 8007396:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3b01      	subs	r3, #1
 800739c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f1      	bne.n	8007388 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80073a4:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <xTaskResumeAll+0x130>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073aa:	4b10      	ldr	r3, [pc, #64]	; (80073ec <xTaskResumeAll+0x12c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073b2:	2301      	movs	r3, #1
 80073b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073b6:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <xTaskResumeAll+0x134>)
 80073b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073c6:	f000 fe79 	bl	80080bc <vPortExitCritical>

	return xAlreadyYielded;
 80073ca:	68bb      	ldr	r3, [r7, #8]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000618 	.word	0x20000618
 80073d8:	200005f0 	.word	0x200005f0
 80073dc:	200005b0 	.word	0x200005b0
 80073e0:	200005f8 	.word	0x200005f8
 80073e4:	200004f4 	.word	0x200004f4
 80073e8:	200004f0 	.word	0x200004f0
 80073ec:	20000604 	.word	0x20000604
 80073f0:	20000600 	.word	0x20000600
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007402:	4b51      	ldr	r3, [pc, #324]	; (8007548 <xTaskIncrementTick+0x150>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f040 808d 	bne.w	8007526 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800740c:	4b4f      	ldr	r3, [pc, #316]	; (800754c <xTaskIncrementTick+0x154>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007414:	4a4d      	ldr	r2, [pc, #308]	; (800754c <xTaskIncrementTick+0x154>)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d120      	bne.n	8007462 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007420:	4b4b      	ldr	r3, [pc, #300]	; (8007550 <xTaskIncrementTick+0x158>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <xTaskIncrementTick+0x48>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	603b      	str	r3, [r7, #0]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xTaskIncrementTick+0x46>
 8007440:	4b43      	ldr	r3, [pc, #268]	; (8007550 <xTaskIncrementTick+0x158>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	4b43      	ldr	r3, [pc, #268]	; (8007554 <xTaskIncrementTick+0x15c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a41      	ldr	r2, [pc, #260]	; (8007550 <xTaskIncrementTick+0x158>)
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	4a41      	ldr	r2, [pc, #260]	; (8007554 <xTaskIncrementTick+0x15c>)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	4b40      	ldr	r3, [pc, #256]	; (8007558 <xTaskIncrementTick+0x160>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3301      	adds	r3, #1
 800745a:	4a3f      	ldr	r2, [pc, #252]	; (8007558 <xTaskIncrementTick+0x160>)
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	f000 faa3 	bl	80079a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007462:	4b3e      	ldr	r3, [pc, #248]	; (800755c <xTaskIncrementTick+0x164>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	429a      	cmp	r2, r3
 800746a:	d34d      	bcc.n	8007508 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800746c:	4b38      	ldr	r3, [pc, #224]	; (8007550 <xTaskIncrementTick+0x158>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <xTaskIncrementTick+0x82>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <xTaskIncrementTick+0x84>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007480:	4b36      	ldr	r3, [pc, #216]	; (800755c <xTaskIncrementTick+0x164>)
 8007482:	f04f 32ff 	mov.w	r2, #4294967295
 8007486:	601a      	str	r2, [r3, #0]
					break;
 8007488:	e03e      	b.n	8007508 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800748a:	4b31      	ldr	r3, [pc, #196]	; (8007550 <xTaskIncrementTick+0x158>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d203      	bcs.n	80074aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074a2:	4a2e      	ldr	r2, [pc, #184]	; (800755c <xTaskIncrementTick+0x164>)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6013      	str	r3, [r2, #0]
						break;
 80074a8:	e02e      	b.n	8007508 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fe54 	bl	800615c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	3318      	adds	r3, #24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe fe4b 	bl	800615c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	2201      	movs	r2, #1
 80074cc:	409a      	lsls	r2, r3
 80074ce:	4b24      	ldr	r3, [pc, #144]	; (8007560 <xTaskIncrementTick+0x168>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	4a22      	ldr	r2, [pc, #136]	; (8007560 <xTaskIncrementTick+0x168>)
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4a1f      	ldr	r2, [pc, #124]	; (8007564 <xTaskIncrementTick+0x16c>)
 80074e6:	441a      	add	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7fe fdd9 	bl	80060a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	4b1b      	ldr	r3, [pc, #108]	; (8007568 <xTaskIncrementTick+0x170>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d3b4      	bcc.n	800746c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007502:	2301      	movs	r3, #1
 8007504:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007506:	e7b1      	b.n	800746c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007508:	4b17      	ldr	r3, [pc, #92]	; (8007568 <xTaskIncrementTick+0x170>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750e:	4915      	ldr	r1, [pc, #84]	; (8007564 <xTaskIncrementTick+0x16c>)
 8007510:	4613      	mov	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	440b      	add	r3, r1
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d907      	bls.n	8007530 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007520:	2301      	movs	r3, #1
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e004      	b.n	8007530 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007526:	4b11      	ldr	r3, [pc, #68]	; (800756c <xTaskIncrementTick+0x174>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3301      	adds	r3, #1
 800752c:	4a0f      	ldr	r2, [pc, #60]	; (800756c <xTaskIncrementTick+0x174>)
 800752e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007530:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <xTaskIncrementTick+0x178>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007538:	2301      	movs	r3, #1
 800753a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800753c:	697b      	ldr	r3, [r7, #20]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000618 	.word	0x20000618
 800754c:	200005f4 	.word	0x200005f4
 8007550:	200005a8 	.word	0x200005a8
 8007554:	200005ac 	.word	0x200005ac
 8007558:	20000608 	.word	0x20000608
 800755c:	20000610 	.word	0x20000610
 8007560:	200005f8 	.word	0x200005f8
 8007564:	200004f4 	.word	0x200004f4
 8007568:	200004f0 	.word	0x200004f0
 800756c:	20000600 	.word	0x20000600
 8007570:	20000604 	.word	0x20000604

08007574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800757a:	4b26      	ldr	r3, [pc, #152]	; (8007614 <vTaskSwitchContext+0xa0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007582:	4b25      	ldr	r3, [pc, #148]	; (8007618 <vTaskSwitchContext+0xa4>)
 8007584:	2201      	movs	r2, #1
 8007586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007588:	e03f      	b.n	800760a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800758a:	4b23      	ldr	r3, [pc, #140]	; (8007618 <vTaskSwitchContext+0xa4>)
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007590:	4b22      	ldr	r3, [pc, #136]	; (800761c <vTaskSwitchContext+0xa8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	fab3 f383 	clz	r3, r3
 800759c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	f1c3 031f 	rsb	r3, r3, #31
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	491e      	ldr	r1, [pc, #120]	; (8007620 <vTaskSwitchContext+0xac>)
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	607b      	str	r3, [r7, #4]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <vTaskSwitchContext+0x5a>
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4a11      	ldr	r2, [pc, #68]	; (8007620 <vTaskSwitchContext+0xac>)
 80075dc:	4413      	add	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	3308      	adds	r3, #8
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d104      	bne.n	8007600 <vTaskSwitchContext+0x8c>
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	605a      	str	r2, [r3, #4]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	4a07      	ldr	r2, [pc, #28]	; (8007624 <vTaskSwitchContext+0xb0>)
 8007608:	6013      	str	r3, [r2, #0]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr
 8007614:	20000618 	.word	0x20000618
 8007618:	20000604 	.word	0x20000604
 800761c:	200005f8 	.word	0x200005f8
 8007620:	200004f4 	.word	0x200004f4
 8007624:	200004f0 	.word	0x200004f0

08007628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	60fb      	str	r3, [r7, #12]
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800764e:	4b07      	ldr	r3, [pc, #28]	; (800766c <vTaskPlaceOnEventList+0x44>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3318      	adds	r3, #24
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fe fd48 	bl	80060ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800765c:	2101      	movs	r1, #1
 800765e:	6838      	ldr	r0, [r7, #0]
 8007660:	f000 fba4 	bl	8007dac <prvAddCurrentTaskToDelayedList>
}
 8007664:	bf00      	nop
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	200004f0 	.word	0x200004f0

08007670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60fb      	str	r3, [r7, #12]
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	3318      	adds	r3, #24
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fe fd5b 	bl	800615c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a6:	4b1d      	ldr	r3, [pc, #116]	; (800771c <xTaskRemoveFromEventList+0xac>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d11c      	bne.n	80076e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fd52 	bl	800615c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	2201      	movs	r2, #1
 80076be:	409a      	lsls	r2, r3
 80076c0:	4b17      	ldr	r3, [pc, #92]	; (8007720 <xTaskRemoveFromEventList+0xb0>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	4a16      	ldr	r2, [pc, #88]	; (8007720 <xTaskRemoveFromEventList+0xb0>)
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4a13      	ldr	r2, [pc, #76]	; (8007724 <xTaskRemoveFromEventList+0xb4>)
 80076d8:	441a      	add	r2, r3
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	3304      	adds	r3, #4
 80076de:	4619      	mov	r1, r3
 80076e0:	4610      	mov	r0, r2
 80076e2:	f7fe fce0 	bl	80060a6 <vListInsertEnd>
 80076e6:	e005      	b.n	80076f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	3318      	adds	r3, #24
 80076ec:	4619      	mov	r1, r3
 80076ee:	480e      	ldr	r0, [pc, #56]	; (8007728 <xTaskRemoveFromEventList+0xb8>)
 80076f0:	f7fe fcd9 	bl	80060a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	4b0c      	ldr	r3, [pc, #48]	; (800772c <xTaskRemoveFromEventList+0xbc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	429a      	cmp	r2, r3
 8007700:	d905      	bls.n	800770e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007702:	2301      	movs	r3, #1
 8007704:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007706:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <xTaskRemoveFromEventList+0xc0>)
 8007708:	2201      	movs	r2, #1
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	e001      	b.n	8007712 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007712:	697b      	ldr	r3, [r7, #20]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000618 	.word	0x20000618
 8007720:	200005f8 	.word	0x200005f8
 8007724:	200004f4 	.word	0x200004f4
 8007728:	200005b0 	.word	0x200005b0
 800772c:	200004f0 	.word	0x200004f0
 8007730:	20000604 	.word	0x20000604

08007734 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800773c:	4b06      	ldr	r3, [pc, #24]	; (8007758 <vTaskInternalSetTimeOutState+0x24>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <vTaskInternalSetTimeOutState+0x28>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	605a      	str	r2, [r3, #4]
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	20000608 	.word	0x20000608
 800775c:	200005f4 	.word	0x200005f4

08007760 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	613b      	str	r3, [r7, #16]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60fb      	str	r3, [r7, #12]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80077a2:	f000 fc5b 	bl	800805c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077a6:	4b1d      	ldr	r3, [pc, #116]	; (800781c <xTaskCheckForTimeOut+0xbc>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	d102      	bne.n	80077c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	e023      	b.n	800780e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	4b15      	ldr	r3, [pc, #84]	; (8007820 <xTaskCheckForTimeOut+0xc0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d007      	beq.n	80077e2 <xTaskCheckForTimeOut+0x82>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d302      	bcc.n	80077e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077dc:	2301      	movs	r3, #1
 80077de:	61fb      	str	r3, [r7, #28]
 80077e0:	e015      	b.n	800780e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d20b      	bcs.n	8007804 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	1ad2      	subs	r2, r2, r3
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff ff9b 	bl	8007734 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	e004      	b.n	800780e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800780a:	2301      	movs	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800780e:	f000 fc55 	bl	80080bc <vPortExitCritical>

	return xReturn;
 8007812:	69fb      	ldr	r3, [r7, #28]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200005f4 	.word	0x200005f4
 8007820:	20000608 	.word	0x20000608

08007824 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007828:	4b03      	ldr	r3, [pc, #12]	; (8007838 <vTaskMissedYield+0x14>)
 800782a:	2201      	movs	r2, #1
 800782c:	601a      	str	r2, [r3, #0]
}
 800782e:	bf00      	nop
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	20000604 	.word	0x20000604

0800783c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007844:	f000 f852 	bl	80078ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007848:	4b06      	ldr	r3, [pc, #24]	; (8007864 <prvIdleTask+0x28>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d9f9      	bls.n	8007844 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007850:	4b05      	ldr	r3, [pc, #20]	; (8007868 <prvIdleTask+0x2c>)
 8007852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007860:	e7f0      	b.n	8007844 <prvIdleTask+0x8>
 8007862:	bf00      	nop
 8007864:	200004f4 	.word	0x200004f4
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007872:	2300      	movs	r3, #0
 8007874:	607b      	str	r3, [r7, #4]
 8007876:	e00c      	b.n	8007892 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4a12      	ldr	r2, [pc, #72]	; (80078cc <prvInitialiseTaskLists+0x60>)
 8007884:	4413      	add	r3, r2
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fbe2 	bl	8006050 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3301      	adds	r3, #1
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b06      	cmp	r3, #6
 8007896:	d9ef      	bls.n	8007878 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007898:	480d      	ldr	r0, [pc, #52]	; (80078d0 <prvInitialiseTaskLists+0x64>)
 800789a:	f7fe fbd9 	bl	8006050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800789e:	480d      	ldr	r0, [pc, #52]	; (80078d4 <prvInitialiseTaskLists+0x68>)
 80078a0:	f7fe fbd6 	bl	8006050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078a4:	480c      	ldr	r0, [pc, #48]	; (80078d8 <prvInitialiseTaskLists+0x6c>)
 80078a6:	f7fe fbd3 	bl	8006050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078aa:	480c      	ldr	r0, [pc, #48]	; (80078dc <prvInitialiseTaskLists+0x70>)
 80078ac:	f7fe fbd0 	bl	8006050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078b0:	480b      	ldr	r0, [pc, #44]	; (80078e0 <prvInitialiseTaskLists+0x74>)
 80078b2:	f7fe fbcd 	bl	8006050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <prvInitialiseTaskLists+0x78>)
 80078b8:	4a05      	ldr	r2, [pc, #20]	; (80078d0 <prvInitialiseTaskLists+0x64>)
 80078ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078bc:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <prvInitialiseTaskLists+0x7c>)
 80078be:	4a05      	ldr	r2, [pc, #20]	; (80078d4 <prvInitialiseTaskLists+0x68>)
 80078c0:	601a      	str	r2, [r3, #0]
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	200004f4 	.word	0x200004f4
 80078d0:	20000580 	.word	0x20000580
 80078d4:	20000594 	.word	0x20000594
 80078d8:	200005b0 	.word	0x200005b0
 80078dc:	200005c4 	.word	0x200005c4
 80078e0:	200005dc 	.word	0x200005dc
 80078e4:	200005a8 	.word	0x200005a8
 80078e8:	200005ac 	.word	0x200005ac

080078ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078f2:	e019      	b.n	8007928 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078f4:	f000 fbb2 	bl	800805c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80078f8:	4b10      	ldr	r3, [pc, #64]	; (800793c <prvCheckTasksWaitingTermination+0x50>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3304      	adds	r3, #4
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe fc29 	bl	800615c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800790a:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <prvCheckTasksWaitingTermination+0x54>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3b01      	subs	r3, #1
 8007910:	4a0b      	ldr	r2, [pc, #44]	; (8007940 <prvCheckTasksWaitingTermination+0x54>)
 8007912:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007914:	4b0b      	ldr	r3, [pc, #44]	; (8007944 <prvCheckTasksWaitingTermination+0x58>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3b01      	subs	r3, #1
 800791a:	4a0a      	ldr	r2, [pc, #40]	; (8007944 <prvCheckTasksWaitingTermination+0x58>)
 800791c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800791e:	f000 fbcd 	bl	80080bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f810 	bl	8007948 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007928:	4b06      	ldr	r3, [pc, #24]	; (8007944 <prvCheckTasksWaitingTermination+0x58>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e1      	bne.n	80078f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	200005c4 	.word	0x200005c4
 8007940:	200005f0 	.word	0x200005f0
 8007944:	200005d8 	.word	0x200005d8

08007948 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007956:	2b00      	cmp	r3, #0
 8007958:	d108      	bne.n	800796c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fd40 	bl	80083e4 <vPortFree>
				vPortFree( pxTCB );
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fd3d 	bl	80083e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800796a:	e018      	b.n	800799e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007972:	2b01      	cmp	r3, #1
 8007974:	d103      	bne.n	800797e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fd34 	bl	80083e4 <vPortFree>
	}
 800797c:	e00f      	b.n	800799e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007984:	2b02      	cmp	r3, #2
 8007986:	d00a      	beq.n	800799e <prvDeleteTCB+0x56>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60fb      	str	r3, [r7, #12]
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <prvDeleteTCB+0x54>
	}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ae:	4b0e      	ldr	r3, [pc, #56]	; (80079e8 <prvResetNextTaskUnblockTime+0x40>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <prvResetNextTaskUnblockTime+0x14>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <prvResetNextTaskUnblockTime+0x16>
 80079bc:	2300      	movs	r3, #0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079c2:	4b0a      	ldr	r3, [pc, #40]	; (80079ec <prvResetNextTaskUnblockTime+0x44>)
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079ca:	e008      	b.n	80079de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <prvResetNextTaskUnblockTime+0x40>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	4a04      	ldr	r2, [pc, #16]	; (80079ec <prvResetNextTaskUnblockTime+0x44>)
 80079dc:	6013      	str	r3, [r2, #0]
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr
 80079e8:	200005a8 	.word	0x200005a8
 80079ec:	20000610 	.word	0x20000610

080079f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079f6:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <xTaskGetSchedulerState+0x34>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d102      	bne.n	8007a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079fe:	2301      	movs	r3, #1
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	e008      	b.n	8007a16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a04:	4b08      	ldr	r3, [pc, #32]	; (8007a28 <xTaskGetSchedulerState+0x38>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	e001      	b.n	8007a16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a12:	2300      	movs	r3, #0
 8007a14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a16:	687b      	ldr	r3, [r7, #4]
	}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	200005fc 	.word	0x200005fc
 8007a28:	20000618 	.word	0x20000618

08007a2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d06e      	beq.n	8007b20 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	4b39      	ldr	r3, [pc, #228]	; (8007b2c <xTaskPriorityInherit+0x100>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d25e      	bcs.n	8007b0e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	db06      	blt.n	8007a66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a58:	4b34      	ldr	r3, [pc, #208]	; (8007b2c <xTaskPriorityInherit+0x100>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5e:	f1c3 0207 	rsb	r2, r3, #7
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	6959      	ldr	r1, [r3, #20]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4a2e      	ldr	r2, [pc, #184]	; (8007b30 <xTaskPriorityInherit+0x104>)
 8007a78:	4413      	add	r3, r2
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	d101      	bne.n	8007a82 <xTaskPriorityInherit+0x56>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <xTaskPriorityInherit+0x58>
 8007a82:	2300      	movs	r3, #0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d03a      	beq.n	8007afe <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fb65 	bl	800615c <uxListRemove>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d115      	bne.n	8007ac4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9c:	4924      	ldr	r1, [pc, #144]	; (8007b30 <xTaskPriorityInherit+0x104>)
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <xTaskPriorityInherit+0x98>
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	43da      	mvns	r2, r3
 8007aba:	4b1e      	ldr	r3, [pc, #120]	; (8007b34 <xTaskPriorityInherit+0x108>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	; (8007b34 <xTaskPriorityInherit+0x108>)
 8007ac2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ac4:	4b19      	ldr	r3, [pc, #100]	; (8007b2c <xTaskPriorityInherit+0x100>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	409a      	lsls	r2, r3
 8007ad6:	4b17      	ldr	r3, [pc, #92]	; (8007b34 <xTaskPriorityInherit+0x108>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	4a15      	ldr	r2, [pc, #84]	; (8007b34 <xTaskPriorityInherit+0x108>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4a10      	ldr	r2, [pc, #64]	; (8007b30 <xTaskPriorityInherit+0x104>)
 8007aee:	441a      	add	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7fe fad5 	bl	80060a6 <vListInsertEnd>
 8007afc:	e004      	b.n	8007b08 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007afe:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <xTaskPriorityInherit+0x100>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e008      	b.n	8007b20 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b12:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <xTaskPriorityInherit+0x100>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d201      	bcs.n	8007b20 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b20:	68fb      	ldr	r3, [r7, #12]
	}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	200004f0 	.word	0x200004f0
 8007b30:	200004f4 	.word	0x200004f4
 8007b34:	200005f8 	.word	0x200005f8

08007b38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d06e      	beq.n	8007c2c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b4e:	4b3a      	ldr	r3, [pc, #232]	; (8007c38 <xTaskPriorityDisinherit+0x100>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d00a      	beq.n	8007b6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	60fb      	str	r3, [r7, #12]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60bb      	str	r3, [r7, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b90:	1e5a      	subs	r2, r3, #1
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d044      	beq.n	8007c2c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d140      	bne.n	8007c2c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe fad4 	bl	800615c <uxListRemove>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d115      	bne.n	8007be6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	491f      	ldr	r1, [pc, #124]	; (8007c3c <xTaskPriorityDisinherit+0x104>)
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <xTaskPriorityDisinherit+0xae>
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	43da      	mvns	r2, r3
 8007bdc:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <xTaskPriorityDisinherit+0x108>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4013      	ands	r3, r2
 8007be2:	4a17      	ldr	r2, [pc, #92]	; (8007c40 <xTaskPriorityDisinherit+0x108>)
 8007be4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	f1c3 0207 	rsb	r2, r3, #7
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	2201      	movs	r2, #1
 8007c00:	409a      	lsls	r2, r3
 8007c02:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <xTaskPriorityDisinherit+0x108>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	4a0d      	ldr	r2, [pc, #52]	; (8007c40 <xTaskPriorityDisinherit+0x108>)
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4a08      	ldr	r2, [pc, #32]	; (8007c3c <xTaskPriorityDisinherit+0x104>)
 8007c1a:	441a      	add	r2, r3
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f7fe fa3f 	bl	80060a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c2c:	697b      	ldr	r3, [r7, #20]
	}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	200004f0 	.word	0x200004f0
 8007c3c:	200004f4 	.word	0x200004f4
 8007c40:	200005f8 	.word	0x200005f8

08007c44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c52:	2301      	movs	r3, #1
 8007c54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8088 	beq.w	8007d6e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10a      	bne.n	8007c7c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	60fb      	str	r3, [r7, #12]
}
 8007c78:	bf00      	nop
 8007c7a:	e7fe      	b.n	8007c7a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d902      	bls.n	8007c8c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	61fb      	str	r3, [r7, #28]
 8007c8a:	e002      	b.n	8007c92 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c90:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d068      	beq.n	8007d6e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d163      	bne.n	8007d6e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ca6:	4b34      	ldr	r3, [pc, #208]	; (8007d78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d10a      	bne.n	8007cc6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60bb      	str	r3, [r7, #8]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	db04      	blt.n	8007ce4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	f1c3 0207 	rsb	r2, r3, #7
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	6959      	ldr	r1, [r3, #20]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4a22      	ldr	r2, [pc, #136]	; (8007d7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007cf4:	4413      	add	r3, r2
 8007cf6:	4299      	cmp	r1, r3
 8007cf8:	d101      	bne.n	8007cfe <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e000      	b.n	8007d00 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d034      	beq.n	8007d6e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	3304      	adds	r3, #4
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe fa27 	bl	800615c <uxListRemove>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d115      	bne.n	8007d40 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d18:	4918      	ldr	r1, [pc, #96]	; (8007d7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	2201      	movs	r2, #1
 8007d30:	fa02 f303 	lsl.w	r3, r2, r3
 8007d34:	43da      	mvns	r2, r3
 8007d36:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	4a10      	ldr	r2, [pc, #64]	; (8007d80 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007d3e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	2201      	movs	r2, #1
 8007d46:	409a      	lsls	r2, r3
 8007d48:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	4a0c      	ldr	r2, [pc, #48]	; (8007d80 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4a07      	ldr	r2, [pc, #28]	; (8007d7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007d60:	441a      	add	r2, r3
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	3304      	adds	r3, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7fe f99c 	bl	80060a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d6e:	bf00      	nop
 8007d70:	3720      	adds	r7, #32
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	200004f0 	.word	0x200004f0
 8007d7c:	200004f4 	.word	0x200004f4
 8007d80:	200005f8 	.word	0x200005f8

08007d84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d88:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d96:	3201      	adds	r2, #1
 8007d98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007d9a:	4b03      	ldr	r3, [pc, #12]	; (8007da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
	}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	200004f0 	.word	0x200004f0

08007dac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007db6:	4b29      	ldr	r3, [pc, #164]	; (8007e5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dbc:	4b28      	ldr	r3, [pc, #160]	; (8007e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe f9ca 	bl	800615c <uxListRemove>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007dce:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	43da      	mvns	r2, r3
 8007ddc:	4b21      	ldr	r3, [pc, #132]	; (8007e64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4013      	ands	r3, r2
 8007de2:	4a20      	ldr	r2, [pc, #128]	; (8007e64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007de4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dec:	d10a      	bne.n	8007e04 <prvAddCurrentTaskToDelayedList+0x58>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d007      	beq.n	8007e04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007df4:	4b1a      	ldr	r3, [pc, #104]	; (8007e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	481a      	ldr	r0, [pc, #104]	; (8007e68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007dfe:	f7fe f952 	bl	80060a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e02:	e026      	b.n	8007e52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4413      	add	r3, r2
 8007e0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e0c:	4b14      	ldr	r3, [pc, #80]	; (8007e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d209      	bcs.n	8007e30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	4b0f      	ldr	r3, [pc, #60]	; (8007e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3304      	adds	r3, #4
 8007e26:	4619      	mov	r1, r3
 8007e28:	4610      	mov	r0, r2
 8007e2a:	f7fe f95f 	bl	80060ec <vListInsert>
}
 8007e2e:	e010      	b.n	8007e52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e30:	4b0f      	ldr	r3, [pc, #60]	; (8007e70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	f7fe f955 	bl	80060ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e42:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d202      	bcs.n	8007e52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e4c:	4a09      	ldr	r2, [pc, #36]	; (8007e74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6013      	str	r3, [r2, #0]
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200005f4 	.word	0x200005f4
 8007e60:	200004f0 	.word	0x200004f0
 8007e64:	200005f8 	.word	0x200005f8
 8007e68:	200005dc 	.word	0x200005dc
 8007e6c:	200005ac 	.word	0x200005ac
 8007e70:	200005a8 	.word	0x200005a8
 8007e74:	20000610 	.word	0x20000610

08007e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3b04      	subs	r3, #4
 8007e88:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3b04      	subs	r3, #4
 8007e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f023 0201 	bic.w	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3b04      	subs	r3, #4
 8007ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ea8:	4a08      	ldr	r2, [pc, #32]	; (8007ecc <pxPortInitialiseStack+0x54>)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3b14      	subs	r3, #20
 8007eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3b20      	subs	r3, #32
 8007ebe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	08007ed1 	.word	0x08007ed1

08007ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eda:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <prvTaskExitError+0x54>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d00a      	beq.n	8007efa <prvTaskExitError+0x2a>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	60fb      	str	r3, [r7, #12]
}
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <prvTaskExitError+0x28>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	60bb      	str	r3, [r7, #8]
}
 8007f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f0e:	bf00      	nop
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0fc      	beq.n	8007f10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	2000000c 	.word	0x2000000c
	...

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <pxCurrentTCBConst2>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f3a:	f380 8809 	msr	PSP, r0
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007f4e:	4770      	bx	lr

08007f50 <pxCurrentTCBConst2>:
 8007f50:	200004f0 	.word	0x200004f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007f58:	4806      	ldr	r0, [pc, #24]	; (8007f74 <prvPortStartFirstTask+0x1c>)
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f380 8808 	msr	MSP, r0
 8007f62:	b662      	cpsie	i
 8007f64:	b661      	cpsie	f
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	df00      	svc	0
 8007f70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f72:	bf00      	nop
 8007f74:	e000ed08 	.word	0xe000ed08

08007f78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f7e:	4b32      	ldr	r3, [pc, #200]	; (8008048 <xPortStartScheduler+0xd0>)
 8007f80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	22ff      	movs	r2, #255	; 0xff
 8007f8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	4b2a      	ldr	r3, [pc, #168]	; (800804c <xPortStartScheduler+0xd4>)
 8007fa4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fa6:	4b2a      	ldr	r3, [pc, #168]	; (8008050 <xPortStartScheduler+0xd8>)
 8007fa8:	2207      	movs	r2, #7
 8007faa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fac:	e009      	b.n	8007fc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007fae:	4b28      	ldr	r3, [pc, #160]	; (8008050 <xPortStartScheduler+0xd8>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	4a26      	ldr	r2, [pc, #152]	; (8008050 <xPortStartScheduler+0xd8>)
 8007fb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fca:	2b80      	cmp	r3, #128	; 0x80
 8007fcc:	d0ef      	beq.n	8007fae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fce:	4b20      	ldr	r3, [pc, #128]	; (8008050 <xPortStartScheduler+0xd8>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f1c3 0307 	rsb	r3, r3, #7
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d00a      	beq.n	8007ff0 <xPortStartScheduler+0x78>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	60bb      	str	r3, [r7, #8]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ff0:	4b17      	ldr	r3, [pc, #92]	; (8008050 <xPortStartScheduler+0xd8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	4a16      	ldr	r2, [pc, #88]	; (8008050 <xPortStartScheduler+0xd8>)
 8007ff8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ffa:	4b15      	ldr	r3, [pc, #84]	; (8008050 <xPortStartScheduler+0xd8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008002:	4a13      	ldr	r2, [pc, #76]	; (8008050 <xPortStartScheduler+0xd8>)
 8008004:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	b2da      	uxtb	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800800e:	4b11      	ldr	r3, [pc, #68]	; (8008054 <xPortStartScheduler+0xdc>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a10      	ldr	r2, [pc, #64]	; (8008054 <xPortStartScheduler+0xdc>)
 8008014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <xPortStartScheduler+0xdc>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a0d      	ldr	r2, [pc, #52]	; (8008054 <xPortStartScheduler+0xdc>)
 8008020:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008024:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008026:	f000 f8b9 	bl	800819c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800802a:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <xPortStartScheduler+0xe0>)
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008030:	f7ff ff92 	bl	8007f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008034:	f7ff fa9e 	bl	8007574 <vTaskSwitchContext>
	prvTaskExitError();
 8008038:	f7ff ff4a 	bl	8007ed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	e000e400 	.word	0xe000e400
 800804c:	2000061c 	.word	0x2000061c
 8008050:	20000620 	.word	0x20000620
 8008054:	e000ed20 	.word	0xe000ed20
 8008058:	2000000c 	.word	0x2000000c

0800805c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	607b      	str	r3, [r7, #4]
}
 8008074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008076:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <vPortEnterCritical+0x58>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3301      	adds	r3, #1
 800807c:	4a0d      	ldr	r2, [pc, #52]	; (80080b4 <vPortEnterCritical+0x58>)
 800807e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008080:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <vPortEnterCritical+0x58>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d10f      	bne.n	80080a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008088:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <vPortEnterCritical+0x5c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	603b      	str	r3, [r7, #0]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <vPortEnterCritical+0x4a>
	}
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	2000000c 	.word	0x2000000c
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080c2:	4b11      	ldr	r3, [pc, #68]	; (8008108 <vPortExitCritical+0x4c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <vPortExitCritical+0x24>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	607b      	str	r3, [r7, #4]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080e0:	4b09      	ldr	r3, [pc, #36]	; (8008108 <vPortExitCritical+0x4c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	4a08      	ldr	r2, [pc, #32]	; (8008108 <vPortExitCritical+0x4c>)
 80080e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <vPortExitCritical+0x4c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d105      	bne.n	80080fe <vPortExitCritical+0x42>
 80080f2:	2300      	movs	r3, #0
 80080f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	f383 8811 	msr	BASEPRI, r3
}
 80080fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr
 8008108:	2000000c 	.word	0x2000000c
 800810c:	00000000 	.word	0x00000000

08008110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008110:	f3ef 8009 	mrs	r0, PSP
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	4b0d      	ldr	r3, [pc, #52]	; (8008150 <pxCurrentTCBConst>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008120:	6010      	str	r0, [r2, #0]
 8008122:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008126:	f04f 0050 	mov.w	r0, #80	; 0x50
 800812a:	f380 8811 	msr	BASEPRI, r0
 800812e:	f7ff fa21 	bl	8007574 <vTaskSwitchContext>
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8811 	msr	BASEPRI, r0
 800813a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800813e:	6819      	ldr	r1, [r3, #0]
 8008140:	6808      	ldr	r0, [r1, #0]
 8008142:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008146:	f380 8809 	msr	PSP, r0
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	4770      	bx	lr

08008150 <pxCurrentTCBConst>:
 8008150:	200004f0 	.word	0x200004f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop

08008158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008172:	f7ff f941 	bl	80073f8 <xTaskIncrementTick>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <SysTick_Handler+0x40>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	2300      	movs	r3, #0
 8008186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f383 8811 	msr	BASEPRI, r3
}
 800818e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	e000ed04 	.word	0xe000ed04

0800819c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <vPortSetupTimerInterrupt+0x30>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081a6:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <vPortSetupTimerInterrupt+0x34>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <vPortSetupTimerInterrupt+0x38>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a09      	ldr	r2, [pc, #36]	; (80081d8 <vPortSetupTimerInterrupt+0x3c>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	099b      	lsrs	r3, r3, #6
 80081b8:	4a08      	ldr	r2, [pc, #32]	; (80081dc <vPortSetupTimerInterrupt+0x40>)
 80081ba:	3b01      	subs	r3, #1
 80081bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081be:	4b03      	ldr	r3, [pc, #12]	; (80081cc <vPortSetupTimerInterrupt+0x30>)
 80081c0:	2207      	movs	r2, #7
 80081c2:	601a      	str	r2, [r3, #0]
}
 80081c4:	bf00      	nop
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bc80      	pop	{r7}
 80081ca:	4770      	bx	lr
 80081cc:	e000e010 	.word	0xe000e010
 80081d0:	e000e018 	.word	0xe000e018
 80081d4:	20000000 	.word	0x20000000
 80081d8:	10624dd3 	.word	0x10624dd3
 80081dc:	e000e014 	.word	0xe000e014

080081e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081e6:	f3ef 8305 	mrs	r3, IPSR
 80081ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b0f      	cmp	r3, #15
 80081f0:	d914      	bls.n	800821c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081f2:	4a16      	ldr	r2, [pc, #88]	; (800824c <vPortValidateInterruptPriority+0x6c>)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081fc:	4b14      	ldr	r3, [pc, #80]	; (8008250 <vPortValidateInterruptPriority+0x70>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	7afa      	ldrb	r2, [r7, #11]
 8008202:	429a      	cmp	r2, r3
 8008204:	d20a      	bcs.n	800821c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	607b      	str	r3, [r7, #4]
}
 8008218:	bf00      	nop
 800821a:	e7fe      	b.n	800821a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800821c:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <vPortValidateInterruptPriority+0x74>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <vPortValidateInterruptPriority+0x78>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d90a      	bls.n	8008242 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	603b      	str	r3, [r7, #0]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <vPortValidateInterruptPriority+0x60>
	}
 8008242:	bf00      	nop
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr
 800824c:	e000e3f0 	.word	0xe000e3f0
 8008250:	2000061c 	.word	0x2000061c
 8008254:	e000ed0c 	.word	0xe000ed0c
 8008258:	20000620 	.word	0x20000620

0800825c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	; 0x28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008268:	f7ff f81c 	bl	80072a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800826c:	4b58      	ldr	r3, [pc, #352]	; (80083d0 <pvPortMalloc+0x174>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008274:	f000 f910 	bl	8008498 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008278:	4b56      	ldr	r3, [pc, #344]	; (80083d4 <pvPortMalloc+0x178>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	f040 808e 	bne.w	80083a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01d      	beq.n	80082c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800828c:	2208      	movs	r2, #8
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4413      	add	r3, r2
 8008292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b00      	cmp	r3, #0
 800829c:	d014      	beq.n	80082c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f023 0307 	bic.w	r3, r3, #7
 80082a4:	3308      	adds	r3, #8
 80082a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <pvPortMalloc+0x6c>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	617b      	str	r3, [r7, #20]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d069      	beq.n	80083a2 <pvPortMalloc+0x146>
 80082ce:	4b42      	ldr	r3, [pc, #264]	; (80083d8 <pvPortMalloc+0x17c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d864      	bhi.n	80083a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082d8:	4b40      	ldr	r3, [pc, #256]	; (80083dc <pvPortMalloc+0x180>)
 80082da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082dc:	4b3f      	ldr	r3, [pc, #252]	; (80083dc <pvPortMalloc+0x180>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082e2:	e004      	b.n	80082ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d903      	bls.n	8008300 <pvPortMalloc+0xa4>
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1f1      	bne.n	80082e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008300:	4b33      	ldr	r3, [pc, #204]	; (80083d0 <pvPortMalloc+0x174>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008306:	429a      	cmp	r2, r3
 8008308:	d04b      	beq.n	80083a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2208      	movs	r2, #8
 8008310:	4413      	add	r3, r2
 8008312:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	1ad2      	subs	r2, r2, r3
 8008324:	2308      	movs	r3, #8
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	429a      	cmp	r2, r3
 800832a:	d91f      	bls.n	800836c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800832c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4413      	add	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <pvPortMalloc+0xf8>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	613b      	str	r3, [r7, #16]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	1ad2      	subs	r2, r2, r3
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008366:	69b8      	ldr	r0, [r7, #24]
 8008368:	f000 f8f8 	bl	800855c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800836c:	4b1a      	ldr	r3, [pc, #104]	; (80083d8 <pvPortMalloc+0x17c>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	4a18      	ldr	r2, [pc, #96]	; (80083d8 <pvPortMalloc+0x17c>)
 8008378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800837a:	4b17      	ldr	r3, [pc, #92]	; (80083d8 <pvPortMalloc+0x17c>)
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	4b18      	ldr	r3, [pc, #96]	; (80083e0 <pvPortMalloc+0x184>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d203      	bcs.n	800838e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <pvPortMalloc+0x17c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a15      	ldr	r2, [pc, #84]	; (80083e0 <pvPortMalloc+0x184>)
 800838c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	4b10      	ldr	r3, [pc, #64]	; (80083d4 <pvPortMalloc+0x178>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	431a      	orrs	r2, r3
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083a2:	f7fe ff8d 	bl	80072c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00a      	beq.n	80083c6 <pvPortMalloc+0x16a>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	60fb      	str	r3, [r7, #12]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <pvPortMalloc+0x168>
	return pvReturn;
 80083c6:	69fb      	ldr	r3, [r7, #28]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3728      	adds	r7, #40	; 0x28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	2000122c 	.word	0x2000122c
 80083d4:	20001238 	.word	0x20001238
 80083d8:	20001230 	.word	0x20001230
 80083dc:	20001224 	.word	0x20001224
 80083e0:	20001234 	.word	0x20001234

080083e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d048      	beq.n	8008488 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083f6:	2308      	movs	r3, #8
 80083f8:	425b      	negs	r3, r3
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	4413      	add	r3, r2
 80083fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	4b21      	ldr	r3, [pc, #132]	; (8008490 <vPortFree+0xac>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4013      	ands	r3, r2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <vPortFree+0x44>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	60fb      	str	r3, [r7, #12]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <vPortFree+0x62>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60bb      	str	r3, [r7, #8]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	4b11      	ldr	r3, [pc, #68]	; (8008490 <vPortFree+0xac>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4013      	ands	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d019      	beq.n	8008488 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d115      	bne.n	8008488 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <vPortFree+0xac>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	43db      	mvns	r3, r3
 8008466:	401a      	ands	r2, r3
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800846c:	f7fe ff1a 	bl	80072a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	4b07      	ldr	r3, [pc, #28]	; (8008494 <vPortFree+0xb0>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4413      	add	r3, r2
 800847a:	4a06      	ldr	r2, [pc, #24]	; (8008494 <vPortFree+0xb0>)
 800847c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800847e:	6938      	ldr	r0, [r7, #16]
 8008480:	f000 f86c 	bl	800855c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008484:	f7fe ff1c 	bl	80072c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008488:	bf00      	nop
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20001238 	.word	0x20001238
 8008494:	20001230 	.word	0x20001230

08008498 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800849e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80084a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084a4:	4b27      	ldr	r3, [pc, #156]	; (8008544 <prvHeapInit+0xac>)
 80084a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00c      	beq.n	80084cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3307      	adds	r3, #7
 80084b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	4a1f      	ldr	r2, [pc, #124]	; (8008544 <prvHeapInit+0xac>)
 80084c8:	4413      	add	r3, r2
 80084ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084d0:	4a1d      	ldr	r2, [pc, #116]	; (8008548 <prvHeapInit+0xb0>)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084d6:	4b1c      	ldr	r3, [pc, #112]	; (8008548 <prvHeapInit+0xb0>)
 80084d8:	2200      	movs	r2, #0
 80084da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	4413      	add	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084e4:	2208      	movs	r2, #8
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f023 0307 	bic.w	r3, r3, #7
 80084f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4a15      	ldr	r2, [pc, #84]	; (800854c <prvHeapInit+0xb4>)
 80084f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084fa:	4b14      	ldr	r3, [pc, #80]	; (800854c <prvHeapInit+0xb4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2200      	movs	r2, #0
 8008500:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008502:	4b12      	ldr	r3, [pc, #72]	; (800854c <prvHeapInit+0xb4>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	1ad2      	subs	r2, r2, r3
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008518:	4b0c      	ldr	r3, [pc, #48]	; (800854c <prvHeapInit+0xb4>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	4a0a      	ldr	r2, [pc, #40]	; (8008550 <prvHeapInit+0xb8>)
 8008526:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	4a09      	ldr	r2, [pc, #36]	; (8008554 <prvHeapInit+0xbc>)
 800852e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008530:	4b09      	ldr	r3, [pc, #36]	; (8008558 <prvHeapInit+0xc0>)
 8008532:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008536:	601a      	str	r2, [r3, #0]
}
 8008538:	bf00      	nop
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	20000624 	.word	0x20000624
 8008548:	20001224 	.word	0x20001224
 800854c:	2000122c 	.word	0x2000122c
 8008550:	20001234 	.word	0x20001234
 8008554:	20001230 	.word	0x20001230
 8008558:	20001238 	.word	0x20001238

0800855c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008564:	4b27      	ldr	r3, [pc, #156]	; (8008604 <prvInsertBlockIntoFreeList+0xa8>)
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	e002      	b.n	8008570 <prvInsertBlockIntoFreeList+0x14>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d8f7      	bhi.n	800856a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	4413      	add	r3, r2
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	429a      	cmp	r2, r3
 800858a:	d108      	bne.n	800859e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	441a      	add	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	441a      	add	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d118      	bne.n	80085e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b14      	ldr	r3, [pc, #80]	; (8008608 <prvInsertBlockIntoFreeList+0xac>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d00d      	beq.n	80085da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	441a      	add	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	e008      	b.n	80085ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <prvInsertBlockIntoFreeList+0xac>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	e003      	b.n	80085ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d002      	beq.n	80085fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085fa:	bf00      	nop
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr
 8008604:	20001224 	.word	0x20001224
 8008608:	2000122c 	.word	0x2000122c

0800860c <atoi>:
 800860c:	220a      	movs	r2, #10
 800860e:	2100      	movs	r1, #0
 8008610:	f000 b8d6 	b.w	80087c0 <strtol>

08008614 <__errno>:
 8008614:	4b01      	ldr	r3, [pc, #4]	; (800861c <__errno+0x8>)
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	20000010 	.word	0x20000010

08008620 <__libc_init_array>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	2600      	movs	r6, #0
 8008624:	4d0c      	ldr	r5, [pc, #48]	; (8008658 <__libc_init_array+0x38>)
 8008626:	4c0d      	ldr	r4, [pc, #52]	; (800865c <__libc_init_array+0x3c>)
 8008628:	1b64      	subs	r4, r4, r5
 800862a:	10a4      	asrs	r4, r4, #2
 800862c:	42a6      	cmp	r6, r4
 800862e:	d109      	bne.n	8008644 <__libc_init_array+0x24>
 8008630:	f000 f912 	bl	8008858 <_init>
 8008634:	2600      	movs	r6, #0
 8008636:	4d0a      	ldr	r5, [pc, #40]	; (8008660 <__libc_init_array+0x40>)
 8008638:	4c0a      	ldr	r4, [pc, #40]	; (8008664 <__libc_init_array+0x44>)
 800863a:	1b64      	subs	r4, r4, r5
 800863c:	10a4      	asrs	r4, r4, #2
 800863e:	42a6      	cmp	r6, r4
 8008640:	d105      	bne.n	800864e <__libc_init_array+0x2e>
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	f855 3b04 	ldr.w	r3, [r5], #4
 8008648:	4798      	blx	r3
 800864a:	3601      	adds	r6, #1
 800864c:	e7ee      	b.n	800862c <__libc_init_array+0xc>
 800864e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008652:	4798      	blx	r3
 8008654:	3601      	adds	r6, #1
 8008656:	e7f2      	b.n	800863e <__libc_init_array+0x1e>
 8008658:	08008a94 	.word	0x08008a94
 800865c:	08008a94 	.word	0x08008a94
 8008660:	08008a94 	.word	0x08008a94
 8008664:	08008a98 	.word	0x08008a98

08008668 <__itoa>:
 8008668:	1e93      	subs	r3, r2, #2
 800866a:	2b22      	cmp	r3, #34	; 0x22
 800866c:	b510      	push	{r4, lr}
 800866e:	460c      	mov	r4, r1
 8008670:	d904      	bls.n	800867c <__itoa+0x14>
 8008672:	2300      	movs	r3, #0
 8008674:	461c      	mov	r4, r3
 8008676:	700b      	strb	r3, [r1, #0]
 8008678:	4620      	mov	r0, r4
 800867a:	bd10      	pop	{r4, pc}
 800867c:	2a0a      	cmp	r2, #10
 800867e:	d109      	bne.n	8008694 <__itoa+0x2c>
 8008680:	2800      	cmp	r0, #0
 8008682:	da07      	bge.n	8008694 <__itoa+0x2c>
 8008684:	232d      	movs	r3, #45	; 0x2d
 8008686:	700b      	strb	r3, [r1, #0]
 8008688:	2101      	movs	r1, #1
 800868a:	4240      	negs	r0, r0
 800868c:	4421      	add	r1, r4
 800868e:	f000 f8a1 	bl	80087d4 <__utoa>
 8008692:	e7f1      	b.n	8008678 <__itoa+0x10>
 8008694:	2100      	movs	r1, #0
 8008696:	e7f9      	b.n	800868c <__itoa+0x24>

08008698 <itoa>:
 8008698:	f7ff bfe6 	b.w	8008668 <__itoa>

0800869c <memcpy>:
 800869c:	440a      	add	r2, r1
 800869e:	4291      	cmp	r1, r2
 80086a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086a4:	d100      	bne.n	80086a8 <memcpy+0xc>
 80086a6:	4770      	bx	lr
 80086a8:	b510      	push	{r4, lr}
 80086aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ae:	4291      	cmp	r1, r2
 80086b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b4:	d1f9      	bne.n	80086aa <memcpy+0xe>
 80086b6:	bd10      	pop	{r4, pc}

080086b8 <memset>:
 80086b8:	4603      	mov	r3, r0
 80086ba:	4402      	add	r2, r0
 80086bc:	4293      	cmp	r3, r2
 80086be:	d100      	bne.n	80086c2 <memset+0xa>
 80086c0:	4770      	bx	lr
 80086c2:	f803 1b01 	strb.w	r1, [r3], #1
 80086c6:	e7f9      	b.n	80086bc <memset+0x4>

080086c8 <_strtol_l.constprop.0>:
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ce:	4680      	mov	r8, r0
 80086d0:	d001      	beq.n	80086d6 <_strtol_l.constprop.0+0xe>
 80086d2:	2b24      	cmp	r3, #36	; 0x24
 80086d4:	d906      	bls.n	80086e4 <_strtol_l.constprop.0+0x1c>
 80086d6:	f7ff ff9d 	bl	8008614 <__errno>
 80086da:	2316      	movs	r3, #22
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	2000      	movs	r0, #0
 80086e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e4:	460d      	mov	r5, r1
 80086e6:	4f35      	ldr	r7, [pc, #212]	; (80087bc <_strtol_l.constprop.0+0xf4>)
 80086e8:	4628      	mov	r0, r5
 80086ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086ee:	5de6      	ldrb	r6, [r4, r7]
 80086f0:	f016 0608 	ands.w	r6, r6, #8
 80086f4:	d1f8      	bne.n	80086e8 <_strtol_l.constprop.0+0x20>
 80086f6:	2c2d      	cmp	r4, #45	; 0x2d
 80086f8:	d12f      	bne.n	800875a <_strtol_l.constprop.0+0x92>
 80086fa:	2601      	movs	r6, #1
 80086fc:	782c      	ldrb	r4, [r5, #0]
 80086fe:	1c85      	adds	r5, r0, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d057      	beq.n	80087b4 <_strtol_l.constprop.0+0xec>
 8008704:	2b10      	cmp	r3, #16
 8008706:	d109      	bne.n	800871c <_strtol_l.constprop.0+0x54>
 8008708:	2c30      	cmp	r4, #48	; 0x30
 800870a:	d107      	bne.n	800871c <_strtol_l.constprop.0+0x54>
 800870c:	7828      	ldrb	r0, [r5, #0]
 800870e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008712:	2858      	cmp	r0, #88	; 0x58
 8008714:	d149      	bne.n	80087aa <_strtol_l.constprop.0+0xe2>
 8008716:	2310      	movs	r3, #16
 8008718:	786c      	ldrb	r4, [r5, #1]
 800871a:	3502      	adds	r5, #2
 800871c:	2700      	movs	r7, #0
 800871e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008722:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008726:	fbbe f9f3 	udiv	r9, lr, r3
 800872a:	4638      	mov	r0, r7
 800872c:	fb03 ea19 	mls	sl, r3, r9, lr
 8008730:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008734:	f1bc 0f09 	cmp.w	ip, #9
 8008738:	d814      	bhi.n	8008764 <_strtol_l.constprop.0+0x9c>
 800873a:	4664      	mov	r4, ip
 800873c:	42a3      	cmp	r3, r4
 800873e:	dd22      	ble.n	8008786 <_strtol_l.constprop.0+0xbe>
 8008740:	2f00      	cmp	r7, #0
 8008742:	db1d      	blt.n	8008780 <_strtol_l.constprop.0+0xb8>
 8008744:	4581      	cmp	r9, r0
 8008746:	d31b      	bcc.n	8008780 <_strtol_l.constprop.0+0xb8>
 8008748:	d101      	bne.n	800874e <_strtol_l.constprop.0+0x86>
 800874a:	45a2      	cmp	sl, r4
 800874c:	db18      	blt.n	8008780 <_strtol_l.constprop.0+0xb8>
 800874e:	2701      	movs	r7, #1
 8008750:	fb00 4003 	mla	r0, r0, r3, r4
 8008754:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008758:	e7ea      	b.n	8008730 <_strtol_l.constprop.0+0x68>
 800875a:	2c2b      	cmp	r4, #43	; 0x2b
 800875c:	bf04      	itt	eq
 800875e:	782c      	ldrbeq	r4, [r5, #0]
 8008760:	1c85      	addeq	r5, r0, #2
 8008762:	e7cd      	b.n	8008700 <_strtol_l.constprop.0+0x38>
 8008764:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008768:	f1bc 0f19 	cmp.w	ip, #25
 800876c:	d801      	bhi.n	8008772 <_strtol_l.constprop.0+0xaa>
 800876e:	3c37      	subs	r4, #55	; 0x37
 8008770:	e7e4      	b.n	800873c <_strtol_l.constprop.0+0x74>
 8008772:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008776:	f1bc 0f19 	cmp.w	ip, #25
 800877a:	d804      	bhi.n	8008786 <_strtol_l.constprop.0+0xbe>
 800877c:	3c57      	subs	r4, #87	; 0x57
 800877e:	e7dd      	b.n	800873c <_strtol_l.constprop.0+0x74>
 8008780:	f04f 37ff 	mov.w	r7, #4294967295
 8008784:	e7e6      	b.n	8008754 <_strtol_l.constprop.0+0x8c>
 8008786:	2f00      	cmp	r7, #0
 8008788:	da07      	bge.n	800879a <_strtol_l.constprop.0+0xd2>
 800878a:	2322      	movs	r3, #34	; 0x22
 800878c:	4670      	mov	r0, lr
 800878e:	f8c8 3000 	str.w	r3, [r8]
 8008792:	2a00      	cmp	r2, #0
 8008794:	d0a4      	beq.n	80086e0 <_strtol_l.constprop.0+0x18>
 8008796:	1e69      	subs	r1, r5, #1
 8008798:	e005      	b.n	80087a6 <_strtol_l.constprop.0+0xde>
 800879a:	b106      	cbz	r6, 800879e <_strtol_l.constprop.0+0xd6>
 800879c:	4240      	negs	r0, r0
 800879e:	2a00      	cmp	r2, #0
 80087a0:	d09e      	beq.n	80086e0 <_strtol_l.constprop.0+0x18>
 80087a2:	2f00      	cmp	r7, #0
 80087a4:	d1f7      	bne.n	8008796 <_strtol_l.constprop.0+0xce>
 80087a6:	6011      	str	r1, [r2, #0]
 80087a8:	e79a      	b.n	80086e0 <_strtol_l.constprop.0+0x18>
 80087aa:	2430      	movs	r4, #48	; 0x30
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1b5      	bne.n	800871c <_strtol_l.constprop.0+0x54>
 80087b0:	2308      	movs	r3, #8
 80087b2:	e7b3      	b.n	800871c <_strtol_l.constprop.0+0x54>
 80087b4:	2c30      	cmp	r4, #48	; 0x30
 80087b6:	d0a9      	beq.n	800870c <_strtol_l.constprop.0+0x44>
 80087b8:	230a      	movs	r3, #10
 80087ba:	e7af      	b.n	800871c <_strtol_l.constprop.0+0x54>
 80087bc:	08008992 	.word	0x08008992

080087c0 <strtol>:
 80087c0:	4613      	mov	r3, r2
 80087c2:	460a      	mov	r2, r1
 80087c4:	4601      	mov	r1, r0
 80087c6:	4802      	ldr	r0, [pc, #8]	; (80087d0 <strtol+0x10>)
 80087c8:	6800      	ldr	r0, [r0, #0]
 80087ca:	f7ff bf7d 	b.w	80086c8 <_strtol_l.constprop.0>
 80087ce:	bf00      	nop
 80087d0:	20000010 	.word	0x20000010

080087d4 <__utoa>:
 80087d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d6:	b08b      	sub	sp, #44	; 0x2c
 80087d8:	4605      	mov	r5, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	466e      	mov	r6, sp
 80087de:	4c1d      	ldr	r4, [pc, #116]	; (8008854 <__utoa+0x80>)
 80087e0:	f104 0c20 	add.w	ip, r4, #32
 80087e4:	4637      	mov	r7, r6
 80087e6:	6820      	ldr	r0, [r4, #0]
 80087e8:	6861      	ldr	r1, [r4, #4]
 80087ea:	3408      	adds	r4, #8
 80087ec:	c703      	stmia	r7!, {r0, r1}
 80087ee:	4564      	cmp	r4, ip
 80087f0:	463e      	mov	r6, r7
 80087f2:	d1f7      	bne.n	80087e4 <__utoa+0x10>
 80087f4:	7921      	ldrb	r1, [r4, #4]
 80087f6:	6820      	ldr	r0, [r4, #0]
 80087f8:	7139      	strb	r1, [r7, #4]
 80087fa:	1e91      	subs	r1, r2, #2
 80087fc:	2922      	cmp	r1, #34	; 0x22
 80087fe:	6038      	str	r0, [r7, #0]
 8008800:	f04f 0100 	mov.w	r1, #0
 8008804:	d904      	bls.n	8008810 <__utoa+0x3c>
 8008806:	7019      	strb	r1, [r3, #0]
 8008808:	460b      	mov	r3, r1
 800880a:	4618      	mov	r0, r3
 800880c:	b00b      	add	sp, #44	; 0x2c
 800880e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008810:	1e58      	subs	r0, r3, #1
 8008812:	4684      	mov	ip, r0
 8008814:	fbb5 f7f2 	udiv	r7, r5, r2
 8008818:	fb02 5617 	mls	r6, r2, r7, r5
 800881c:	3628      	adds	r6, #40	; 0x28
 800881e:	446e      	add	r6, sp
 8008820:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008824:	460c      	mov	r4, r1
 8008826:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800882a:	462e      	mov	r6, r5
 800882c:	42b2      	cmp	r2, r6
 800882e:	463d      	mov	r5, r7
 8008830:	f101 0101 	add.w	r1, r1, #1
 8008834:	d9ee      	bls.n	8008814 <__utoa+0x40>
 8008836:	2200      	movs	r2, #0
 8008838:	545a      	strb	r2, [r3, r1]
 800883a:	1919      	adds	r1, r3, r4
 800883c:	1aa5      	subs	r5, r4, r2
 800883e:	42aa      	cmp	r2, r5
 8008840:	dae3      	bge.n	800880a <__utoa+0x36>
 8008842:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008846:	780e      	ldrb	r6, [r1, #0]
 8008848:	3201      	adds	r2, #1
 800884a:	7006      	strb	r6, [r0, #0]
 800884c:	f801 5901 	strb.w	r5, [r1], #-1
 8008850:	e7f4      	b.n	800883c <__utoa+0x68>
 8008852:	bf00      	nop
 8008854:	0800896c 	.word	0x0800896c

08008858 <_init>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	bf00      	nop
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr

08008864 <_fini>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr
